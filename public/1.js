webpackJsonp([1],{

/***/ "./node_modules/@riophae/vue-treeselect/dist/vue-treeselect.min.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * vue-treeselect v0.0.6 | (c) 2017 Riophae Lee
 * Released under the MIT License.
 * https://github.com/riophae/vue-treeselect
 */
!function (e, t) {
  "object" == ( false ? "undefined" : _typeof(exports)) && "object" == ( false ? "undefined" : _typeof(module)) ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? exports.VueTreeselect = t() : e.VueTreeselect = t();
}(this, function () {
  return function (e) {
    function t(i) {
      if (n[i]) return n[i].exports;var s = n[i] = { i: i, l: !1, exports: {} };return e[i].call(s.exports, s, s.exports, t), s.l = !0, s.exports;
    }var n = {};return t.m = e, t.c = n, t.d = function (e, n, i) {
      t.o(e, n) || Object.defineProperty(e, n, { configurable: !1, enumerable: !0, get: i });
    }, t.n = function (e) {
      var n = e && e.__esModule ? function () {
        return e.default;
      } : function () {
        return e;
      };return t.d(n, "a", n), n;
    }, t.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }, t.p = "/", t(t.s = 4);
  }([function (e, t) {
    e.exports = function (e, t, n, i, s, o) {
      var r,
          a = e = e || {},
          l = _typeof(e.default);"object" !== l && "function" !== l || (r = e, a = e.default);var c = "function" == typeof a ? a.options : a;t && (c.render = t.render, c.staticRenderFns = t.staticRenderFns, c._compiled = !0), n && (c.functional = !0), s && (c._scopeId = s);var u;if (o ? (u = function u(e) {
        e = e || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext, e || "undefined" == typeof __VUE_SSR_CONTEXT__ || (e = __VUE_SSR_CONTEXT__), i && i.call(this, e), e && e._registeredComponents && e._registeredComponents.add(o);
      }, c._ssrRegister = u) : i && (u = i), u) {
        var d = c.functional,
            h = d ? c.render : c.beforeCreate;d ? (c._injectStyles = u, c.render = function (e, t) {
          return u.call(t), h(e, t);
        }) : c.beforeCreate = h ? [].concat(h, u) : [u];
      }return { esModule: r, exports: a, options: c };
    };
  }, function (e, t) {
    function n(e) {
      var t = typeof e === "undefined" ? "undefined" : _typeof(e);return null != e && ("object" == t || "function" == t);
    }e.exports = n;
  }, function (e, t, n) {
    var i = n(9),
        s = "object" == (typeof self === "undefined" ? "undefined" : _typeof(self)) && self && self.Object === Object && self,
        o = i || s || Function("return this")();e.exports = o;
  }, function (e, t, n) {
    var i = n(2),
        s = i.Symbol;e.exports = s;
  }, function (e, t, n) {
    "use strict";
    function i(e) {
      return function (t) {
        "mousedown" === t.type && 0 === t.button && e.call(this, t);
      };
    }function s() {}function o(e) {
      return null != e && "object" === (void 0 === e ? "undefined" : x(e)) && Object.getPrototypeOf(e) === Object.prototype;
    }function r(e, t, n) {
      o(n) ? (e[t] || (e[t] = {}), l(e[t], n)) : e[t] = n;
    }function a(e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }function l(e, t) {
      if (null == t) ;else if (o(t)) for (var n = Object.keys(t), i = 0, s = n.length; i < s; i++) {
        r(e, n[i], t[n[i]]);
      } else N();return e;
    }function c(e) {
      return S(function () {
        return Array.isArray(e);
      }, function () {
        return "unexpected type";
      }), e[e.length - 1];
    }function u(e, t, n) {
      for (var i = 0, s = e.length; i < s; i++) {
        if (t.call(n, e[i], i, e)) return i;
      }return -1;
    }function d(e, t, n) {
      return "function" == typeof Array.prototype.findIndex ? e.findIndex(t, n) : u(e, t, n);
    }function h(e, t) {
      var n = e.indexOf(t);-1 !== n && e.splice(n, 1);
    }function p(e, t) {
      if (e.length !== t.length) return !1;for (var n = 0; n < e.length; n++) {
        if (e[n] !== t[n]) return !1;
      }return !0;
    }function f(e, t, n) {
      return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e;
    }function v(e, t) {
      for (var n = 0;;) {
        if (e.level < n) return -1;if (t.level < n) return 1;if (e.index[n] !== t.index[n]) return e.index[n] - t.index[n];n++;
      }
    }function _(e, t) {
      return e.level !== t.level ? e.level - t.level : v(e, t);
    }function m(e) {
      return "and " + e + " more";
    }function C(e) {
      return "Failed to load children options: " + (e.message || String(e)) + ".";
    }function y(e) {
      n(5);
    }Object.defineProperty(t, "__esModule", { value: !0 });var b = n(6),
        g = n.n(b),
        E = n(7),
        O = n.n(E),
        x = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
      return typeof e === "undefined" ? "undefined" : _typeof(e);
    } : function (e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
    },
        S = s,
        N = s,
        w = { provide: function provide() {
        return { instance: this, UNCHECKED: 0, INDETERMINATE: 1, CHECKED: 2, UNMATCHED: 0, DESCENDANT_MATCHED: 1, MATCHED: 2 };
      }, props: { autofocus: { type: Boolean, default: !1 }, backspaceRemoves: { type: Boolean, default: !0 }, branchNodesFirst: { type: Boolean, default: !1 }, clearable: { type: Boolean, default: !0 }, clearAllText: { type: String, default: "Clear all" }, clearOnSelect: { type: Boolean, default: !1 }, clearValueText: { type: String, default: "Clear value" }, closeOnSelect: { type: Boolean, default: !0 }, deleteRemoves: { type: Boolean, default: !0 }, disableBranchNodes: { type: Boolean, default: !1 }, disabled: { type: Boolean, default: !1 }, defaultExpandLevel: { type: Number, default: 0 }, escapeClearsValue: { type: Boolean, default: !0 }, flat: { type: Boolean, default: !1 }, id: { default: null }, limit: { type: Number, default: 1 / 0 }, limitText: { type: Function, default: m }, loadChildrenErrorText: { type: Function, default: C }, loadChildrenOptions: { type: Function }, loadingText: { type: String, default: "Loading..." }, loadRootOptions: { type: Function }, maxHeight: { type: Number, default: 300 }, multiple: { type: Boolean, default: !1 }, noChildrenText: { type: String, default: "No children options..." }, noResultsText: { type: String, default: "No results found..." }, noOptionsText: { type: String, default: "No options available." }, openDirection: { type: String, default: "auto" }, openOnClick: { type: Boolean, default: !0 }, openOnFocus: { type: Boolean, default: !1 }, options: { type: Array }, placeholder: { type: String, default: "Select..." }, retainScrollPosition: { type: Boolean, default: !0 }, retryText: { type: String, default: "Retry?" }, retryTitle: { type: String, default: "Click to retry" }, searchable: { type: Boolean, default: !0 }, showCount: { type: Boolean, default: !1 }, showCountOf: { type: String, default: "ALL_CHILDREN", validator: function validator(e) {
            return -1 !== ["ALL_CHILDREN", "ALL_DESCENDANTS", "LEAF_CHILDREN", "LEAF_DESCENDANTS"].indexOf(e);
          } }, showCountOnSearch: null, sortValueBy: { type: String, default: "ORDER_SELECTED" }, subItemsLimit: { type: Number, default: 1 / 0 }, tabIndex: { type: Number, default: 0 }, value: null }, data: function data() {
        return { internalValue: [], isFocused: !1, isOpen: !1, nodeCheckedStateMap: Object.create(null), nodeMap: Object.create(null), normalizedOptions: null, noSearchResults: !0, optimizedHeight: 0, prefferedOpenDirection: "below", rootOptionsLoaded: !1, loadingRootOptions: !1, loadingRootOptionsError: "", searchingCount: Object.create(null), searching: !1, searchQuery: "", selectedNodeMap: Object.create(null), lastScrollPosition: 0 };
      }, computed: { selectedNodesNumber: function selectedNodesNumber() {
          return this.internalValue.length;
        }, hasValue: function hasValue() {
          return this.selectedNodesNumber > 0;
        }, selectedNodes: function selectedNodes() {
          return this.internalValue.map(this.getNode);
        }, single: function single() {
          return !this.multiple;
        }, visibleValue: function visibleValue() {
          return this.selectedNodes.slice(0, this.limit);
        }, hasExceededLimit: function hasExceededLimit() {
          return this.selectedNodesNumber > this.limit;
        }, shouldShowClearIcon: function shouldShowClearIcon() {
          return this.clearable && !this.disabled && this.hasValue;
        }, showCountOnSearchComputed: function showCountOnSearchComputed() {
          return "boolean" == typeof this.showCountOnSearch ? this.showCountOnSearch : this.showCount;
        } }, watch: { disabled: function disabled(e) {
          e && this.isOpen && this.closeMenu();
        }, multiple: function multiple(e) {
          e && this.buildNodeCheckedStateMap();
        }, searchQuery: O()(function () {
          this.handleSearch(), this.$emit("search-change", this.searchQuery, this.id);
        }, 200), sortValueBy: function sortValueBy() {
          this.sortValue();
        }, internalValue: function internalValue() {
          this.$emit("input", this.getValue(), this.id);
        }, value: function value(e) {
          var t = e || 0 === e ? this.multiple ? e.slice() : [e] : [];!p(t, this.internalValue) && (this.internalValue = t, this.buildSelectedNodeMap(), this.buildNodeCheckedStateMap());
        } }, methods: { verifyProps: function verifyProps() {
          var e = this;this.loadRootOptions || (this.options ? Array.isArray(this.options) || S(function () {
            return !1;
          }, function () {
            return "Expected prop `options` to be an array, instead got: " + e.options + ".";
          }) : S(function () {
            return !1;
          }, function () {
            return "Required prop `options` is not provided.";
          }));
        }, resetFlags: function resetFlags() {
          this._blurOnSelect = !1, this._wasClickedOnValueItem = !1;
        }, initialize: function initialize(e) {
          Array.isArray(e) && (this.rootOptionsLoaded = !0), this.initializeRootOptions(e || []), this.initializeValue(), this.buildSelectedNodeMap(), this.buildNodeCheckedStateMap();
        }, getValue: function getValue() {
          return this.multiple ? this.internalValue.slice() : this.internalValue[0];
        }, getNode: function getNode(e) {
          return S(function () {
            return null != e;
          }, function () {
            return "Invalid node id: " + e;
          }), this.nodeMap[e] || { id: e, label: e + " (unknown)", ancestors: [], parentNode: null, isUnknownNode: !0, isLeaf: !0, isBranch: !1 };
        }, isSelected: function isSelected(e) {
          return e.id in this.selectedNodeMap;
        }, checkIfBranchNode: function checkIfBranchNode(e) {
          S(function () {
            return e && e.isBranch;
          }, function () {
            return "Expected a branch node, instead got: " + e;
          });
        }, traverseDescendants: function traverseDescendants(e, t, n) {
          var i = this;"function" == typeof t && (n = t, t = 1 / 0), e.isBranch && e.level < t && e.children.forEach(function (e) {
            i.traverseDescendants(e, t, n), n(e);
          });
        }, traverseAncestors: function traverseAncestors(e, t) {
          var n = e.parentNode;null !== n && (t(n), this.traverseAncestors(n, t));
        }, traverseAllNodes: function traverseAllNodes(e) {
          var t = this;this.normalizedOptions.forEach(function (n) {
            t.traverseDescendants(n, e), e(n);
          });
        }, toggleClickOutsideEvent: function toggleClickOutsideEvent(e) {
          e ? document.addEventListener("mousedown", this.handleClickOutside, !1) : document.removeEventListener("mousedown", this.handleClickOutside, !1);
        }, focusInput: function focusInput() {
          this.$refs.value.focusInput();
        }, blurInput: function blurInput() {
          this.$refs.value.blurInput();
        }, handleMouseDown: i(function (e) {
          if (e.preventDefault(), e.stopPropagation(), !this.disabled) {
            this.$refs.value.$el.contains(e.target) && (!this.isOpen || this.searchable || this._wasClickedOnValueItem ? this.isOpen || !this.openOnClick && !this.isFocused || this.openMenu() : this.closeMenu()), this._blurOnSelect ? this.blurInput() : this.focusInput(), this.resetFlags();
          }
        }), handleMouseDownOnClear: i(function (e) {
          e.stopPropagation(), e.preventDefault(), this.clear(), this.focusInput();
        }), handleMouseDownOnArrow: i(function (e) {
          e.preventDefault(), e.stopPropagation(), this.focusInput(), this.toggleMenu();
        }), handleClickOutside: function handleClickOutside(e) {
          this.$refs.wrapper && !this.$refs.wrapper.contains(e.target) && (this.blurInput(), this.closeMenu());
        }, handleSearch: function handleSearch() {
          var e = this;this.searchQuery ? (this.searching = !0, this.noSearchResults = !0, this.traverseAllNodes(function (t) {
            if (t.isBranch) {
              var n;t.expandsOnSearch = !1, t.hasMatchedChild = !1, e.searchingCount[t.id] = (n = {}, f(n, "ALL_CHILDREN", 0), f(n, "ALL_DESCENDANTS", 0), f(n, "LEAF_CHILDREN", 0), f(n, "LEAF_DESCENDANTS", 0), n);
            }
          }), this.traverseAllNodes(function (t) {
            var n = t.isMatched = g()(e.searchQuery.toLowerCase(), t.label.toLowerCase());n && (e.noSearchResults = !1, t.ancestors.forEach(function (t) {
              return e.searchingCount[t.id].ALL_DESCENDANTS++;
            }), t.isLeaf && t.ancestors.forEach(function (t) {
              return e.searchingCount[t.id].LEAF_DESCENDANTS++;
            }), null !== t.parentNode && (e.searchingCount[t.parentNode.id].ALL_CHILDREN += 1, t.isLeaf && (e.searchingCount[t.parentNode.id].LEAF_CHILDREN += 1))), (n || t.isBranch && t.expandsOnSearch) && null !== t.parentNode && (t.parentNode.expandsOnSearch = !0, t.parentNode.hasMatchedChild = !0);
          })) : this.searching = !1;
        }, closeMenu: function closeMenu() {
          this.isOpen && (this.isOpen = !1, this.retainScrollPosition && this.$refs.menu && (this.lastScrollPosition = this.$refs.menu.scrollTop), this.toggleClickOutsideEvent(!1), this.searchQuery = "", this.$emit("close", this.getValue(), this.id));
        }, openMenu: function openMenu() {
          this.disabled || this.isOpen || (this.isOpen = !0, this.$nextTick(this.adjustPosition), this.retainScrollPosition && this.$nextTick(this.restoreScrollPosition), this.rootOptionsLoaded || this.loadOptions(!0), this.toggleClickOutsideEvent(!0), this.$emit("open", this.id));
        }, toggleMenu: function toggleMenu() {
          this.isOpen ? this.closeMenu() : this.openMenu();
        }, toggleExpanded: function toggleExpanded(e) {
          this.checkIfBranchNode(e), this.searching ? e.expandsOnSearch = !e.expandsOnSearch : e.isExpanded = !e.isExpanded;
        }, initializeValue: function initializeValue() {
          this.multiple ? (this.internalValue = Array.isArray(this.value) ? this.value.slice() : [], this.sortValue()) : this.internalValue = null != this.value ? [this.value] : [];
        }, initializeRootOptions: function initializeRootOptions(e) {
          this.normalizedOptions = this.normalize(null, e);
        }, buildSelectedNodeMap: function buildSelectedNodeMap() {
          var e = this.selectedNodeMap = Object.create(null);this.internalValue.forEach(function (t) {
            e[t] = !0;
          });
        }, buildNodeCheckedStateMap: function buildNodeCheckedStateMap() {
          var e = this,
              t = this.nodeCheckedStateMap = Object.create(null);this.multiple && (this.selectedNodes.forEach(function (n) {
            t[n.id] = 2, e.flat || (e.traverseDescendants(n, function (e) {
              t[e.id] = 2;
            }), e.traverseAncestors(n, function (e) {
              t[e.id] = 1;
            }));
          }), this.normalizedOptions.forEach(function (n) {
            n.id in t || (t[n.id] = 0), e.traverseDescendants(n, function (e) {
              e.id in t || (t[e.id] = 0);
            });
          }));
        }, normalize: function normalize(e, t) {
          var n = this,
              i = t.map(function (t, i) {
            n.checkDuplication(t), n.verifyNodeShape(t);var s = null === e,
                o = t.id,
                r = t.label,
                a = t.children,
                l = t.isDisabled,
                c = void 0 !== l && l,
                u = Array.isArray(a) || null === a || void 0 === a && !!t.isBranch,
                d = !u,
                h = s ? 0 : e.level + 1,
                p = s ? [] : e.ancestors.concat(e),
                v = (s ? [] : e.index).concat(i),
                _ = n.nodeMap[o] = { id: o, label: r, level: h, ancestors: p, index: v, parentNode: e, isDisabled: c, isMatched: !1, isLeaf: d, isBranch: u, isRootNode: s, raw: t };if (u) {
              var m,
                  C = Array.isArray(a);C || S(function () {
                return "function" == typeof n.loadChildrenOptions;
              }, function () {
                return "Unloaded branch node detected. `loadChildrenOptions` prop is required to load its children.";
              }), _.isLoaded = C, _.isPending = !1, _.isExpanded = h < n.defaultExpandLevel, _.hasMatchedChild = !1, _.expandsOnSearch = !1, _.loadingChildrenError = "", _.count = (m = {}, f(m, "ALL_CHILDREN", 0), f(m, "ALL_DESCENDANTS", 0), f(m, "LEAF_CHILDREN", 0), f(m, "LEAF_DESCENDANTS", 0), m), _.children = C ? n.normalize(_, a) : [], _.isExpanded && !_.isLoaded && n.loadOptions(!1, _);
            }return _.ancestors.forEach(function (e) {
              return e.count.ALL_DESCENDANTS++;
            }), d && _.ancestors.forEach(function (e) {
              return e.count.LEAF_DESCENDANTS++;
            }), null !== e && (e.count.ALL_CHILDREN += 1, d && (e.count.LEAF_CHILDREN += 1)), _;
          });if (this.branchNodesFirst) {
            var s = i.filter(function (e) {
              return e.isBranch;
            }),
                o = i.filter(function (e) {
              return e.isLeaf;
            });i = s.concat(o);
          }return i;
        }, loadOptions: function loadOptions(e, t) {
          var n = this;if (e) {
            if (this.loadingRootOptions) return;var i = function i(e, t) {
              n.loadingRootOptions = !1, e ? n.loadingRootOptionsError = e.message || String(e) : t ? Array.isArray(t) ? (n.initialize(t), n.rootOptionsLoaded = !0) : n.loadingRootOptionsError = "received unrecognizable data" : n.loadingRootOptionsError = "no data received";
            };this.loadingRootOptions = !0, this.loadingRootOptionsError = "", this.loadRootOptions(i);
          } else {
            if (t.isPending) return;var s = t.raw,
                o = function o(e, i) {
              t.isPending = !1, e ? t.loadingChildrenError = n.loadChildrenErrorText(e) : Array.isArray(i) ? (t.children = n.normalize(t, i), t.isLoaded = !0, n.buildNodeCheckedStateMap()) : (t.loadingChildrenError = "Received unrecognizable data", S(function () {
                return !1;
              }, function () {
                return "Received unrecognizable data " + i + " while loading children options of node " + t.id;
              }));
            };t.isPending = !0, t.loadingChildrenError = "", this.loadChildrenOptions(s, o);
          }
        }, checkDuplication: function checkDuplication(e) {
          var t = this;S(function () {
            return !a(t.nodeMap, e.id);
          }, function () {
            return "Detected duplicate presence of node id " + JSON.stringify(e.id) + '. Their labels are "' + t.nodeMap[e.id].label + '" and "' + e.label + '" respectively.';
          });
        }, verifyNodeShape: function verifyNodeShape() {}, select: function select(e) {
          this.single && this.clear();var t = this.multiple && !this.flat ? 0 === this.nodeCheckedStateMap[e.id] : !this.isSelected(e);t ? this._selectNode(e) : this._deselectNode(e), this.buildSelectedNodeMap(), this.buildNodeCheckedStateMap(), this.searching && t && (this.single || this.clearOnSelect) && (this.searchQuery = ""), this.single && this.closeOnSelect && (this.closeMenu(), this.searchable && (this._blurOnSelect = !0));
        }, clear: function clear() {
          this.hasValue && (this.internalValue = [], this.buildSelectedNodeMap(), this.buildNodeCheckedStateMap());
        }, _selectNode: function _selectNode(e) {
          if (this.addValue(e), this.multiple && !this.flat && !e.isRootNode) {
            var t = e.parentNode,
                n = t.children;n.every(this.isSelected) && (n.forEach(this.removeValue), this._selectNode(t));
          }
        }, _deselectNode: function _deselectNode(e) {
          var t = this;if (this.removeValue(e), this.multiple && !this.flat && (this.selectedNodes.forEach(function (n) {
            -1 !== n.ancestors.indexOf(e) && t.removeValue(n);
          }), !e.isRootNode)) {
            var n = d(e.ancestors, this.isSelected);if (-1 !== n) {
              var i = e.ancestors[n],
                  s = e.ancestors.concat(e);this.removeValue(i), this.traverseDescendants(i, e.level, function (e) {
                -1 === s.indexOf(e) && t.addValue(e);
              });
            }
          }
        }, addValue: function addValue(e) {
          this.internalValue.push(e.id), this.selectedNodeMap[e.id] = !0, this.sortValue();
        }, removeValue: function removeValue(e) {
          h(this.internalValue, e.id), delete this.selectedNodeMap[e.id];
        }, maybeRemoveLastValue: function maybeRemoveLastValue() {
          if (this.hasValue) {
            var e = c(this.internalValue),
                t = this.getNode(e);this.removeValue(t), this.buildSelectedNodeMap(), this.buildNodeCheckedStateMap();
          }
        }, sortValue: function sortValue() {
          var e = this;"LEVEL" === this.sortValueBy ? this.internalValue.sort(function (t, n) {
            return _(e.nodeMap[t], e.nodeMap[n]);
          }) : "INDEX" === this.sortValueBy && this.internalValue.sort(function (t, n) {
            return v(e.nodeMap[t], e.nodeMap[n]);
          });
        }, restoreScrollPosition: function restoreScrollPosition() {
          this.$refs.menu && (this.$refs.menu.scrollTop = this.lastScrollPosition);
        }, adjustPosition: function adjustPosition() {
          if ("undefined" != typeof window) {
            var e = this.$el.getBoundingClientRect(),
                t = e.top,
                n = window.innerHeight - e.bottom;n > this.maxHeight || n > t || "below" === this.openDirection || "bottom" === this.openDirection ? (this.prefferedOpenDirection = "below", this.optimizedHeight = Math.min(n - 40, this.maxHeight)) : (this.prefferedOpenDirection = "above", this.optimizedHeight = Math.min(t - 40, this.maxHeight));
          }
        } }, created: function created() {
        this.verifyProps(), this.resetFlags(), this.initialize(this.options);
      }, mounted: function mounted() {
        this.autofocus && this.$refs.value.focusInput();
      }, destroyed: function destroyed() {
        this.toggleClickOutsideEvent(!1);
      } },
        D = { computed: { limitText: function limitText() {
          var e = this.instance.selectedNodesNumber - this.instance.limit;return this.instance.limitText(e);
        } }, methods: { focusInput: function focusInput() {
          this.$refs.input.focus();
        }, blurInput: function blurInput() {
          this.$refs.input.blur();
        }, handleMouseDownOnValue: i(function () {
          this.instance._wasClickedOnValueItem = !0;
        }) } },
        M = { name: "vue-treeselect--placeholder", inject: ["instance"] },
        A = function A() {
      var e = this,
          t = e.$createElement;return (e._self._c || t)("div", { staticClass: "vue-treeselect__placeholder vue-treeselect-helper-zoom-effect-off" }, [e._t("placeholder", [e._v(e._s(e.instance.placeholder))])], 2);
    },
        L = [],
        T = { render: A, staticRenderFns: L },
        V = T,
        R = n(0),
        k = R(M, V, !1, null, null, null),
        I = k.exports,
        $ = { BACKSPACE: 8, ESCAPE: 27, DELETE: 46 },
        B = { name: "vue-treeselect--input", inject: ["instance"], data: function data() {
        return { inputWidth: 5 };
      }, computed: { needsAutoSize: function needsAutoSize() {
          return this.instance.multiple;
        } }, updated: function updated() {
        this.needsAutoSize && this.updateInputWidth();
      }, methods: { focus: function focus() {
          this.instance.disabled || this.$refs.input && this.$refs.input.focus();
        }, blur: function blur() {
          this.$refs.input && this.$refs.input.blur();
        }, onFocus: function onFocus() {
          this.instance.isFocused = !0, !this.instance.isOpen && this.instance.openOnFocus && this.instance.openMenu();
        }, onBlur: function onBlur() {
          this.instance.isFocused = !1, this.instance.closeMenu();
        }, onInput: function onInput(e) {
          this.instance.searchQuery = e.target.value;
        }, onKeyDown: function onKeyDown(e) {
          if (!(e.ctrlKey || e.shiftKey || e.altKey || e.metaKey)) switch ("which" in e ? e.which : e.keyCode) {case $.BACKSPACE:
              this.instance.backspaceRemoves && !this.instance.searchQuery.length && this.instance.maybeRemoveLastValue();break;case $.DELETE:
              this.instance.deleteRemoves && !this.instance.searchQuery.length && this.instance.maybeRemoveLastValue();break;case $.ESCAPE:
              this.instance.searchQuery.length ? this.instance.searchQuery = "" : this.instance.isOpen ? this.instance.closeMenu() : this.instance.escapeClearsValue && this.instance.clear();break;default:
              this.instance.isOpen || this.instance.openMenu();}
        }, onMouseDown: function onMouseDown(e) {
          this.instance.searchQuery.length && e.stopPropagation();
        }, renderInputWrapper: function renderInputWrapper(e) {
          var t = { class: "vue-treeselect__input-wrapper" },
              n = [];return this.instance.searchable && !this.instance.disabled && (n.push(this.renderInput(e)), this.needsAutoSize && n.push(this.renderSizer(e))), this.instance.searchable || l(t, { on: { focus: this.onFocus, blur: this.onBlur, keydown: this.onKeyDown }, ref: "input" }), this.instance.searchable || this.instance.disabled || l(t, { attrs: { tabIndex: this.instance.tabIndex } }), e("div", t, n);
        }, renderInput: function renderInput(e) {
          return e("input", { class: "vue-treeselect__input", attrs: { type: "text", autocomplete: "off", tabIndex: this.instance.tabIndex }, domProps: { value: this.instance.searchQuery }, style: { width: this.needsAutoSize ? this.inputWidth + "px" : null }, on: { focus: this.onFocus, input: this.onInput, blur: this.onBlur, keydown: this.onKeyDown, mousedown: this.onMouseDown }, ref: "input" });
        }, renderSizer: function renderSizer(e) {
          return e("div", { class: "vue-treeselect__sizer", domProps: { textContent: this.instance.searchQuery }, ref: "sizer" });
        }, updateInputWidth: function updateInputWidth() {
          this.inputWidth = Math.max(5, this.$refs.sizer ? this.$refs.sizer.scrollWidth + 5 : 0);
        } }, render: function render(e) {
        return this.renderInputWrapper(e);
      } },
        j = n(0),
        F = j(B, null, !1, null, null, null),
        z = F.exports,
        P = { name: "vue-treeselect--multi-value", components: { Placeholder: I, SearchInput: z }, mixins: [D], inject: ["instance"] },
        H = function H() {
      var e = this,
          t = e.$createElement,
          n = e._self._c || t;return n("div", { staticClass: "vue-treeselect__value-wrapper" }, [n("transition-group", { staticClass: "vue-treeselect__multi-value", attrs: { tag: "div", name: "vue-treeselect__multi-value-item--zoom", appear: "" } }, [e._l(e.instance.visibleValue, function (t) {
        return [n("div", { key: "value-" + t.id, staticClass: "vue-treeselect__multi-value-item-wrapper", on: { mousedown: e.handleMouseDownOnValue } }, [n("div", { staticClass: "vue-treeselect__multi-value-item" }, [n("span", { staticClass: "vue-treeselect__multi-value-label" }, [e._v(e._s(t.label))]), n("span", { staticClass: "vue-treeselect__icon vue-treeselect__value-remove", on: { mousedown: function mousedown(n) {
              e.instance.select(t);
            } } }, [e._v("×")])])])];
      }), e._v(" "), e.instance.hasExceededLimit ? n("div", { key: "limit-tip", staticClass: "vue-treeselect__limit-tip vue-treeselect-helper-zoom-effect-off" }, [n("span", { staticClass: "vue-treeselect__limit-tip-text" }, [e._v(e._s(e.limitText))])]) : e._e(), e._v(" "), e.instance.hasValue || e.instance.searchQuery ? e._e() : n("placeholder", { key: "placeholer" }), e._v(" "), n("search-input", { key: "input", ref: "input" })], 2)], 1);
    },
        Q = [],
        K = { render: H, staticRenderFns: Q },
        W = K,
        U = n(0),
        q = U(P, W, !1, null, null, null),
        X = q.exports,
        J = { name: "vue-treeselect--single-value", components: { Placeholder: I, SearchInput: z }, mixins: [D], inject: ["instance"] },
        G = function G() {
      var e = this,
          t = e.$createElement,
          n = e._self._c || t;return n("div", { staticClass: "vue-treeselect__value-wrapper" }, [e.instance.hasValue && !e.instance.searchQuery ? n("div", { staticClass: "vue-treeselect__single-value" }, [e._v("\n    " + e._s(e.instance.selectedNodes[0].label) + "\n  ")]) : e.instance.searchQuery ? e._e() : n("placeholder"), e._v(" "), n("search-input", { key: "input", ref: "input" })], 1);
    },
        Y = [],
        Z = { render: G, staticRenderFns: Y },
        ee = Z,
        te = n(0),
        ne = te(J, ee, !1, null, null, null),
        ie = ne.exports,
        se = { props: { node: { type: Object, required: !0 } }, computed: { checkedState: function checkedState() {
          return this.instance.nodeCheckedStateMap[this.node.id];
        }, shouldExpand: function shouldExpand() {
          return !!this.node.isBranch && (this.instance.searching ? this.node.expandsOnSearch : this.node.isExpanded);
        } }, watch: { "node.isExpanded": function nodeIsExpanded(e) {
          !0 !== e || this.node.isLoaded || this.instance.loadOptions(!1, this.node);
        } }, methods: { handleMouseDownOnOption: i(function () {
          this.node.isBranch && this.instance.disableBranchNodes ? this.instance.toggleExpanded(this.node) : this.instance.select(this.node);
        }), handleMouseDownOnOptionArrow: i(function () {
          this.instance.toggleExpanded(this.node);
        }) } },
        oe = { name: "vue-treeselect--option", inject: ["instance", "UNCHECKED", "INDETERMINATE", "CHECKED"], mixins: [se] },
        re = function re() {
      var e = this,
          t = e.$createElement,
          n = e._self._c || t;return n("div", { staticClass: "vue-treeselect__list-item" }, [n("div", { class: ["vue-treeselect__option", { "vue-treeselect__option--disabled": e.node.disabled, "vue-treeselect__option--root": e.node.isRootNode, "vue-treeselect__option--child": !e.node.isRootNode, "vue-treeselect__option--selected": e.instance.isSelected(e.node), "vue-treeselect__option--matched": e.instance.searching && e.node.isMatched, "vue-treeselect__option--hide": e.instance.searching && !(e.node.isMatched || e.node.hasMatchedChild) }] }, [e.node.isLeaf ? n("div", { staticClass: "vue-treeselect__option-arrow-placeholder" }, [e._v(" ")]) : n("div", { staticClass: "vue-treeselect__option-arrow-wrapper", on: { mousedown: e.handleMouseDownOnOptionArrow } }, [n("transition", { attrs: { name: "vue-treeselect__option-arrow--prepare", appear: "" } }, [n("span", { class: ["vue-treeselect__option-arrow", { "vue-treeselect__option-arrow--rotated": e.shouldExpand }] })])], 1), e._v(" "), n("div", { staticClass: "vue-treeselect__label-wrapper", on: { mousedown: e.handleMouseDownOnOption } }, [e.instance.multiple && !e.instance.disableBranchNodes ? n("div", { staticClass: "vue-treeselect__checkbox-wrapper" }, [n("span", { class: ["vue-treeselect__checkbox", { "vue-treeselect__checkbox--checked": e.checkedState === e.CHECKED, "vue-treeselect__checkbox--indeterminate": e.checkedState === e.INDETERMINATE, "vue-treeselect__checkbox--unchecked": e.checkedState === e.UNCHECKED }] }, [n("span", { staticClass: "vue-treeselect__checkbox-mark" })])]) : e._e(), e._v(" "), n("label", { staticClass: "vue-treeselect__label" }, [e._v("\n        " + e._s(e.node.label) + "\n        "), e.node.isBranch ? n("span", { staticClass: "vue-treeselect__count" }, [!e.instance.searching && e.instance.showCount ? [e._v("(" + e._s(e.node.count[e.instance.showCountOf]) + ")")] : e.instance.searching && e.instance.showCountOnSearchComputed ? [e._v("(" + e._s(e.instance.searchingCount[e.node.id][e.instance.showCountOf]) + ")")] : e._e()], 2) : e._e()])])]), e._v(" "), e.shouldExpand ? n("div", { staticClass: "vue-treeselect__list" }, [e.node.isLoaded ? [e.node.children.length ? e._l(e.node.children, function (e) {
        return n("vue-treeselect--option", { key: e.id, attrs: { node: e } });
      }) : n("div", { staticClass: "vue-treeselect__no-children-tip" }, [e._m(0), e._v(" "), n("span", { staticClass: "vue-treeselect__no-children-tip-text" }, [e._v(e._s(e.instance.noChildrenText))])])] : e.node.isPending ? n("div", { staticClass: "vue-treeselect__loading-tip" }, [e._m(1), e._v(" "), n("span", { staticClass: "vue-treeselect__loading-tip-text" }, [e._v(e._s(e.instance.loadingText))])]) : e.node.loadingChildrenError ? n("div", { staticClass: "vue-treeselect__error-tip" }, [e._m(2), e._v(" "), n("span", { staticClass: "vue-treeselect__error-tip-text" }, [e._v("\n        " + e._s(e.node.loadingChildrenError) + "\n        "), n("a", { staticClass: "vue-treeselect__retry", attrs: { title: e.instance.retryTitle }, on: { click: function click(t) {
            e.instance.loadOptions(!1, e.node);
          } } }, [e._v("\n          " + e._s(e.instance.retryText) + "\n        ")])])]) : e._e()], 2) : e._e()]);
    },
        ae = [function () {
      var e = this,
          t = e.$createElement,
          n = e._self._c || t;return n("div", { staticClass: "vue-treeselect__icon-wrapper" }, [n("span", { staticClass: "vue-treeselect__icon-warning" })]);
    }, function () {
      var e = this,
          t = e.$createElement,
          n = e._self._c || t;return n("div", { staticClass: "vue-treeselect__icon-wrapper" }, [n("span", { staticClass: "vue-treeselect__icon-loader" })]);
    }, function () {
      var e = this,
          t = e.$createElement,
          n = e._self._c || t;return n("div", { staticClass: "vue-treeselect__icon-wrapper" }, [n("span", { staticClass: "vue-treeselect__icon-error" })]);
    }],
        le = { render: re, staticRenderFns: ae },
        ce = le,
        ue = n(0),
        de = ue(oe, ce, !1, null, null, null),
        he = de.exports,
        pe = { name: "vue-treeselect", components: { TreeselectOption: he }, mixins: [w], computed: { ValueComponent: function ValueComponent() {
          return this.multiple ? X : ie;
        } } },
        fe = function fe() {
      var e = this,
          t = e.$createElement,
          n = e._self._c || t;return n("div", { ref: "wrapper", class: ["vue-treeselect", { "vue-treeselect--single": !e.multiple, "vue-treeselect--multi": e.multiple, "vue-treeselect--searchable": e.searchable, "vue-treeselect--disabled": e.disabled, "vue-treeselect--focused": e.isFocused, "vue-treeselect--has-value": e.hasValue, "vue-treeselect--open": e.isOpen, "vue-treeselect--open-above": "above" === e.prefferedOpenDirection, "vue-treeselect--open-below": "below" === e.prefferedOpenDirection, "vue-treeselect--branch-nodes-disabled": e.disableBranchNodes }], on: { mousedown: e.handleMouseDown } }, [n("div", { staticClass: "vue-treeselect__control" }, [n(e.ValueComponent, { ref: "value", tag: "component" }), e._v(" "), e.shouldShowClearIcon ? n("div", { staticClass: "vue-treeselect__clear", attrs: { title: e.multiple ? e.clearAllText : e.clearValueText }, on: { mousedown: e.handleMouseDownOnClear } }, [e._v("×")]) : e._e(), e._v(" "), n("div", { staticClass: "vue-treeselect__arrow-wrapper", on: { mousedown: e.handleMouseDownOnArrow } }, [n("span", { class: ["vue-treeselect__arrow", { "vue-treeselect__arrow--rotated": e.isOpen }] })])], 1), e._v(" "), e.isOpen ? n("div", { ref: "menu", staticClass: "vue-treeselect__menu", style: { maxHeight: e.optimizedHeight + "px" } }, [e.rootOptionsLoaded ? [e.searching && e.noSearchResults ? n("div", { staticClass: "vue-treeselect__no-results-tip" }, [e._m(0), e._v(" "), n("span", { staticClass: "vue-treeselect__no-results-tip-text" }, [e._v(e._s(e.noResultsText))])]) : 0 === e.normalizedOptions.length ? n("div", { staticClass: "vue-treeselect__no-options-tip" }, [e._m(1), e._v(" "), n("span", { staticClass: "vue-treeselect__no-options-tip-text" }, [e._v(e._s(e.noOptionsText))])]) : n("div", { staticClass: "vue-treeselect__list" }, e._l(e.normalizedOptions, function (e) {
        return n("treeselect-option", { key: e.id, attrs: { node: e } });
      }))] : [e.loadingRootOptions ? n("div", { staticClass: "vue-treeselect__loading-tip" }, [e._m(2), e._v(" "), n("span", { staticClass: "vue-treeselect__loading-tip-text" }, [e._v(e._s(e.loadingText))])]) : e.loadingRootOptionsError ? n("div", { staticClass: "vue-treeselect__error-tip" }, [e._m(3), e._v(" "), n("span", { staticClass: "vue-treeselect__error-tip-text" }, [e._v("\n          Failed to load options: " + e._s(e.loadingRootOptionsError) + ".\n          "), n("a", { staticClass: "vue-treeselect__retry", attrs: { title: e.retryTitle }, on: { click: function click(t) {
            e.loadOptions(!0);
          } } }, [e._v("\n            " + e._s(e.retryText) + "\n          ")])])]) : e._e()]], 2) : e._e()]);
    },
        ve = [function () {
      var e = this,
          t = e.$createElement,
          n = e._self._c || t;return n("div", { staticClass: "vue-treeselect__icon-wrapper" }, [n("span", { staticClass: "vue-treeselect__icon-warning" })]);
    }, function () {
      var e = this,
          t = e.$createElement,
          n = e._self._c || t;return n("div", { staticClass: "vue-treeselect__icon-wrapper" }, [n("span", { staticClass: "vue-treeselect__icon-warning" })]);
    }, function () {
      var e = this,
          t = e.$createElement,
          n = e._self._c || t;return n("div", { staticClass: "vue-treeselect__icon-wrapper" }, [n("span", { staticClass: "vue-treeselect__icon-loader" })]);
    }, function () {
      var e = this,
          t = e.$createElement,
          n = e._self._c || t;return n("div", { staticClass: "vue-treeselect__icon-wrapper" }, [n("span", { staticClass: "vue-treeselect__icon-error" })]);
    }],
        _e = { render: fe, staticRenderFns: ve },
        me = _e,
        Ce = n(0),
        ye = y,
        be = Ce(pe, me, !1, ye, null, null),
        ge = be.exports;n.d(t, "Treeselect", function () {
      return ge;
    }), n.d(t, "treeselectMixin", function () {
      return w;
    }), n.d(t, "optionMixin", function () {
      return se;
    }), n.d(t, "valueMixin", function () {
      return D;
    });t.default = ge;
  }, function (e, t) {}, function (e, t, n) {
    "use strict";
    function i(e, t) {
      var n = t.length,
          i = e.length;if (i > n) return !1;if (i === n) return e === t;e: for (var s = 0, o = 0; s < i; s++) {
        for (var r = e.charCodeAt(s); o < n;) {
          if (t.charCodeAt(o++) === r) continue e;
        }return !1;
      }return !0;
    }e.exports = i;
  }, function (e, t, n) {
    function i(e, t, n) {
      function i(t) {
        var n = C,
            i = y;return C = y = void 0, x = t, g = e.apply(i, n);
      }function u(e) {
        return x = e, E = setTimeout(p, t), S ? i(e) : g;
      }function d(e) {
        var n = e - O,
            i = e - x,
            s = t - n;return N ? c(s, b - i) : s;
      }function h(e) {
        var n = e - O,
            i = e - x;return void 0 === O || n >= t || n < 0 || N && i >= b;
      }function p() {
        var e = o();if (h(e)) return f(e);E = setTimeout(p, d(e));
      }function f(e) {
        return E = void 0, w && C ? i(e) : (C = y = void 0, g);
      }function v() {
        void 0 !== E && clearTimeout(E), x = 0, C = O = y = E = void 0;
      }function _() {
        return void 0 === E ? g : f(o());
      }function m() {
        var e = o(),
            n = h(e);if (C = arguments, y = this, O = e, n) {
          if (void 0 === E) return u(O);if (N) return E = setTimeout(p, t), i(O);
        }return void 0 === E && (E = setTimeout(p, t)), g;
      }var C,
          y,
          b,
          g,
          E,
          O,
          x = 0,
          S = !1,
          N = !1,
          w = !0;if ("function" != typeof e) throw new TypeError(a);return t = r(t) || 0, s(n) && (S = !!n.leading, N = "maxWait" in n, b = N ? l(r(n.maxWait) || 0, t) : b, w = "trailing" in n ? !!n.trailing : w), m.cancel = v, m.flush = _, m;
    }var s = n(1),
        o = n(8),
        r = n(11),
        a = "Expected a function",
        l = Math.max,
        c = Math.min;e.exports = i;
  }, function (e, t, n) {
    var i = n(2),
        s = function s() {
      return i.Date.now();
    };e.exports = s;
  }, function (e, t, n) {
    (function (t) {
      var n = "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t && t.Object === Object && t;e.exports = n;
    }).call(t, n(10));
  }, function (e, t) {
    var n;n = function () {
      return this;
    }();try {
      n = n || Function("return this")() || (0, eval)("this");
    } catch (e) {
      "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && (n = window);
    }e.exports = n;
  }, function (e, t, n) {
    function i(e) {
      if ("number" == typeof e) return e;if (o(e)) return r;if (s(e)) {
        var t = "function" == typeof e.valueOf ? e.valueOf() : e;e = s(t) ? t + "" : t;
      }if ("string" != typeof e) return 0 === e ? e : +e;e = e.replace(a, "");var n = c.test(e);return n || u.test(e) ? d(e.slice(2), n ? 2 : 8) : l.test(e) ? r : +e;
    }var s = n(1),
        o = n(12),
        r = NaN,
        a = /^\s+|\s+$/g,
        l = /^[-+]0x[0-9a-f]+$/i,
        c = /^0b[01]+$/i,
        u = /^0o[0-7]+$/i,
        d = parseInt;e.exports = i;
  }, function (e, t, n) {
    function i(e) {
      return "symbol" == (typeof e === "undefined" ? "undefined" : _typeof(e)) || o(e) && s(e) == r;
    }var s = n(13),
        o = n(16),
        r = "[object Symbol]";e.exports = i;
  }, function (e, t, n) {
    function i(e) {
      return null == e ? void 0 === e ? l : a : c && c in Object(e) ? o(e) : r(e);
    }var s = n(3),
        o = n(14),
        r = n(15),
        a = "[object Null]",
        l = "[object Undefined]",
        c = s ? s.toStringTag : void 0;e.exports = i;
  }, function (e, t, n) {
    function i(e) {
      var t = r.call(e, l),
          n = e[l];try {
        e[l] = void 0;var i = !0;
      } catch (e) {}var s = a.call(e);return i && (t ? e[l] = n : delete e[l]), s;
    }var s = n(3),
        o = Object.prototype,
        r = o.hasOwnProperty,
        a = o.toString,
        l = s ? s.toStringTag : void 0;e.exports = i;
  }, function (e, t) {
    function n(e) {
      return s.call(e);
    }var i = Object.prototype,
        s = i.toString;e.exports = n;
  }, function (e, t) {
    function n(e) {
      return null != e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e));
    }e.exports = n;
  }]);
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?{\"cacheDirectory\":true,\"presets\":[[\"env\",{\"modules\":false,\"targets\":{\"browsers\":[\"> 2%\"],\"uglify\":true}}],[\"env\",{\"targets\":{\"browsers\":[\"last 2 versions\",\"> 5% in BE\"],\"uglify\":true},\"modules\":false}]],\"plugins\":[\"transform-object-rest-spread\",\"transform-object-rest-spread\",\"syntax-dynamic-import\",\"transform-inline-environment-variables\"]}!./node_modules/vue-loader/lib/selector.js?type=script&index=0&bustCache!./resources/assets/js/components/Materials.vue":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__riophae_vue_treeselect__ = __webpack_require__("./node_modules/@riophae/vue-treeselect/dist/vue-treeselect.min.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__riophae_vue_treeselect___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__riophae_vue_treeselect__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Rows_MaterialRow__ = __webpack_require__("./resources/assets/js/components/Rows/MaterialRow.vue");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Rows_MaterialRow___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__Rows_MaterialRow__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//




/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            rows: false
        };
    },

    methods: {},
    computed: {},
    created: function created() {
        var _this = this;

        axios.get(this.$store.state.apiBase + '/material/categories').then(function (response) {
            _this.$store.commit('UPDATE_CATEGORY_LIST', response.data.data);
        }).catch(function (error) {
            console.log(error);
        });
        axios.get(this.$store.state.apiBase + '/material').then(function (response) {
            _this.rows = response.data.data;
        }).catch(function (error) {
            console.log(error);
        });
    },

    components: {
        MaterialRow: __WEBPACK_IMPORTED_MODULE_1__Rows_MaterialRow___default.a
    }
});

/***/ }),

/***/ "./node_modules/css-loader/index.js?sourceMap!./node_modules/vue-loader/lib/style-compiler/index.js?{\"vue\":true,\"id\":\"data-v-5ef104c5\",\"scoped\":false,\"hasInlineConfig\":true}!./node_modules/vue-loader/lib/selector.js?type=styles&index=0&bustCache!./resources/assets/js/components/Materials.vue":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(true);
// imports


// module
exports.push([module.i, "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "", {"version":3,"sources":[],"names":[],"mappings":"","file":"Materials.vue","sourceRoot":""}]);

// exports


/***/ }),

/***/ "./node_modules/vue-loader/lib/template-compiler/index.js?{\"id\":\"data-v-5ef104c5\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0&bustCache!./resources/assets/js/components/Materials.vue":
/***/ (function(module, exports, __webpack_require__) {

var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "wrapper tracker-table material-trackers" },
    [
      _vm._m(0, false, false),
      _vm._v(" "),
      _vm._l(_vm.rows, function(row, index) {
        return _c("material-row", { key: index, attrs: { row: row } })
      })
    ],
    2
  )
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("table", { staticClass: " heading-table" }, [
      _c("thead", { staticClass: "thead-light" }, [
        _c("tr", [
          _c("th", { staticClass: "col1" }, [_vm._v("#")]),
          _vm._v(" "),
          _c("th", { staticClass: "col2" }, [_vm._v("Tên")]),
          _vm._v(" "),
          _c("th", { staticClass: "col3" }, [_vm._v("Đơn vị")]),
          _vm._v(" "),
          _c("th", { staticClass: "col4" }, [_vm._v("Loại tiền")]),
          _vm._v(" "),
          _c("th", { staticClass: "col5" }, [_vm._v("Giá hiện tại")]),
          _vm._v(" "),
          _c("th", { staticClass: "col6" }, [_vm._v("Hãng")])
        ])
      ])
    ])
  }
]
render._withStripped = true
module.exports = { render: render, staticRenderFns: staticRenderFns }
if (false) {
  module.hot.accept()
  if (module.hot.data) {
    require("vue-hot-reload-api")      .rerender("data-v-5ef104c5", module.exports)
  }
}

/***/ }),

/***/ "./node_modules/vue-style-loader/index.js!./node_modules/css-loader/index.js?sourceMap!./node_modules/vue-loader/lib/style-compiler/index.js?{\"vue\":true,\"id\":\"data-v-5ef104c5\",\"scoped\":false,\"hasInlineConfig\":true}!./node_modules/vue-loader/lib/selector.js?type=styles&index=0&bustCache!./resources/assets/js/components/Materials.vue":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?sourceMap!./node_modules/vue-loader/lib/style-compiler/index.js?{\"vue\":true,\"id\":\"data-v-5ef104c5\",\"scoped\":false,\"hasInlineConfig\":true}!./node_modules/vue-loader/lib/selector.js?type=styles&index=0&bustCache!./resources/assets/js/components/Materials.vue");
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add the styles to the DOM
var update = __webpack_require__("./node_modules/vue-style-loader/lib/addStylesClient.js")("3107338f", content, false);
// Hot Module Replacement
if(false) {
 // When the styles change, update the <style> tags
 if(!content.locals) {
   module.hot.accept("!!../../../../node_modules/css-loader/index.js?sourceMap!../../../../node_modules/vue-loader/lib/style-compiler/index.js?{\"vue\":true,\"id\":\"data-v-5ef104c5\",\"scoped\":false,\"hasInlineConfig\":true}!../../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0&bustCache!./Materials.vue", function() {
     var newContent = require("!!../../../../node_modules/css-loader/index.js?sourceMap!../../../../node_modules/vue-loader/lib/style-compiler/index.js?{\"vue\":true,\"id\":\"data-v-5ef104c5\",\"scoped\":false,\"hasInlineConfig\":true}!../../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0&bustCache!./Materials.vue");
     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
     update(newContent);
   });
 }
 // When the module is disposed, remove the <style> tags
 module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./resources/assets/js/components/Materials.vue":
/***/ (function(module, exports, __webpack_require__) {

var disposed = false
function injectStyle (ssrContext) {
  if (disposed) return
  __webpack_require__("./node_modules/vue-style-loader/index.js!./node_modules/css-loader/index.js?sourceMap!./node_modules/vue-loader/lib/style-compiler/index.js?{\"vue\":true,\"id\":\"data-v-5ef104c5\",\"scoped\":false,\"hasInlineConfig\":true}!./node_modules/vue-loader/lib/selector.js?type=styles&index=0&bustCache!./resources/assets/js/components/Materials.vue")
}
var normalizeComponent = __webpack_require__("./node_modules/vue-loader/lib/component-normalizer.js")
/* script */
var __vue_script__ = __webpack_require__("./node_modules/babel-loader/lib/index.js?{\"cacheDirectory\":true,\"presets\":[[\"env\",{\"modules\":false,\"targets\":{\"browsers\":[\"> 2%\"],\"uglify\":true}}],[\"env\",{\"targets\":{\"browsers\":[\"last 2 versions\",\"> 5% in BE\"],\"uglify\":true},\"modules\":false}]],\"plugins\":[\"transform-object-rest-spread\",\"transform-object-rest-spread\",\"syntax-dynamic-import\",\"transform-inline-environment-variables\"]}!./node_modules/vue-loader/lib/selector.js?type=script&index=0&bustCache!./resources/assets/js/components/Materials.vue")
/* template */
var __vue_template__ = __webpack_require__("./node_modules/vue-loader/lib/template-compiler/index.js?{\"id\":\"data-v-5ef104c5\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0&bustCache!./resources/assets/js/components/Materials.vue")
/* template functional */
var __vue_template_functional__ = false
/* styles */
var __vue_styles__ = injectStyle
/* scopeId */
var __vue_scopeId__ = null
/* moduleIdentifier (server only) */
var __vue_module_identifier__ = null
var Component = normalizeComponent(
  __vue_script__,
  __vue_template__,
  __vue_template_functional__,
  __vue_styles__,
  __vue_scopeId__,
  __vue_module_identifier__
)
Component.options.__file = "resources\\assets\\js\\components\\Materials.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {  return key !== "default" && key.substr(0, 2) !== "__"})) {  console.error("named exports are not supported in *.vue files.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-5ef104c5", Component.options)
  } else {
    hotAPI.reload("data-v-5ef104c5", Component.options)
' + '  }
  module.hot.dispose(function (data) {
    disposed = true
  })
})()}

module.exports = Component.exports


/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHJpb3BoYWUvdnVlLXRyZWVzZWxlY3QvZGlzdC92dWUtdHJlZXNlbGVjdC5taW4uanMiLCJ3ZWJwYWNrOi8vL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9NYXRlcmlhbHMudnVlIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9NYXRlcmlhbHMudnVlPzQ4NTUiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL01hdGVyaWFscy52dWU/NDI2MCIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvTWF0ZXJpYWxzLnZ1ZT81NTVkIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9NYXRlcmlhbHMudnVlIl0sIm5hbWVzIjpbImUiLCJ0IiwiZXhwb3J0cyIsIm1vZHVsZSIsIlZ1ZVRyZWVzZWxlY3QiLCJpIiwibiIsInMiLCJsIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInIiLCJhIiwib3B0aW9ucyIsInJlbmRlciIsInN0YXRpY1JlbmRlckZucyIsIl9jb21waWxlZCIsImZ1bmN0aW9uYWwiLCJfc2NvcGVJZCIsInUiLCIkdm5vZGUiLCJzc3JDb250ZXh0IiwicGFyZW50IiwiX19WVUVfU1NSX0NPTlRFWFRfXyIsIl9yZWdpc3RlcmVkQ29tcG9uZW50cyIsImFkZCIsIl9zc3JSZWdpc3RlciIsImgiLCJiZWZvcmVDcmVhdGUiLCJfaW5qZWN0U3R5bGVzIiwiY29uY2F0IiwiZXNNb2R1bGUiLCJzZWxmIiwiRnVuY3Rpb24iLCJTeW1ib2wiLCJ0eXBlIiwiYnV0dG9uIiwieCIsImdldFByb3RvdHlwZU9mIiwia2V5cyIsImxlbmd0aCIsIk4iLCJTIiwiQXJyYXkiLCJpc0FycmF5IiwiZmluZEluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImYiLCJ2YWx1ZSIsIndyaXRhYmxlIiwidiIsImxldmVsIiwiaW5kZXgiLCJfIiwiQyIsIm1lc3NhZ2UiLCJTdHJpbmciLCJ5IiwiYiIsImciLCJFIiwiTyIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJ3IiwicHJvdmlkZSIsImluc3RhbmNlIiwiVU5DSEVDS0VEIiwiSU5ERVRFUk1JTkFURSIsIkNIRUNLRUQiLCJVTk1BVENIRUQiLCJERVNDRU5EQU5UX01BVENIRUQiLCJNQVRDSEVEIiwicHJvcHMiLCJhdXRvZm9jdXMiLCJCb29sZWFuIiwiYmFja3NwYWNlUmVtb3ZlcyIsImJyYW5jaE5vZGVzRmlyc3QiLCJjbGVhcmFibGUiLCJjbGVhckFsbFRleHQiLCJjbGVhck9uU2VsZWN0IiwiY2xlYXJWYWx1ZVRleHQiLCJjbG9zZU9uU2VsZWN0IiwiZGVsZXRlUmVtb3ZlcyIsImRpc2FibGVCcmFuY2hOb2RlcyIsImRpc2FibGVkIiwiZGVmYXVsdEV4cGFuZExldmVsIiwiTnVtYmVyIiwiZXNjYXBlQ2xlYXJzVmFsdWUiLCJmbGF0IiwiaWQiLCJsaW1pdCIsImxpbWl0VGV4dCIsImxvYWRDaGlsZHJlbkVycm9yVGV4dCIsImxvYWRDaGlsZHJlbk9wdGlvbnMiLCJsb2FkaW5nVGV4dCIsImxvYWRSb290T3B0aW9ucyIsIm1heEhlaWdodCIsIm11bHRpcGxlIiwibm9DaGlsZHJlblRleHQiLCJub1Jlc3VsdHNUZXh0Iiwibm9PcHRpb25zVGV4dCIsIm9wZW5EaXJlY3Rpb24iLCJvcGVuT25DbGljayIsIm9wZW5PbkZvY3VzIiwicGxhY2Vob2xkZXIiLCJyZXRhaW5TY3JvbGxQb3NpdGlvbiIsInJldHJ5VGV4dCIsInJldHJ5VGl0bGUiLCJzZWFyY2hhYmxlIiwic2hvd0NvdW50Iiwic2hvd0NvdW50T2YiLCJ2YWxpZGF0b3IiLCJzaG93Q291bnRPblNlYXJjaCIsInNvcnRWYWx1ZUJ5Iiwic3ViSXRlbXNMaW1pdCIsInRhYkluZGV4IiwiZGF0YSIsImludGVybmFsVmFsdWUiLCJpc0ZvY3VzZWQiLCJpc09wZW4iLCJub2RlQ2hlY2tlZFN0YXRlTWFwIiwiY3JlYXRlIiwibm9kZU1hcCIsIm5vcm1hbGl6ZWRPcHRpb25zIiwibm9TZWFyY2hSZXN1bHRzIiwib3B0aW1pemVkSGVpZ2h0IiwicHJlZmZlcmVkT3BlbkRpcmVjdGlvbiIsInJvb3RPcHRpb25zTG9hZGVkIiwibG9hZGluZ1Jvb3RPcHRpb25zIiwibG9hZGluZ1Jvb3RPcHRpb25zRXJyb3IiLCJzZWFyY2hpbmdDb3VudCIsInNlYXJjaGluZyIsInNlYXJjaFF1ZXJ5Iiwic2VsZWN0ZWROb2RlTWFwIiwibGFzdFNjcm9sbFBvc2l0aW9uIiwiY29tcHV0ZWQiLCJzZWxlY3RlZE5vZGVzTnVtYmVyIiwiaGFzVmFsdWUiLCJzZWxlY3RlZE5vZGVzIiwibWFwIiwiZ2V0Tm9kZSIsInNpbmdsZSIsInZpc2libGVWYWx1ZSIsInNsaWNlIiwiaGFzRXhjZWVkZWRMaW1pdCIsInNob3VsZFNob3dDbGVhckljb24iLCJzaG93Q291bnRPblNlYXJjaENvbXB1dGVkIiwid2F0Y2giLCJjbG9zZU1lbnUiLCJidWlsZE5vZGVDaGVja2VkU3RhdGVNYXAiLCJoYW5kbGVTZWFyY2giLCIkZW1pdCIsInNvcnRWYWx1ZSIsImdldFZhbHVlIiwiYnVpbGRTZWxlY3RlZE5vZGVNYXAiLCJtZXRob2RzIiwidmVyaWZ5UHJvcHMiLCJyZXNldEZsYWdzIiwiX2JsdXJPblNlbGVjdCIsIl93YXNDbGlja2VkT25WYWx1ZUl0ZW0iLCJpbml0aWFsaXplIiwiaW5pdGlhbGl6ZVJvb3RPcHRpb25zIiwiaW5pdGlhbGl6ZVZhbHVlIiwibGFiZWwiLCJhbmNlc3RvcnMiLCJwYXJlbnROb2RlIiwiaXNVbmtub3duTm9kZSIsImlzTGVhZiIsImlzQnJhbmNoIiwiaXNTZWxlY3RlZCIsImNoZWNrSWZCcmFuY2hOb2RlIiwidHJhdmVyc2VEZXNjZW5kYW50cyIsImNoaWxkcmVuIiwiZm9yRWFjaCIsInRyYXZlcnNlQW5jZXN0b3JzIiwidHJhdmVyc2VBbGxOb2RlcyIsInRvZ2dsZUNsaWNrT3V0c2lkZUV2ZW50IiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlQ2xpY2tPdXRzaWRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImZvY3VzSW5wdXQiLCIkcmVmcyIsImJsdXJJbnB1dCIsImhhbmRsZU1vdXNlRG93biIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiJGVsIiwiY29udGFpbnMiLCJ0YXJnZXQiLCJvcGVuTWVudSIsImhhbmRsZU1vdXNlRG93bk9uQ2xlYXIiLCJjbGVhciIsImhhbmRsZU1vdXNlRG93bk9uQXJyb3ciLCJ0b2dnbGVNZW51Iiwid3JhcHBlciIsImV4cGFuZHNPblNlYXJjaCIsImhhc01hdGNoZWRDaGlsZCIsImlzTWF0Y2hlZCIsInRvTG93ZXJDYXNlIiwiQUxMX0RFU0NFTkRBTlRTIiwiTEVBRl9ERVNDRU5EQU5UUyIsIkFMTF9DSElMRFJFTiIsIkxFQUZfQ0hJTERSRU4iLCJtZW51Iiwic2Nyb2xsVG9wIiwiJG5leHRUaWNrIiwiYWRqdXN0UG9zaXRpb24iLCJyZXN0b3JlU2Nyb2xsUG9zaXRpb24iLCJsb2FkT3B0aW9ucyIsInRvZ2dsZUV4cGFuZGVkIiwiaXNFeHBhbmRlZCIsIm5vcm1hbGl6ZSIsImNoZWNrRHVwbGljYXRpb24iLCJ2ZXJpZnlOb2RlU2hhcGUiLCJpc0Rpc2FibGVkIiwiaXNSb290Tm9kZSIsInJhdyIsImlzTG9hZGVkIiwiaXNQZW5kaW5nIiwibG9hZGluZ0NoaWxkcmVuRXJyb3IiLCJjb3VudCIsImZpbHRlciIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZWxlY3QiLCJfc2VsZWN0Tm9kZSIsIl9kZXNlbGVjdE5vZGUiLCJhZGRWYWx1ZSIsImV2ZXJ5IiwicmVtb3ZlVmFsdWUiLCJwdXNoIiwibWF5YmVSZW1vdmVMYXN0VmFsdWUiLCJzb3J0Iiwid2luZG93IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwiaW5uZXJIZWlnaHQiLCJib3R0b20iLCJNYXRoIiwibWluIiwiY3JlYXRlZCIsIm1vdW50ZWQiLCJkZXN0cm95ZWQiLCJEIiwiaW5wdXQiLCJmb2N1cyIsImJsdXIiLCJoYW5kbGVNb3VzZURvd25PblZhbHVlIiwiTSIsIm5hbWUiLCJpbmplY3QiLCJBIiwiJGNyZWF0ZUVsZW1lbnQiLCJfc2VsZiIsIl9jIiwic3RhdGljQ2xhc3MiLCJfdCIsIl92IiwiX3MiLCJMIiwiVCIsIlYiLCJSIiwiayIsIkkiLCIkIiwiQkFDS1NQQUNFIiwiRVNDQVBFIiwiREVMRVRFIiwiQiIsImlucHV0V2lkdGgiLCJuZWVkc0F1dG9TaXplIiwidXBkYXRlZCIsInVwZGF0ZUlucHV0V2lkdGgiLCJvbkZvY3VzIiwib25CbHVyIiwib25JbnB1dCIsIm9uS2V5RG93biIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJ3aGljaCIsImtleUNvZGUiLCJvbk1vdXNlRG93biIsInJlbmRlcklucHV0V3JhcHBlciIsImNsYXNzIiwicmVuZGVySW5wdXQiLCJyZW5kZXJTaXplciIsIm9uIiwia2V5ZG93biIsInJlZiIsImF0dHJzIiwiYXV0b2NvbXBsZXRlIiwiZG9tUHJvcHMiLCJzdHlsZSIsIndpZHRoIiwibW91c2Vkb3duIiwidGV4dENvbnRlbnQiLCJtYXgiLCJzaXplciIsInNjcm9sbFdpZHRoIiwiaiIsIkYiLCJ6IiwiUCIsImNvbXBvbmVudHMiLCJQbGFjZWhvbGRlciIsIlNlYXJjaElucHV0IiwibWl4aW5zIiwiSCIsInRhZyIsImFwcGVhciIsIl9sIiwia2V5IiwiX2UiLCJRIiwiSyIsIlciLCJVIiwicSIsIlgiLCJKIiwiRyIsIlkiLCJaIiwiZWUiLCJ0ZSIsIm5lIiwiaWUiLCJzZSIsIm5vZGUiLCJyZXF1aXJlZCIsImNoZWNrZWRTdGF0ZSIsInNob3VsZEV4cGFuZCIsImhhbmRsZU1vdXNlRG93bk9uT3B0aW9uIiwiaGFuZGxlTW91c2VEb3duT25PcHRpb25BcnJvdyIsIm9lIiwicmUiLCJfbSIsInRpdGxlIiwiY2xpY2siLCJhZSIsImxlIiwiY2UiLCJ1ZSIsImRlIiwiaGUiLCJwZSIsIlRyZWVzZWxlY3RPcHRpb24iLCJWYWx1ZUNvbXBvbmVudCIsImZlIiwidmUiLCJtZSIsIkNlIiwieWUiLCJiZSIsImdlIiwiY2hhckNvZGVBdCIsImFwcGx5Iiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImFyZ3VtZW50cyIsIlR5cGVFcnJvciIsImxlYWRpbmciLCJtYXhXYWl0IiwidHJhaWxpbmciLCJjYW5jZWwiLCJmbHVzaCIsIkRhdGUiLCJub3ciLCJldmFsIiwidmFsdWVPZiIsInJlcGxhY2UiLCJ0ZXN0IiwiTmFOIiwicGFyc2VJbnQiLCJ0b1N0cmluZ1RhZyIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7O0FBS0EsQ0FBRSxVQUFTQSxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLDhDQUFpQkMsT0FBakIsTUFBMEIsNENBQWlCQyxNQUFqQixFQUExQixHQUFrREEsT0FBT0QsT0FBUCxHQUFlRCxHQUFqRSxHQUFxRSxRQUFzQyxpQ0FBTyxFQUFQLG9DQUFVQSxDQUFWO0FBQUE7QUFBQTtBQUFBLG9HQUF0QyxHQUFtRCxvQkFBaUJDLE9BQWpCLHlDQUFpQkEsT0FBakIsS0FBeUJBLFFBQVFFLGFBQVIsR0FBc0JILEdBQS9DLEdBQW1ERCxFQUFFSSxhQUFGLEdBQWdCSCxHQUEzTDtBQUErTCxDQUE5TSxDQUFnTixJQUFoTixFQUFzTixZQUFVO0FBQUMsU0FBUSxVQUFTRCxDQUFULEVBQVc7QUFBQyxhQUFTQyxDQUFULENBQVdJLENBQVgsRUFBYTtBQUFDLFVBQUdDLEVBQUVELENBQUYsQ0FBSCxFQUFRLE9BQU9DLEVBQUVELENBQUYsRUFBS0gsT0FBWixDQUFvQixJQUFJSyxJQUFFRCxFQUFFRCxDQUFGLElBQUssRUFBQ0EsR0FBRUEsQ0FBSCxFQUFLRyxHQUFFLENBQUMsQ0FBUixFQUFVTixTQUFRLEVBQWxCLEVBQVgsQ0FBaUMsT0FBT0YsRUFBRUssQ0FBRixFQUFLSSxJQUFMLENBQVVGLEVBQUVMLE9BQVosRUFBb0JLLENBQXBCLEVBQXNCQSxFQUFFTCxPQUF4QixFQUFnQ0QsQ0FBaEMsR0FBbUNNLEVBQUVDLENBQUYsR0FBSSxDQUFDLENBQXhDLEVBQTBDRCxFQUFFTCxPQUFuRDtBQUEyRCxTQUFJSSxJQUFFLEVBQU4sQ0FBUyxPQUFPTCxFQUFFUyxDQUFGLEdBQUlWLENBQUosRUFBTUMsRUFBRVUsQ0FBRixHQUFJTCxDQUFWLEVBQVlMLEVBQUVXLENBQUYsR0FBSSxVQUFTWixDQUFULEVBQVdNLENBQVgsRUFBYUQsQ0FBYixFQUFlO0FBQUNKLFFBQUVZLENBQUYsQ0FBSWIsQ0FBSixFQUFNTSxDQUFOLEtBQVVRLE9BQU9DLGNBQVAsQ0FBc0JmLENBQXRCLEVBQXdCTSxDQUF4QixFQUEwQixFQUFDVSxjQUFhLENBQUMsQ0FBZixFQUFpQkMsWUFBVyxDQUFDLENBQTdCLEVBQStCQyxLQUFJYixDQUFuQyxFQUExQixDQUFWO0FBQTJFLEtBQTNHLEVBQTRHSixFQUFFSyxDQUFGLEdBQUksVUFBU04sQ0FBVCxFQUFXO0FBQUMsVUFBSU0sSUFBRU4sS0FBR0EsRUFBRW1CLFVBQUwsR0FBZ0IsWUFBVTtBQUFDLGVBQU9uQixFQUFFb0IsT0FBVDtBQUFpQixPQUE1QyxHQUE2QyxZQUFVO0FBQUMsZUFBT3BCLENBQVA7QUFBUyxPQUF2RSxDQUF3RSxPQUFPQyxFQUFFVyxDQUFGLENBQUlOLENBQUosRUFBTSxHQUFOLEVBQVVBLENBQVYsR0FBYUEsQ0FBcEI7QUFBc0IsS0FBMU4sRUFBMk5MLEVBQUVZLENBQUYsR0FBSSxVQUFTYixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLGFBQU9hLE9BQU9PLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDYixJQUFoQyxDQUFxQ1QsQ0FBckMsRUFBdUNDLENBQXZDLENBQVA7QUFBaUQsS0FBOVIsRUFBK1JBLEVBQUVzQixDQUFGLEdBQUksR0FBblMsRUFBdVN0QixFQUFFQSxFQUFFTSxDQUFGLEdBQUksQ0FBTixDQUE5UztBQUF1VCxHQUFuZCxDQUFxZCxDQUFFLFVBQVNQLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYUssQ0FBYixFQUFlRCxDQUFmLEVBQWlCRSxDQUFqQixFQUFtQk0sQ0FBbkIsRUFBcUI7QUFBQyxVQUFJVyxDQUFKO0FBQUEsVUFBTUMsSUFBRXpCLElBQUVBLEtBQUcsRUFBYjtBQUFBLFVBQWdCUSxZQUFTUixFQUFFb0IsT0FBWCxDQUFoQixDQUFtQyxhQUFXWixDQUFYLElBQWMsZUFBYUEsQ0FBM0IsS0FBK0JnQixJQUFFeEIsQ0FBRixFQUFJeUIsSUFBRXpCLEVBQUVvQixPQUF2QyxFQUFnRCxJQUFJVCxJQUFFLGNBQVksT0FBT2MsQ0FBbkIsR0FBcUJBLEVBQUVDLE9BQXZCLEdBQStCRCxDQUFyQyxDQUF1Q3hCLE1BQUlVLEVBQUVnQixNQUFGLEdBQVMxQixFQUFFMEIsTUFBWCxFQUFrQmhCLEVBQUVpQixlQUFGLEdBQWtCM0IsRUFBRTJCLGVBQXRDLEVBQXNEakIsRUFBRWtCLFNBQUYsR0FBWSxDQUFDLENBQXZFLEdBQTBFdkIsTUFBSUssRUFBRW1CLFVBQUYsR0FBYSxDQUFDLENBQWxCLENBQTFFLEVBQStGdkIsTUFBSUksRUFBRW9CLFFBQUYsR0FBV3hCLENBQWYsQ0FBL0YsQ0FBaUgsSUFBSXlCLENBQUosQ0FBTSxJQUFHbkIsS0FBR21CLElBQUUsV0FBU2hDLENBQVQsRUFBVztBQUFDQSxZQUFFQSxLQUFHLEtBQUtpQyxNQUFMLElBQWEsS0FBS0EsTUFBTCxDQUFZQyxVQUE1QixJQUF3QyxLQUFLQyxNQUFMLElBQWEsS0FBS0EsTUFBTCxDQUFZRixNQUF6QixJQUFpQyxLQUFLRSxNQUFMLENBQVlGLE1BQVosQ0FBbUJDLFVBQTlGLEVBQXlHbEMsS0FBRyxlQUFhLE9BQU9vQyxtQkFBdkIsS0FBNkNwQyxJQUFFb0MsbUJBQS9DLENBQXpHLEVBQTZLL0IsS0FBR0EsRUFBRUksSUFBRixDQUFPLElBQVAsRUFBWVQsQ0FBWixDQUFoTCxFQUErTEEsS0FBR0EsRUFBRXFDLHFCQUFMLElBQTRCckMsRUFBRXFDLHFCQUFGLENBQXdCQyxHQUF4QixDQUE0QnpCLENBQTVCLENBQTNOO0FBQTBQLE9BQXhRLEVBQXlRRixFQUFFNEIsWUFBRixHQUFlUCxDQUEzUixJQUE4UjNCLE1BQUkyQixJQUFFM0IsQ0FBTixDQUE5UixFQUF1UzJCLENBQTFTLEVBQTRTO0FBQUMsWUFBSXBCLElBQUVELEVBQUVtQixVQUFSO0FBQUEsWUFBbUJVLElBQUU1QixJQUFFRCxFQUFFZ0IsTUFBSixHQUFXaEIsRUFBRThCLFlBQWxDLENBQStDN0IsS0FBR0QsRUFBRStCLGFBQUYsR0FBZ0JWLENBQWhCLEVBQWtCckIsRUFBRWdCLE1BQUYsR0FBUyxVQUFTM0IsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxpQkFBTytCLEVBQUV2QixJQUFGLENBQU9SLENBQVAsR0FBVXVDLEVBQUV4QyxDQUFGLEVBQUlDLENBQUosQ0FBakI7QUFBd0IsU0FBcEUsSUFBc0VVLEVBQUU4QixZQUFGLEdBQWVELElBQUUsR0FBR0csTUFBSCxDQUFVSCxDQUFWLEVBQVlSLENBQVosQ0FBRixHQUFpQixDQUFDQSxDQUFELENBQXRHO0FBQTBHLGNBQU0sRUFBQ1ksVUFBU3BCLENBQVYsRUFBWXRCLFNBQVF1QixDQUFwQixFQUFzQkMsU0FBUWYsQ0FBOUIsRUFBTjtBQUF1QyxLQUE5dkI7QUFBK3ZCLEdBQS93QixFQUFreEIsVUFBU1gsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxhQUFTSyxDQUFULENBQVdOLENBQVgsRUFBYTtBQUFDLFVBQUlDLFdBQVNELENBQVQseUNBQVNBLENBQVQsQ0FBSixDQUFlLE9BQU8sUUFBTUEsQ0FBTixLQUFVLFlBQVVDLENBQVYsSUFBYSxjQUFZQSxDQUFuQyxDQUFQO0FBQTZDLE9BQUVDLE9BQUYsR0FBVUksQ0FBVjtBQUFZLEdBQXQzQixFQUF5M0IsVUFBU04sQ0FBVCxFQUFXQyxDQUFYLEVBQWFLLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixDQUFOO0FBQUEsUUFBV0MsSUFBRSxvQkFBaUJzQyxJQUFqQix5Q0FBaUJBLElBQWpCLE1BQXVCQSxJQUF2QixJQUE2QkEsS0FBSy9CLE1BQUwsS0FBY0EsTUFBM0MsSUFBbUQrQixJQUFoRTtBQUFBLFFBQXFFaEMsSUFBRVIsS0FBR0UsQ0FBSCxJQUFNdUMsU0FBUyxhQUFULEdBQTdFLENBQXVHOUMsRUFBRUUsT0FBRixHQUFVVyxDQUFWO0FBQVksR0FBNS9CLEVBQSsvQixVQUFTYixDQUFULEVBQVdDLENBQVgsRUFBYUssQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxDQUFGLENBQU47QUFBQSxRQUFXQyxJQUFFRixFQUFFMEMsTUFBZixDQUFzQi9DLEVBQUVFLE9BQUYsR0FBVUssQ0FBVjtBQUFZLEdBQWpqQyxFQUFvakMsVUFBU1AsQ0FBVCxFQUFXQyxDQUFYLEVBQWFLLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXTCxDQUFYLEVBQWE7QUFBQyxhQUFPLFVBQVNDLENBQVQsRUFBVztBQUFDLHdCQUFjQSxFQUFFK0MsSUFBaEIsSUFBc0IsTUFBSS9DLEVBQUVnRCxNQUE1QixJQUFvQ2pELEVBQUVTLElBQUYsQ0FBTyxJQUFQLEVBQVlSLENBQVosQ0FBcEM7QUFBbUQsT0FBdEU7QUFBdUUsY0FBU00sQ0FBVCxHQUFZLENBQUUsVUFBU00sQ0FBVCxDQUFXYixDQUFYLEVBQWE7QUFBQyxhQUFPLFFBQU1BLENBQU4sSUFBUyxjQUFZLEtBQUssQ0FBTCxLQUFTQSxDQUFULEdBQVcsV0FBWCxHQUF1QmtELEVBQUVsRCxDQUFGLENBQW5DLENBQVQsSUFBbURjLE9BQU9xQyxjQUFQLENBQXNCbkQsQ0FBdEIsTUFBMkJjLE9BQU9PLFNBQTVGO0FBQXNHLGNBQVNHLENBQVQsQ0FBV3hCLENBQVgsRUFBYUMsQ0FBYixFQUFlSyxDQUFmLEVBQWlCO0FBQUNPLFFBQUVQLENBQUYsS0FBTU4sRUFBRUMsQ0FBRixNQUFPRCxFQUFFQyxDQUFGLElBQUssRUFBWixHQUFnQk8sRUFBRVIsRUFBRUMsQ0FBRixDQUFGLEVBQU9LLENBQVAsQ0FBdEIsSUFBaUNOLEVBQUVDLENBQUYsSUFBS0ssQ0FBdEM7QUFBd0MsY0FBU21CLENBQVQsQ0FBV3pCLENBQVgsRUFBYUMsQ0FBYixFQUFlO0FBQUMsYUFBT2EsT0FBT08sU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NiLElBQWhDLENBQXFDVCxDQUFyQyxFQUF1Q0MsQ0FBdkMsQ0FBUDtBQUFpRCxjQUFTTyxDQUFULENBQVdSLENBQVgsRUFBYUMsQ0FBYixFQUFlO0FBQUMsVUFBRyxRQUFNQSxDQUFULEVBQVcsQ0FBWCxLQUFpQixJQUFHWSxFQUFFWixDQUFGLENBQUgsRUFBUSxLQUFJLElBQUlLLElBQUVRLE9BQU9zQyxJQUFQLENBQVluRCxDQUFaLENBQU4sRUFBcUJJLElBQUUsQ0FBdkIsRUFBeUJFLElBQUVELEVBQUUrQyxNQUFqQyxFQUF3Q2hELElBQUVFLENBQTFDLEVBQTRDRixHQUE1QztBQUFnRG1CLFVBQUV4QixDQUFGLEVBQUlNLEVBQUVELENBQUYsQ0FBSixFQUFTSixFQUFFSyxFQUFFRCxDQUFGLENBQUYsQ0FBVDtBQUFoRCxPQUFSLE1BQStFaUQsSUFBSSxPQUFPdEQsQ0FBUDtBQUFTLGNBQVNXLENBQVQsQ0FBV1gsQ0FBWCxFQUFhO0FBQUMsYUFBT3VELEVBQUcsWUFBVTtBQUFDLGVBQU9DLE1BQU1DLE9BQU4sQ0FBY3pELENBQWQsQ0FBUDtBQUF3QixPQUF0QyxFQUF5QyxZQUFVO0FBQUMsZUFBTSxpQkFBTjtBQUF3QixPQUE1RSxHQUErRUEsRUFBRUEsRUFBRXFELE1BQUYsR0FBUyxDQUFYLENBQXRGO0FBQW9HLGNBQVNyQixDQUFULENBQVdoQyxDQUFYLEVBQWFDLENBQWIsRUFBZUssQ0FBZixFQUFpQjtBQUFDLFdBQUksSUFBSUQsSUFBRSxDQUFOLEVBQVFFLElBQUVQLEVBQUVxRCxNQUFoQixFQUF1QmhELElBQUVFLENBQXpCLEVBQTJCRixHQUEzQjtBQUErQixZQUFHSixFQUFFUSxJQUFGLENBQU9ILENBQVAsRUFBU04sRUFBRUssQ0FBRixDQUFULEVBQWNBLENBQWQsRUFBZ0JMLENBQWhCLENBQUgsRUFBc0IsT0FBT0ssQ0FBUDtBQUFyRCxPQUE4RCxPQUFNLENBQUMsQ0FBUDtBQUFTLGNBQVNPLENBQVQsQ0FBV1osQ0FBWCxFQUFhQyxDQUFiLEVBQWVLLENBQWYsRUFBaUI7QUFBQyxhQUFNLGNBQVksT0FBT2tELE1BQU1uQyxTQUFOLENBQWdCcUMsU0FBbkMsR0FBNkMxRCxFQUFFMEQsU0FBRixDQUFZekQsQ0FBWixFQUFjSyxDQUFkLENBQTdDLEdBQThEMEIsRUFBRWhDLENBQUYsRUFBSUMsQ0FBSixFQUFNSyxDQUFOLENBQXBFO0FBQTZFLGNBQVNrQyxDQUFULENBQVd4QyxDQUFYLEVBQWFDLENBQWIsRUFBZTtBQUFDLFVBQUlLLElBQUVOLEVBQUUyRCxPQUFGLENBQVUxRCxDQUFWLENBQU4sQ0FBbUIsQ0FBQyxDQUFELEtBQUtLLENBQUwsSUFBUU4sRUFBRTRELE1BQUYsQ0FBU3RELENBQVQsRUFBVyxDQUFYLENBQVI7QUFBc0IsY0FBU2lCLENBQVQsQ0FBV3ZCLENBQVgsRUFBYUMsQ0FBYixFQUFlO0FBQUMsVUFBR0QsRUFBRXFELE1BQUYsS0FBV3BELEVBQUVvRCxNQUFoQixFQUF1QixPQUFNLENBQUMsQ0FBUCxDQUFTLEtBQUksSUFBSS9DLElBQUUsQ0FBVixFQUFZQSxJQUFFTixFQUFFcUQsTUFBaEIsRUFBdUIvQyxHQUF2QjtBQUEyQixZQUFHTixFQUFFTSxDQUFGLE1BQU9MLEVBQUVLLENBQUYsQ0FBVixFQUFlLE9BQU0sQ0FBQyxDQUFQO0FBQTFDLE9BQW1ELE9BQU0sQ0FBQyxDQUFQO0FBQVMsY0FBU3VELENBQVQsQ0FBVzdELENBQVgsRUFBYUMsQ0FBYixFQUFlSyxDQUFmLEVBQWlCO0FBQUMsYUFBT0wsS0FBS0QsQ0FBTCxHQUFPYyxPQUFPQyxjQUFQLENBQXNCZixDQUF0QixFQUF3QkMsQ0FBeEIsRUFBMEIsRUFBQzZELE9BQU14RCxDQUFQLEVBQVNXLFlBQVcsQ0FBQyxDQUFyQixFQUF1QkQsY0FBYSxDQUFDLENBQXJDLEVBQXVDK0MsVUFBUyxDQUFDLENBQWpELEVBQTFCLENBQVAsR0FBc0YvRCxFQUFFQyxDQUFGLElBQUtLLENBQTNGLEVBQTZGTixDQUFwRztBQUFzRyxjQUFTZ0UsQ0FBVCxDQUFXaEUsQ0FBWCxFQUFhQyxDQUFiLEVBQWU7QUFBQyxXQUFJLElBQUlLLElBQUUsQ0FBVixJQUFjO0FBQUMsWUFBR04sRUFBRWlFLEtBQUYsR0FBUTNELENBQVgsRUFBYSxPQUFNLENBQUMsQ0FBUCxDQUFTLElBQUdMLEVBQUVnRSxLQUFGLEdBQVEzRCxDQUFYLEVBQWEsT0FBTyxDQUFQLENBQVMsSUFBR04sRUFBRWtFLEtBQUYsQ0FBUTVELENBQVIsTUFBYUwsRUFBRWlFLEtBQUYsQ0FBUTVELENBQVIsQ0FBaEIsRUFBMkIsT0FBT04sRUFBRWtFLEtBQUYsQ0FBUTVELENBQVIsSUFBV0wsRUFBRWlFLEtBQUYsQ0FBUTVELENBQVIsQ0FBbEIsQ0FBNkJBO0FBQUk7QUFBQyxjQUFTNkQsQ0FBVCxDQUFXbkUsQ0FBWCxFQUFhQyxDQUFiLEVBQWU7QUFBQyxhQUFPRCxFQUFFaUUsS0FBRixLQUFVaEUsRUFBRWdFLEtBQVosR0FBa0JqRSxFQUFFaUUsS0FBRixHQUFRaEUsRUFBRWdFLEtBQTVCLEdBQWtDRCxFQUFFaEUsQ0FBRixFQUFJQyxDQUFKLENBQXpDO0FBQWdELGNBQVNTLENBQVQsQ0FBV1YsQ0FBWCxFQUFhO0FBQUMsYUFBTSxTQUFPQSxDQUFQLEdBQVMsT0FBZjtBQUF1QixjQUFTb0UsQ0FBVCxDQUFXcEUsQ0FBWCxFQUFhO0FBQUMsYUFBTSx1Q0FBcUNBLEVBQUVxRSxPQUFGLElBQVdDLE9BQU90RSxDQUFQLENBQWhELElBQTJELEdBQWpFO0FBQXFFLGNBQVN1RSxDQUFULENBQVd2RSxDQUFYLEVBQWE7QUFBQ00sUUFBRSxDQUFGO0FBQUssWUFBT1MsY0FBUCxDQUFzQmQsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQzZELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUlVLElBQUVsRSxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdtRSxJQUFFbkUsRUFBRUEsQ0FBRixDQUFJa0UsQ0FBSixDQUFiO0FBQUEsUUFBb0JFLElBQUVwRSxFQUFFLENBQUYsQ0FBdEI7QUFBQSxRQUEyQnFFLElBQUVyRSxFQUFFQSxDQUFGLENBQUlvRSxDQUFKLENBQTdCO0FBQUEsUUFBb0N4QixJQUFFLGNBQVksT0FBT0gsTUFBbkIsSUFBMkIsb0JBQWlCQSxPQUFPNkIsUUFBeEIsQ0FBM0IsR0FBNEQsVUFBUzVFLENBQVQsRUFBVztBQUFDLG9CQUFjQSxDQUFkLHlDQUFjQSxDQUFkO0FBQWdCLEtBQXhGLEdBQXlGLFVBQVNBLENBQVQsRUFBVztBQUFDLGFBQU9BLEtBQUcsY0FBWSxPQUFPK0MsTUFBdEIsSUFBOEIvQyxFQUFFNkUsV0FBRixLQUFnQjlCLE1BQTlDLElBQXNEL0MsTUFBSStDLE9BQU8xQixTQUFqRSxHQUEyRSxRQUEzRSxVQUEyRnJCLENBQTNGLHlDQUEyRkEsQ0FBM0YsQ0FBUDtBQUFvRyxLQUEvTztBQUFBLFFBQWdQdUQsSUFBRWhELENBQWxQO0FBQUEsUUFBb1ArQyxJQUFFL0MsQ0FBdFA7QUFBQSxRQUF3UHVFLElBQUUsRUFBQ0MsU0FBUSxtQkFBVTtBQUFDLGVBQU0sRUFBQ0MsVUFBUyxJQUFWLEVBQWVDLFdBQVUsQ0FBekIsRUFBMkJDLGVBQWMsQ0FBekMsRUFBMkNDLFNBQVEsQ0FBbkQsRUFBcURDLFdBQVUsQ0FBL0QsRUFBaUVDLG9CQUFtQixDQUFwRixFQUFzRkMsU0FBUSxDQUE5RixFQUFOO0FBQXVHLE9BQTNILEVBQTRIQyxPQUFNLEVBQUNDLFdBQVUsRUFBQ3hDLE1BQUt5QyxPQUFOLEVBQWNyRSxTQUFRLENBQUMsQ0FBdkIsRUFBWCxFQUFxQ3NFLGtCQUFpQixFQUFDMUMsTUFBS3lDLE9BQU4sRUFBY3JFLFNBQVEsQ0FBQyxDQUF2QixFQUF0RCxFQUFnRnVFLGtCQUFpQixFQUFDM0MsTUFBS3lDLE9BQU4sRUFBY3JFLFNBQVEsQ0FBQyxDQUF2QixFQUFqRyxFQUEySHdFLFdBQVUsRUFBQzVDLE1BQUt5QyxPQUFOLEVBQWNyRSxTQUFRLENBQUMsQ0FBdkIsRUFBckksRUFBK0p5RSxjQUFhLEVBQUM3QyxNQUFLc0IsTUFBTixFQUFhbEQsU0FBUSxXQUFyQixFQUE1SyxFQUE4TTBFLGVBQWMsRUFBQzlDLE1BQUt5QyxPQUFOLEVBQWNyRSxTQUFRLENBQUMsQ0FBdkIsRUFBNU4sRUFBc1AyRSxnQkFBZSxFQUFDL0MsTUFBS3NCLE1BQU4sRUFBYWxELFNBQVEsYUFBckIsRUFBclEsRUFBeVM0RSxlQUFjLEVBQUNoRCxNQUFLeUMsT0FBTixFQUFjckUsU0FBUSxDQUFDLENBQXZCLEVBQXZULEVBQWlWNkUsZUFBYyxFQUFDakQsTUFBS3lDLE9BQU4sRUFBY3JFLFNBQVEsQ0FBQyxDQUF2QixFQUEvVixFQUF5WDhFLG9CQUFtQixFQUFDbEQsTUFBS3lDLE9BQU4sRUFBY3JFLFNBQVEsQ0FBQyxDQUF2QixFQUE1WSxFQUFzYStFLFVBQVMsRUFBQ25ELE1BQUt5QyxPQUFOLEVBQWNyRSxTQUFRLENBQUMsQ0FBdkIsRUFBL2EsRUFBeWNnRixvQkFBbUIsRUFBQ3BELE1BQUtxRCxNQUFOLEVBQWFqRixTQUFRLENBQXJCLEVBQTVkLEVBQW9ma0YsbUJBQWtCLEVBQUN0RCxNQUFLeUMsT0FBTixFQUFjckUsU0FBUSxDQUFDLENBQXZCLEVBQXRnQixFQUFnaUJtRixNQUFLLEVBQUN2RCxNQUFLeUMsT0FBTixFQUFjckUsU0FBUSxDQUFDLENBQXZCLEVBQXJpQixFQUErakJvRixJQUFHLEVBQUNwRixTQUFRLElBQVQsRUFBbGtCLEVBQWlsQnFGLE9BQU0sRUFBQ3pELE1BQUtxRCxNQUFOLEVBQWFqRixTQUFRLElBQUUsQ0FBdkIsRUFBdmxCLEVBQWluQnNGLFdBQVUsRUFBQzFELE1BQUtGLFFBQU4sRUFBZTFCLFNBQVFWLENBQXZCLEVBQTNuQixFQUFxcEJpRyx1QkFBc0IsRUFBQzNELE1BQUtGLFFBQU4sRUFBZTFCLFNBQVFnRCxDQUF2QixFQUEzcUIsRUFBcXNCd0MscUJBQW9CLEVBQUM1RCxNQUFLRixRQUFOLEVBQXp0QixFQUF5dUIrRCxhQUFZLEVBQUM3RCxNQUFLc0IsTUFBTixFQUFhbEQsU0FBUSxZQUFyQixFQUFydkIsRUFBd3hCMEYsaUJBQWdCLEVBQUM5RCxNQUFLRixRQUFOLEVBQXh5QixFQUF3ekJpRSxXQUFVLEVBQUMvRCxNQUFLcUQsTUFBTixFQUFhakYsU0FBUSxHQUFyQixFQUFsMEIsRUFBNDFCNEYsVUFBUyxFQUFDaEUsTUFBS3lDLE9BQU4sRUFBY3JFLFNBQVEsQ0FBQyxDQUF2QixFQUFyMkIsRUFBKzNCNkYsZ0JBQWUsRUFBQ2pFLE1BQUtzQixNQUFOLEVBQWFsRCxTQUFRLHdCQUFyQixFQUE5NEIsRUFBNjdCOEYsZUFBYyxFQUFDbEUsTUFBS3NCLE1BQU4sRUFBYWxELFNBQVEscUJBQXJCLEVBQTM4QixFQUF1L0IrRixlQUFjLEVBQUNuRSxNQUFLc0IsTUFBTixFQUFhbEQsU0FBUSx1QkFBckIsRUFBcmdDLEVBQW1qQ2dHLGVBQWMsRUFBQ3BFLE1BQUtzQixNQUFOLEVBQWFsRCxTQUFRLE1BQXJCLEVBQWprQyxFQUE4bENpRyxhQUFZLEVBQUNyRSxNQUFLeUMsT0FBTixFQUFjckUsU0FBUSxDQUFDLENBQXZCLEVBQTFtQyxFQUFvb0NrRyxhQUFZLEVBQUN0RSxNQUFLeUMsT0FBTixFQUFjckUsU0FBUSxDQUFDLENBQXZCLEVBQWhwQyxFQUEwcUNNLFNBQVEsRUFBQ3NCLE1BQUtRLEtBQU4sRUFBbHJDLEVBQStyQytELGFBQVksRUFBQ3ZFLE1BQUtzQixNQUFOLEVBQWFsRCxTQUFRLFdBQXJCLEVBQTNzQyxFQUE2dUNvRyxzQkFBcUIsRUFBQ3hFLE1BQUt5QyxPQUFOLEVBQWNyRSxTQUFRLENBQUMsQ0FBdkIsRUFBbHdDLEVBQTR4Q3FHLFdBQVUsRUFBQ3pFLE1BQUtzQixNQUFOLEVBQWFsRCxTQUFRLFFBQXJCLEVBQXR5QyxFQUFxMENzRyxZQUFXLEVBQUMxRSxNQUFLc0IsTUFBTixFQUFhbEQsU0FBUSxnQkFBckIsRUFBaDFDLEVBQXUzQ3VHLFlBQVcsRUFBQzNFLE1BQUt5QyxPQUFOLEVBQWNyRSxTQUFRLENBQUMsQ0FBdkIsRUFBbDRDLEVBQTQ1Q3dHLFdBQVUsRUFBQzVFLE1BQUt5QyxPQUFOLEVBQWNyRSxTQUFRLENBQUMsQ0FBdkIsRUFBdDZDLEVBQWc4Q3lHLGFBQVksRUFBQzdFLE1BQUtzQixNQUFOLEVBQWFsRCxTQUFRLGNBQXJCLEVBQW9DMEcsV0FBVSxtQkFBUzlILENBQVQsRUFBVztBQUFDLG1CQUFNLENBQUMsQ0FBRCxLQUFLLENBQUMsY0FBRCxFQUFnQixpQkFBaEIsRUFBa0MsZUFBbEMsRUFBa0Qsa0JBQWxELEVBQXNFMkQsT0FBdEUsQ0FBOEUzRCxDQUE5RSxDQUFYO0FBQTRGLFdBQXRKLEVBQTU4QyxFQUFvbUQrSCxtQkFBa0IsSUFBdG5ELEVBQTJuREMsYUFBWSxFQUFDaEYsTUFBS3NCLE1BQU4sRUFBYWxELFNBQVEsZ0JBQXJCLEVBQXZvRCxFQUE4cUQ2RyxlQUFjLEVBQUNqRixNQUFLcUQsTUFBTixFQUFhakYsU0FBUSxJQUFFLENBQXZCLEVBQTVyRCxFQUFzdEQ4RyxVQUFTLEVBQUNsRixNQUFLcUQsTUFBTixFQUFhakYsU0FBUSxDQUFyQixFQUEvdEQsRUFBdXZEMEMsT0FBTSxJQUE3dkQsRUFBbEksRUFBcTREcUUsTUFBSyxnQkFBVTtBQUFDLGVBQU0sRUFBQ0MsZUFBYyxFQUFmLEVBQWtCQyxXQUFVLENBQUMsQ0FBN0IsRUFBK0JDLFFBQU8sQ0FBQyxDQUF2QyxFQUF5Q0MscUJBQW9CekgsT0FBTzBILE1BQVAsQ0FBYyxJQUFkLENBQTdELEVBQWlGQyxTQUFRM0gsT0FBTzBILE1BQVAsQ0FBYyxJQUFkLENBQXpGLEVBQTZHRSxtQkFBa0IsSUFBL0gsRUFBb0lDLGlCQUFnQixDQUFDLENBQXJKLEVBQXVKQyxpQkFBZ0IsQ0FBdkssRUFBeUtDLHdCQUF1QixPQUFoTSxFQUF3TUMsbUJBQWtCLENBQUMsQ0FBM04sRUFBNk5DLG9CQUFtQixDQUFDLENBQWpQLEVBQW1QQyx5QkFBd0IsRUFBM1EsRUFBOFFDLGdCQUFlbkksT0FBTzBILE1BQVAsQ0FBYyxJQUFkLENBQTdSLEVBQWlUVSxXQUFVLENBQUMsQ0FBNVQsRUFBOFRDLGFBQVksRUFBMVUsRUFBNlVDLGlCQUFnQnRJLE9BQU8wSCxNQUFQLENBQWMsSUFBZCxDQUE3VixFQUFpWGEsb0JBQW1CLENBQXBZLEVBQU47QUFBNlksT0FBbHlFLEVBQW15RUMsVUFBUyxFQUFDQyxxQkFBb0IsK0JBQVU7QUFBQyxpQkFBTyxLQUFLbkIsYUFBTCxDQUFtQi9FLE1BQTFCO0FBQWlDLFNBQWpFLEVBQWtFbUcsVUFBUyxvQkFBVTtBQUFDLGlCQUFPLEtBQUtELG1CQUFMLEdBQXlCLENBQWhDO0FBQWtDLFNBQXhILEVBQXlIRSxlQUFjLHlCQUFVO0FBQUMsaUJBQU8sS0FBS3JCLGFBQUwsQ0FBbUJzQixHQUFuQixDQUF1QixLQUFLQyxPQUE1QixDQUFQO0FBQTRDLFNBQTlMLEVBQStMQyxRQUFPLGtCQUFVO0FBQUMsaUJBQU0sQ0FBQyxLQUFLNUMsUUFBWjtBQUFxQixTQUF0TyxFQUF1TzZDLGNBQWEsd0JBQVU7QUFBQyxpQkFBTyxLQUFLSixhQUFMLENBQW1CSyxLQUFuQixDQUF5QixDQUF6QixFQUEyQixLQUFLckQsS0FBaEMsQ0FBUDtBQUE4QyxTQUE3UyxFQUE4U3NELGtCQUFpQiw0QkFBVTtBQUFDLGlCQUFPLEtBQUtSLG1CQUFMLEdBQXlCLEtBQUs5QyxLQUFyQztBQUEyQyxTQUFyWCxFQUFzWHVELHFCQUFvQiwrQkFBVTtBQUFDLGlCQUFPLEtBQUtwRSxTQUFMLElBQWdCLENBQUMsS0FBS08sUUFBdEIsSUFBZ0MsS0FBS3FELFFBQTVDO0FBQXFELFNBQTFjLEVBQTJjUywyQkFBMEIscUNBQVU7QUFBQyxpQkFBTSxhQUFXLE9BQU8sS0FBS2xDLGlCQUF2QixHQUF5QyxLQUFLQSxpQkFBOUMsR0FBZ0UsS0FBS0gsU0FBM0U7QUFBcUYsU0FBcmtCLEVBQTV5RSxFQUFtM0ZzQyxPQUFNLEVBQUMvRCxVQUFTLGtCQUFTbkcsQ0FBVCxFQUFXO0FBQUNBLGVBQUcsS0FBS3NJLE1BQVIsSUFBZ0IsS0FBSzZCLFNBQUwsRUFBaEI7QUFBaUMsU0FBdkQsRUFBd0RuRCxVQUFTLGtCQUFTaEgsQ0FBVCxFQUFXO0FBQUNBLGVBQUcsS0FBS29LLHdCQUFMLEVBQUg7QUFBbUMsU0FBaEgsRUFBaUhqQixhQUFZeEUsSUFBSyxZQUFVO0FBQUMsZUFBSzBGLFlBQUwsSUFBb0IsS0FBS0MsS0FBTCxDQUFXLGVBQVgsRUFBMkIsS0FBS25CLFdBQWhDLEVBQTRDLEtBQUszQyxFQUFqRCxDQUFwQjtBQUF5RSxTQUF6RixFQUEyRixHQUEzRixDQUE3SCxFQUE2TndCLGFBQVksdUJBQVU7QUFBQyxlQUFLdUMsU0FBTDtBQUFpQixTQUFyUSxFQUFzUW5DLGVBQWMseUJBQVU7QUFBQyxlQUFLa0MsS0FBTCxDQUFXLE9BQVgsRUFBbUIsS0FBS0UsUUFBTCxFQUFuQixFQUFtQyxLQUFLaEUsRUFBeEM7QUFBNEMsU0FBM1UsRUFBNFUxQyxPQUFNLGVBQVM5RCxDQUFULEVBQVc7QUFBQyxjQUFJQyxJQUFFRCxLQUFHLE1BQUlBLENBQVAsR0FBUyxLQUFLZ0gsUUFBTCxHQUFjaEgsRUFBRThKLEtBQUYsRUFBZCxHQUF3QixDQUFDOUosQ0FBRCxDQUFqQyxHQUFxQyxFQUEzQyxDQUE4QyxDQUFDdUIsRUFBRXRCLENBQUYsRUFBSSxLQUFLbUksYUFBVCxDQUFELEtBQTJCLEtBQUtBLGFBQUwsR0FBbUJuSSxDQUFuQixFQUFxQixLQUFLd0ssb0JBQUwsRUFBckIsRUFBaUQsS0FBS0wsd0JBQUwsRUFBNUU7QUFBNkcsU0FBemYsRUFBejNGLEVBQW8zR00sU0FBUSxFQUFDQyxhQUFZLHVCQUFVO0FBQUMsY0FBSTNLLElBQUUsSUFBTixDQUFXLEtBQUs4RyxlQUFMLEtBQXVCLEtBQUtwRixPQUFMLEdBQWE4QixNQUFNQyxPQUFOLENBQWMsS0FBSy9CLE9BQW5CLEtBQTZCNkIsRUFBRyxZQUFVO0FBQUMsbUJBQU0sQ0FBQyxDQUFQO0FBQVMsV0FBdkIsRUFBMEIsWUFBVTtBQUFDLG1CQUFNLDBEQUF3RHZELEVBQUUwQixPQUExRCxHQUFrRSxHQUF4RTtBQUE0RSxXQUFqSCxDQUExQyxHQUE4SjZCLEVBQUcsWUFBVTtBQUFDLG1CQUFNLENBQUMsQ0FBUDtBQUFTLFdBQXZCLEVBQTBCLFlBQVU7QUFBQyxtQkFBTSwwQ0FBTjtBQUFpRCxXQUF0RixDQUFyTDtBQUErUSxTQUFsVCxFQUFtVHFILFlBQVcsc0JBQVU7QUFBQyxlQUFLQyxhQUFMLEdBQW1CLENBQUMsQ0FBcEIsRUFBc0IsS0FBS0Msc0JBQUwsR0FBNEIsQ0FBQyxDQUFuRDtBQUFxRCxTQUE5WCxFQUErWEMsWUFBVyxvQkFBUy9LLENBQVQsRUFBVztBQUFDd0QsZ0JBQU1DLE9BQU4sQ0FBY3pELENBQWQsTUFBbUIsS0FBSzhJLGlCQUFMLEdBQXVCLENBQUMsQ0FBM0MsR0FBOEMsS0FBS2tDLHFCQUFMLENBQTJCaEwsS0FBRyxFQUE5QixDQUE5QyxFQUFnRixLQUFLaUwsZUFBTCxFQUFoRixFQUF1RyxLQUFLUixvQkFBTCxFQUF2RyxFQUFtSSxLQUFLTCx3QkFBTCxFQUFuSTtBQUFtSyxTQUF6akIsRUFBMGpCSSxVQUFTLG9CQUFVO0FBQUMsaUJBQU8sS0FBS3hELFFBQUwsR0FBYyxLQUFLb0IsYUFBTCxDQUFtQjBCLEtBQW5CLEVBQWQsR0FBeUMsS0FBSzFCLGFBQUwsQ0FBbUIsQ0FBbkIsQ0FBaEQ7QUFBc0UsU0FBcHBCLEVBQXFwQnVCLFNBQVEsaUJBQVMzSixDQUFULEVBQVc7QUFBQyxpQkFBT3VELEVBQUcsWUFBVTtBQUFDLG1CQUFPLFFBQU12RCxDQUFiO0FBQWUsV0FBN0IsRUFBZ0MsWUFBVTtBQUFDLG1CQUFNLHNCQUFvQkEsQ0FBMUI7QUFBNEIsV0FBdkUsR0FBMEUsS0FBS3lJLE9BQUwsQ0FBYXpJLENBQWIsS0FBaUIsRUFBQ3dHLElBQUd4RyxDQUFKLEVBQU1rTCxPQUFNbEwsSUFBRSxZQUFkLEVBQTJCbUwsV0FBVSxFQUFyQyxFQUF3Q0MsWUFBVyxJQUFuRCxFQUF3REMsZUFBYyxDQUFDLENBQXZFLEVBQXlFQyxRQUFPLENBQUMsQ0FBakYsRUFBbUZDLFVBQVMsQ0FBQyxDQUE3RixFQUFsRztBQUFrTSxTQUEzMkIsRUFBNDJCQyxZQUFXLG9CQUFTeEwsQ0FBVCxFQUFXO0FBQUMsaUJBQU9BLEVBQUV3RyxFQUFGLElBQVEsS0FBSzRDLGVBQXBCO0FBQW9DLFNBQXY2QixFQUF3NkJxQyxtQkFBa0IsMkJBQVN6TCxDQUFULEVBQVc7QUFBQ3VELFlBQUcsWUFBVTtBQUFDLG1CQUFPdkQsS0FBR0EsRUFBRXVMLFFBQVo7QUFBcUIsV0FBbkMsRUFBc0MsWUFBVTtBQUFDLG1CQUFNLDBDQUF3Q3ZMLENBQTlDO0FBQWdELFdBQWpHO0FBQW9HLFNBQTFpQyxFQUEyaUMwTCxxQkFBb0IsNkJBQVMxTCxDQUFULEVBQVdDLENBQVgsRUFBYUssQ0FBYixFQUFlO0FBQUMsY0FBSUQsSUFBRSxJQUFOLENBQVcsY0FBWSxPQUFPSixDQUFuQixLQUF1QkssSUFBRUwsQ0FBRixFQUFJQSxJQUFFLElBQUUsQ0FBL0IsR0FBa0NELEVBQUV1TCxRQUFGLElBQVl2TCxFQUFFaUUsS0FBRixHQUFRaEUsQ0FBcEIsSUFBdUJELEVBQUUyTCxRQUFGLENBQVdDLE9BQVgsQ0FBb0IsVUFBUzVMLENBQVQsRUFBVztBQUFDSyxjQUFFcUwsbUJBQUYsQ0FBc0IxTCxDQUF0QixFQUF3QkMsQ0FBeEIsRUFBMEJLLENBQTFCLEdBQTZCQSxFQUFFTixDQUFGLENBQTdCO0FBQWtDLFdBQWxFLENBQXpEO0FBQThILFNBQXh0QyxFQUF5dEM2TCxtQkFBa0IsMkJBQVM3TCxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLGNBQUlLLElBQUVOLEVBQUVvTCxVQUFSLENBQW1CLFNBQU85SyxDQUFQLEtBQVdMLEVBQUVLLENBQUYsR0FBSyxLQUFLdUwsaUJBQUwsQ0FBdUJ2TCxDQUF2QixFQUF5QkwsQ0FBekIsQ0FBaEI7QUFBNkMsU0FBenpDLEVBQTB6QzZMLGtCQUFpQiwwQkFBUzlMLENBQVQsRUFBVztBQUFDLGNBQUlDLElBQUUsSUFBTixDQUFXLEtBQUt5SSxpQkFBTCxDQUF1QmtELE9BQXZCLENBQWdDLFVBQVN0TCxDQUFULEVBQVc7QUFBQ0wsY0FBRXlMLG1CQUFGLENBQXNCcEwsQ0FBdEIsRUFBd0JOLENBQXhCLEdBQTJCQSxFQUFFTSxDQUFGLENBQTNCO0FBQWdDLFdBQTVFO0FBQStFLFNBQWo3QyxFQUFrN0N5TCx5QkFBd0IsaUNBQVMvTCxDQUFULEVBQVc7QUFBQ0EsY0FBRWdNLFNBQVNDLGdCQUFULENBQTBCLFdBQTFCLEVBQXNDLEtBQUtDLGtCQUEzQyxFQUE4RCxDQUFDLENBQS9ELENBQUYsR0FBb0VGLFNBQVNHLG1CQUFULENBQTZCLFdBQTdCLEVBQXlDLEtBQUtELGtCQUE5QyxFQUFpRSxDQUFDLENBQWxFLENBQXBFO0FBQXlJLFNBQS9sRCxFQUFnbURFLFlBQVcsc0JBQVU7QUFBQyxlQUFLQyxLQUFMLENBQVd2SSxLQUFYLENBQWlCc0ksVUFBakI7QUFBOEIsU0FBcHBELEVBQXFwREUsV0FBVSxxQkFBVTtBQUFDLGVBQUtELEtBQUwsQ0FBV3ZJLEtBQVgsQ0FBaUJ3SSxTQUFqQjtBQUE2QixTQUF2c0QsRUFBd3NEQyxpQkFBZ0JsTSxFQUFHLFVBQVNMLENBQVQsRUFBVztBQUFDLGNBQUdBLEVBQUV3TSxjQUFGLElBQW1CeE0sRUFBRXlNLGVBQUYsRUFBbkIsRUFBdUMsQ0FBQyxLQUFLdEcsUUFBaEQsRUFBeUQ7QUFBQyxpQkFBS2tHLEtBQUwsQ0FBV3ZJLEtBQVgsQ0FBaUI0SSxHQUFqQixDQUFxQkMsUUFBckIsQ0FBOEIzTSxFQUFFNE0sTUFBaEMsTUFBMEMsQ0FBQyxLQUFLdEUsTUFBTixJQUFjLEtBQUtYLFVBQW5CLElBQStCLEtBQUttRCxzQkFBcEMsR0FBMkQsS0FBS3hDLE1BQUwsSUFBYSxDQUFDLEtBQUtqQixXQUFOLElBQW1CLENBQUMsS0FBS2dCLFNBQXRDLElBQWlELEtBQUt3RSxRQUFMLEVBQTVHLEdBQTRILEtBQUsxQyxTQUFMLEVBQXRLLEdBQXdMLEtBQUtVLGFBQUwsR0FBbUIsS0FBS3lCLFNBQUwsRUFBbkIsR0FBb0MsS0FBS0YsVUFBTCxFQUE1TixFQUE4TyxLQUFLeEIsVUFBTCxFQUE5TztBQUFnUTtBQUFDLFNBQTFVLENBQXh0RCxFQUFxaUVrQyx3QkFBdUJ6TSxFQUFHLFVBQVNMLENBQVQsRUFBVztBQUFDQSxZQUFFeU0sZUFBRixJQUFvQnpNLEVBQUV3TSxjQUFGLEVBQXBCLEVBQXVDLEtBQUtPLEtBQUwsRUFBdkMsRUFBb0QsS0FBS1gsVUFBTCxFQUFwRDtBQUFzRSxTQUFyRixDQUE1akUsRUFBb3BFWSx3QkFBdUIzTSxFQUFHLFVBQVNMLENBQVQsRUFBVztBQUFDQSxZQUFFd00sY0FBRixJQUFtQnhNLEVBQUV5TSxlQUFGLEVBQW5CLEVBQXVDLEtBQUtMLFVBQUwsRUFBdkMsRUFBeUQsS0FBS2EsVUFBTCxFQUF6RDtBQUEyRSxTQUExRixDQUEzcUUsRUFBd3dFZixvQkFBbUIsNEJBQVNsTSxDQUFULEVBQVc7QUFBQyxlQUFLcU0sS0FBTCxDQUFXYSxPQUFYLElBQW9CLENBQUMsS0FBS2IsS0FBTCxDQUFXYSxPQUFYLENBQW1CUCxRQUFuQixDQUE0QjNNLEVBQUU0TSxNQUE5QixDQUFyQixLQUE2RCxLQUFLTixTQUFMLElBQWlCLEtBQUtuQyxTQUFMLEVBQTlFO0FBQWdHLFNBQXY0RSxFQUF3NEVFLGNBQWEsd0JBQVU7QUFBQyxjQUFJckssSUFBRSxJQUFOLENBQVcsS0FBS21KLFdBQUwsSUFBa0IsS0FBS0QsU0FBTCxHQUFlLENBQUMsQ0FBaEIsRUFBa0IsS0FBS1AsZUFBTCxHQUFxQixDQUFDLENBQXhDLEVBQTBDLEtBQUttRCxnQkFBTCxDQUF1QixVQUFTN0wsQ0FBVCxFQUFXO0FBQUMsZ0JBQUdBLEVBQUVzTCxRQUFMLEVBQWM7QUFBQyxrQkFBSWpMLENBQUosQ0FBTUwsRUFBRWtOLGVBQUYsR0FBa0IsQ0FBQyxDQUFuQixFQUFxQmxOLEVBQUVtTixlQUFGLEdBQWtCLENBQUMsQ0FBeEMsRUFBMENwTixFQUFFaUosY0FBRixDQUFpQmhKLEVBQUV1RyxFQUFuQixLQUF3QmxHLElBQUUsRUFBRixFQUFLdUQsRUFBRXZELENBQUYsRUFBSSxjQUFKLEVBQW1CLENBQW5CLENBQUwsRUFBMkJ1RCxFQUFFdkQsQ0FBRixFQUFJLGlCQUFKLEVBQXNCLENBQXRCLENBQTNCLEVBQW9EdUQsRUFBRXZELENBQUYsRUFBSSxlQUFKLEVBQW9CLENBQXBCLENBQXBELEVBQTJFdUQsRUFBRXZELENBQUYsRUFBSSxrQkFBSixFQUF1QixDQUF2QixDQUEzRSxFQUFxR0EsQ0FBN0gsQ0FBMUM7QUFBMEs7QUFBQyxXQUFuTyxDQUExQyxFQUFnUixLQUFLd0wsZ0JBQUwsQ0FBdUIsVUFBUzdMLENBQVQsRUFBVztBQUFDLGdCQUFJSyxJQUFFTCxFQUFFb04sU0FBRixHQUFZNUksSUFBSXpFLEVBQUVtSixXQUFGLENBQWNtRSxXQUFkLEVBQUosRUFBZ0NyTixFQUFFaUwsS0FBRixDQUFRb0MsV0FBUixFQUFoQyxDQUFsQixDQUF5RWhOLE1BQUlOLEVBQUUySSxlQUFGLEdBQWtCLENBQUMsQ0FBbkIsRUFBcUIxSSxFQUFFa0wsU0FBRixDQUFZUyxPQUFaLENBQXFCLFVBQVMzTCxDQUFULEVBQVc7QUFBQyxxQkFBT0QsRUFBRWlKLGNBQUYsQ0FBaUJoSixFQUFFdUcsRUFBbkIsRUFBdUIrRyxlQUF2QixFQUFQO0FBQWdELGFBQWpGLENBQXJCLEVBQXlHdE4sRUFBRXFMLE1BQUYsSUFBVXJMLEVBQUVrTCxTQUFGLENBQVlTLE9BQVosQ0FBcUIsVUFBUzNMLENBQVQsRUFBVztBQUFDLHFCQUFPRCxFQUFFaUosY0FBRixDQUFpQmhKLEVBQUV1RyxFQUFuQixFQUF1QmdILGdCQUF2QixFQUFQO0FBQWlELGFBQWxGLENBQW5ILEVBQXdNLFNBQU92TixFQUFFbUwsVUFBVCxLQUFzQnBMLEVBQUVpSixjQUFGLENBQWlCaEosRUFBRW1MLFVBQUYsQ0FBYTVFLEVBQTlCLEVBQWtDaUgsWUFBbEMsSUFBZ0QsQ0FBaEQsRUFBa0R4TixFQUFFcUwsTUFBRixLQUFXdEwsRUFBRWlKLGNBQUYsQ0FBaUJoSixFQUFFbUwsVUFBRixDQUFhNUUsRUFBOUIsRUFBa0NrSCxhQUFsQyxJQUFpRCxDQUE1RCxDQUF4RSxDQUE1TSxHQUFxVixDQUFDcE4sS0FBR0wsRUFBRXNMLFFBQUYsSUFBWXRMLEVBQUVrTixlQUFsQixLQUFvQyxTQUFPbE4sRUFBRW1MLFVBQTdDLEtBQTBEbkwsRUFBRW1MLFVBQUYsQ0FBYStCLGVBQWIsR0FBNkIsQ0FBQyxDQUE5QixFQUFnQ2xOLEVBQUVtTCxVQUFGLENBQWFnQyxlQUFiLEdBQTZCLENBQUMsQ0FBeEgsQ0FBclY7QUFBZ2QsV0FBNWpCLENBQWxTLElBQWsyQixLQUFLbEUsU0FBTCxHQUFlLENBQUMsQ0FBbDNCO0FBQW8zQixTQUEveEcsRUFBZ3lHaUIsV0FBVSxxQkFBVTtBQUFDLGVBQUs3QixNQUFMLEtBQWMsS0FBS0EsTUFBTCxHQUFZLENBQUMsQ0FBYixFQUFlLEtBQUtkLG9CQUFMLElBQTJCLEtBQUs2RSxLQUFMLENBQVdzQixJQUF0QyxLQUE2QyxLQUFLdEUsa0JBQUwsR0FBd0IsS0FBS2dELEtBQUwsQ0FBV3NCLElBQVgsQ0FBZ0JDLFNBQXJGLENBQWYsRUFBK0csS0FBSzdCLHVCQUFMLENBQTZCLENBQUMsQ0FBOUIsQ0FBL0csRUFBZ0osS0FBSzVDLFdBQUwsR0FBaUIsRUFBakssRUFBb0ssS0FBS21CLEtBQUwsQ0FBVyxPQUFYLEVBQW1CLEtBQUtFLFFBQUwsRUFBbkIsRUFBbUMsS0FBS2hFLEVBQXhDLENBQWxMO0FBQStOLFNBQXBoSCxFQUFxaEhxRyxVQUFTLG9CQUFVO0FBQUMsZUFBSzFHLFFBQUwsSUFBZSxLQUFLbUMsTUFBcEIsS0FBNkIsS0FBS0EsTUFBTCxHQUFZLENBQUMsQ0FBYixFQUFlLEtBQUt1RixTQUFMLENBQWUsS0FBS0MsY0FBcEIsQ0FBZixFQUFtRCxLQUFLdEcsb0JBQUwsSUFBMkIsS0FBS3FHLFNBQUwsQ0FBZSxLQUFLRSxxQkFBcEIsQ0FBOUUsRUFBeUgsS0FBS2pGLGlCQUFMLElBQXdCLEtBQUtrRixXQUFMLENBQWlCLENBQUMsQ0FBbEIsQ0FBakosRUFBc0ssS0FBS2pDLHVCQUFMLENBQTZCLENBQUMsQ0FBOUIsQ0FBdEssRUFBdU0sS0FBS3pCLEtBQUwsQ0FBVyxNQUFYLEVBQWtCLEtBQUs5RCxFQUF2QixDQUFwTztBQUFnUSxTQUF6eUgsRUFBMHlIeUcsWUFBVyxzQkFBVTtBQUFDLGVBQUszRSxNQUFMLEdBQVksS0FBSzZCLFNBQUwsRUFBWixHQUE2QixLQUFLMEMsUUFBTCxFQUE3QjtBQUE2QyxTQUE3MkgsRUFBODJIb0IsZ0JBQWUsd0JBQVNqTyxDQUFULEVBQVc7QUFBQyxlQUFLeUwsaUJBQUwsQ0FBdUJ6TCxDQUF2QixHQUEwQixLQUFLa0osU0FBTCxHQUFlbEosRUFBRW1OLGVBQUYsR0FBa0IsQ0FBQ25OLEVBQUVtTixlQUFwQyxHQUFvRG5OLEVBQUVrTyxVQUFGLEdBQWEsQ0FBQ2xPLEVBQUVrTyxVQUE5RjtBQUF5RyxTQUFsL0gsRUFBbS9IakQsaUJBQWdCLDJCQUFVO0FBQUMsZUFBS2pFLFFBQUwsSUFBZSxLQUFLb0IsYUFBTCxHQUFtQjVFLE1BQU1DLE9BQU4sQ0FBYyxLQUFLSyxLQUFuQixJQUEwQixLQUFLQSxLQUFMLENBQVdnRyxLQUFYLEVBQTFCLEdBQTZDLEVBQWhFLEVBQW1FLEtBQUtTLFNBQUwsRUFBbEYsSUFBb0csS0FBS25DLGFBQUwsR0FBbUIsUUFBTSxLQUFLdEUsS0FBWCxHQUFpQixDQUFDLEtBQUtBLEtBQU4sQ0FBakIsR0FBOEIsRUFBcko7QUFBd0osU0FBdHFJLEVBQXVxSWtILHVCQUFzQiwrQkFBU2hMLENBQVQsRUFBVztBQUFDLGVBQUswSSxpQkFBTCxHQUF1QixLQUFLeUYsU0FBTCxDQUFlLElBQWYsRUFBb0JuTyxDQUFwQixDQUF2QjtBQUE4QyxTQUF2dkksRUFBd3ZJeUssc0JBQXFCLGdDQUFVO0FBQUMsY0FBSXpLLElBQUUsS0FBS29KLGVBQUwsR0FBcUJ0SSxPQUFPMEgsTUFBUCxDQUFjLElBQWQsQ0FBM0IsQ0FBK0MsS0FBS0osYUFBTCxDQUFtQndELE9BQW5CLENBQTRCLFVBQVMzTCxDQUFULEVBQVc7QUFBQ0QsY0FBRUMsQ0FBRixJQUFLLENBQUMsQ0FBTjtBQUFRLFdBQWhEO0FBQW1ELFNBQTEzSSxFQUEyM0ltSywwQkFBeUIsb0NBQVU7QUFBQyxjQUFJcEssSUFBRSxJQUFOO0FBQUEsY0FBV0MsSUFBRSxLQUFLc0ksbUJBQUwsR0FBeUJ6SCxPQUFPMEgsTUFBUCxDQUFjLElBQWQsQ0FBdEMsQ0FBMEQsS0FBS3hCLFFBQUwsS0FBZ0IsS0FBS3lDLGFBQUwsQ0FBbUJtQyxPQUFuQixDQUE0QixVQUFTdEwsQ0FBVCxFQUFXO0FBQUNMLGNBQUVLLEVBQUVrRyxFQUFKLElBQVEsQ0FBUixFQUFVeEcsRUFBRXVHLElBQUYsS0FBU3ZHLEVBQUUwTCxtQkFBRixDQUFzQnBMLENBQXRCLEVBQXlCLFVBQVNOLENBQVQsRUFBVztBQUFDQyxnQkFBRUQsRUFBRXdHLEVBQUosSUFBUSxDQUFSO0FBQVUsYUFBL0MsR0FBa0R4RyxFQUFFNkwsaUJBQUYsQ0FBb0J2TCxDQUFwQixFQUF1QixVQUFTTixDQUFULEVBQVc7QUFBQ0MsZ0JBQUVELEVBQUV3RyxFQUFKLElBQVEsQ0FBUjtBQUFVLGFBQTdDLENBQTNELENBQVY7QUFBc0gsV0FBOUosR0FBaUssS0FBS2tDLGlCQUFMLENBQXVCa0QsT0FBdkIsQ0FBZ0MsVUFBU3RMLENBQVQsRUFBVztBQUFDQSxjQUFFa0csRUFBRixJQUFRdkcsQ0FBUixLQUFZQSxFQUFFSyxFQUFFa0csRUFBSixJQUFRLENBQXBCLEdBQXVCeEcsRUFBRTBMLG1CQUFGLENBQXNCcEwsQ0FBdEIsRUFBeUIsVUFBU04sQ0FBVCxFQUFXO0FBQUNBLGdCQUFFd0csRUFBRixJQUFRdkcsQ0FBUixLQUFZQSxFQUFFRCxFQUFFd0csRUFBSixJQUFRLENBQXBCO0FBQXVCLGFBQTVELENBQXZCO0FBQXNGLFdBQWxJLENBQWpMO0FBQXVULFNBQWh4SixFQUFpeEoySCxXQUFVLG1CQUFTbk8sQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxjQUFJSyxJQUFFLElBQU47QUFBQSxjQUFXRCxJQUFFSixFQUFFeUosR0FBRixDQUFPLFVBQVN6SixDQUFULEVBQVdJLENBQVgsRUFBYTtBQUFDQyxjQUFFOE4sZ0JBQUYsQ0FBbUJuTyxDQUFuQixHQUFzQkssRUFBRStOLGVBQUYsQ0FBa0JwTyxDQUFsQixDQUF0QixDQUEyQyxJQUFJTSxJQUFFLFNBQU9QLENBQWI7QUFBQSxnQkFBZWEsSUFBRVosRUFBRXVHLEVBQW5CO0FBQUEsZ0JBQXNCaEYsSUFBRXZCLEVBQUVpTCxLQUExQjtBQUFBLGdCQUFnQ3pKLElBQUV4QixFQUFFMEwsUUFBcEM7QUFBQSxnQkFBNkNuTCxJQUFFUCxFQUFFcU8sVUFBakQ7QUFBQSxnQkFBNEQzTixJQUFFLEtBQUssQ0FBTCxLQUFTSCxDQUFULElBQVlBLENBQTFFO0FBQUEsZ0JBQTRFd0IsSUFBRXdCLE1BQU1DLE9BQU4sQ0FBY2hDLENBQWQsS0FBa0IsU0FBT0EsQ0FBekIsSUFBNEIsS0FBSyxDQUFMLEtBQVNBLENBQVQsSUFBWSxDQUFDLENBQUN4QixFQUFFc0wsUUFBMUg7QUFBQSxnQkFBbUkzSyxJQUFFLENBQUNvQixDQUF0STtBQUFBLGdCQUF3SVEsSUFBRWpDLElBQUUsQ0FBRixHQUFJUCxFQUFFaUUsS0FBRixHQUFRLENBQXRKO0FBQUEsZ0JBQXdKMUMsSUFBRWhCLElBQUUsRUFBRixHQUFLUCxFQUFFbUwsU0FBRixDQUFZeEksTUFBWixDQUFtQjNDLENBQW5CLENBQS9KO0FBQUEsZ0JBQXFMZ0UsSUFBRSxDQUFDekQsSUFBRSxFQUFGLEdBQUtQLEVBQUVrRSxLQUFSLEVBQWV2QixNQUFmLENBQXNCdEMsQ0FBdEIsQ0FBdkw7QUFBQSxnQkFBZ044RCxJQUFFN0QsRUFBRW1JLE9BQUYsQ0FBVTVILENBQVYsSUFBYSxFQUFDMkYsSUFBRzNGLENBQUosRUFBTXFLLE9BQU0xSixDQUFaLEVBQWN5QyxPQUFNekIsQ0FBcEIsRUFBc0IySSxXQUFVNUosQ0FBaEMsRUFBa0MyQyxPQUFNRixDQUF4QyxFQUEwQ29ILFlBQVdwTCxDQUFyRCxFQUF1RHNPLFlBQVczTixDQUFsRSxFQUFvRTBNLFdBQVUsQ0FBQyxDQUEvRSxFQUFpRi9CLFFBQU8xSyxDQUF4RixFQUEwRjJLLFVBQVN2SixDQUFuRyxFQUFxR3VNLFlBQVdoTyxDQUFoSCxFQUFrSGlPLEtBQUl2TyxDQUF0SCxFQUEvTixDQUF3VixJQUFHK0IsQ0FBSCxFQUFLO0FBQUMsa0JBQUl0QixDQUFKO0FBQUEsa0JBQU0wRCxJQUFFWixNQUFNQyxPQUFOLENBQWNoQyxDQUFkLENBQVIsQ0FBeUIyQyxLQUFHYixFQUFHLFlBQVU7QUFBQyx1QkFBTSxjQUFZLE9BQU9qRCxFQUFFc0csbUJBQTNCO0FBQStDLGVBQTdELEVBQWdFLFlBQVU7QUFBQyx1QkFBTSw2RkFBTjtBQUFvRyxlQUEvSyxDQUFILEVBQXFMekMsRUFBRXNLLFFBQUYsR0FBV3JLLENBQWhNLEVBQWtNRCxFQUFFdUssU0FBRixHQUFZLENBQUMsQ0FBL00sRUFBaU52SyxFQUFFK0osVUFBRixHQUFhMUwsSUFBRWxDLEVBQUU4RixrQkFBbE8sRUFBcVBqQyxFQUFFaUosZUFBRixHQUFrQixDQUFDLENBQXhRLEVBQTBRakosRUFBRWdKLGVBQUYsR0FBa0IsQ0FBQyxDQUE3UixFQUErUmhKLEVBQUV3SyxvQkFBRixHQUF1QixFQUF0VCxFQUF5VHhLLEVBQUV5SyxLQUFGLElBQVNsTyxJQUFFLEVBQUYsRUFBS21ELEVBQUVuRCxDQUFGLEVBQUksY0FBSixFQUFtQixDQUFuQixDQUFMLEVBQTJCbUQsRUFBRW5ELENBQUYsRUFBSSxpQkFBSixFQUFzQixDQUF0QixDQUEzQixFQUFvRG1ELEVBQUVuRCxDQUFGLEVBQUksZUFBSixFQUFvQixDQUFwQixDQUFwRCxFQUEyRW1ELEVBQUVuRCxDQUFGLEVBQUksa0JBQUosRUFBdUIsQ0FBdkIsQ0FBM0UsRUFBcUdBLENBQTlHLENBQXpULEVBQTBheUQsRUFBRXdILFFBQUYsR0FBV3ZILElBQUU5RCxFQUFFNk4sU0FBRixDQUFZaEssQ0FBWixFQUFjMUMsQ0FBZCxDQUFGLEdBQW1CLEVBQXhjLEVBQTJjMEMsRUFBRStKLFVBQUYsSUFBYyxDQUFDL0osRUFBRXNLLFFBQWpCLElBQTJCbk8sRUFBRTBOLFdBQUYsQ0FBYyxDQUFDLENBQWYsRUFBaUI3SixDQUFqQixDQUF0ZTtBQUEwZixvQkFBT0EsRUFBRWdILFNBQUYsQ0FBWVMsT0FBWixDQUFxQixVQUFTNUwsQ0FBVCxFQUFXO0FBQUMscUJBQU9BLEVBQUU0TyxLQUFGLENBQVFyQixlQUFSLEVBQVA7QUFBaUMsYUFBbEUsR0FBcUUzTSxLQUFHdUQsRUFBRWdILFNBQUYsQ0FBWVMsT0FBWixDQUFxQixVQUFTNUwsQ0FBVCxFQUFXO0FBQUMscUJBQU9BLEVBQUU0TyxLQUFGLENBQVFwQixnQkFBUixFQUFQO0FBQWtDLGFBQW5FLENBQXhFLEVBQThJLFNBQU94TixDQUFQLEtBQVdBLEVBQUU0TyxLQUFGLENBQVFuQixZQUFSLElBQXNCLENBQXRCLEVBQXdCN00sTUFBSVosRUFBRTRPLEtBQUYsQ0FBUWxCLGFBQVIsSUFBdUIsQ0FBM0IsQ0FBbkMsQ0FBOUksRUFBZ052SixDQUF2TjtBQUF5TixXQUExb0MsQ0FBYixDQUEwcEMsSUFBRyxLQUFLd0IsZ0JBQVIsRUFBeUI7QUFBQyxnQkFBSXBGLElBQUVGLEVBQUV3TyxNQUFGLENBQVUsVUFBUzdPLENBQVQsRUFBVztBQUFDLHFCQUFPQSxFQUFFdUwsUUFBVDtBQUFrQixhQUF4QyxDQUFOO0FBQUEsZ0JBQWlEMUssSUFBRVIsRUFBRXdPLE1BQUYsQ0FBVSxVQUFTN08sQ0FBVCxFQUFXO0FBQUMscUJBQU9BLEVBQUVzTCxNQUFUO0FBQWdCLGFBQXRDLENBQW5ELENBQTRGakwsSUFBRUUsRUFBRW9DLE1BQUYsQ0FBUzlCLENBQVQsQ0FBRjtBQUFjLGtCQUFPUixDQUFQO0FBQVMsU0FBaGxNLEVBQWlsTTJOLGFBQVkscUJBQVNoTyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLGNBQUlLLElBQUUsSUFBTixDQUFXLElBQUdOLENBQUgsRUFBSztBQUFDLGdCQUFHLEtBQUsrSSxrQkFBUixFQUEyQixPQUFPLElBQUkxSSxJQUFFLFNBQUZBLENBQUUsQ0FBU0wsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0ssZ0JBQUV5SSxrQkFBRixHQUFxQixDQUFDLENBQXRCLEVBQXdCL0ksSUFBRU0sRUFBRTBJLHVCQUFGLEdBQTBCaEosRUFBRXFFLE9BQUYsSUFBV0MsT0FBT3RFLENBQVAsQ0FBdkMsR0FBaURDLElBQUV1RCxNQUFNQyxPQUFOLENBQWN4RCxDQUFkLEtBQWtCSyxFQUFFeUssVUFBRixDQUFhOUssQ0FBYixHQUFnQkssRUFBRXdJLGlCQUFGLEdBQW9CLENBQUMsQ0FBdkQsSUFBMER4SSxFQUFFMEksdUJBQUYsR0FBMEIsOEJBQXRGLEdBQXFIMUksRUFBRTBJLHVCQUFGLEdBQTBCLGtCQUF4TjtBQUEyTyxhQUEvUCxDQUFnUSxLQUFLRCxrQkFBTCxHQUF3QixDQUFDLENBQXpCLEVBQTJCLEtBQUtDLHVCQUFMLEdBQTZCLEVBQXhELEVBQTJELEtBQUtsQyxlQUFMLENBQXFCekcsQ0FBckIsQ0FBM0Q7QUFBbUYsV0FBM1gsTUFBK1g7QUFBQyxnQkFBR0osRUFBRXlPLFNBQUwsRUFBZSxPQUFPLElBQUluTyxJQUFFTixFQUFFdU8sR0FBUjtBQUFBLGdCQUFZM04sSUFBRSxTQUFGQSxDQUFFLENBQVNiLENBQVQsRUFBV0ssQ0FBWCxFQUFhO0FBQUNKLGdCQUFFeU8sU0FBRixHQUFZLENBQUMsQ0FBYixFQUFlMU8sSUFBRUMsRUFBRTBPLG9CQUFGLEdBQXVCck8sRUFBRXFHLHFCQUFGLENBQXdCM0csQ0FBeEIsQ0FBekIsR0FBb0R3RCxNQUFNQyxPQUFOLENBQWNwRCxDQUFkLEtBQWtCSixFQUFFMEwsUUFBRixHQUFXckwsRUFBRTZOLFNBQUYsQ0FBWWxPLENBQVosRUFBY0ksQ0FBZCxDQUFYLEVBQTRCSixFQUFFd08sUUFBRixHQUFXLENBQUMsQ0FBeEMsRUFBMENuTyxFQUFFOEosd0JBQUYsRUFBNUQsS0FBMkZuSyxFQUFFME8sb0JBQUYsR0FBdUIsOEJBQXZCLEVBQXNEcEwsRUFBRyxZQUFVO0FBQUMsdUJBQU0sQ0FBQyxDQUFQO0FBQVMsZUFBdkIsRUFBMEIsWUFBVTtBQUFDLHVCQUFNLGtDQUFnQ2xELENBQWhDLEdBQWtDLDBDQUFsQyxHQUE2RUosRUFBRXVHLEVBQXJGO0FBQXdGLGVBQTdILENBQWpKLENBQW5FO0FBQXFWLGFBQWpYLENBQWtYdkcsRUFBRXlPLFNBQUYsR0FBWSxDQUFDLENBQWIsRUFBZXpPLEVBQUUwTyxvQkFBRixHQUF1QixFQUF0QyxFQUF5QyxLQUFLL0gsbUJBQUwsQ0FBeUJyRyxDQUF6QixFQUEyQk0sQ0FBM0IsQ0FBekM7QUFBdUU7QUFBQyxTQUF0OE4sRUFBdThOdU4sa0JBQWlCLDBCQUFTcE8sQ0FBVCxFQUFXO0FBQUMsY0FBSUMsSUFBRSxJQUFOLENBQVdzRCxFQUFHLFlBQVU7QUFBQyxtQkFBTSxDQUFDOUIsRUFBRXhCLEVBQUV3SSxPQUFKLEVBQVl6SSxFQUFFd0csRUFBZCxDQUFQO0FBQXlCLFdBQXZDLEVBQTBDLFlBQVU7QUFBQyxtQkFBTSw0Q0FBMENzSSxLQUFLQyxTQUFMLENBQWUvTyxFQUFFd0csRUFBakIsQ0FBMUMsR0FBK0Qsc0JBQS9ELEdBQXNGdkcsRUFBRXdJLE9BQUYsQ0FBVXpJLEVBQUV3RyxFQUFaLEVBQWdCMEUsS0FBdEcsR0FBNEcsU0FBNUcsR0FBc0hsTCxFQUFFa0wsS0FBeEgsR0FBOEgsaUJBQXBJO0FBQXNKLFdBQTNNO0FBQThNLFNBQTdyTyxFQUE4ck9tRCxpQkFBZ0IsMkJBQVUsQ0FBRSxDQUExdE8sRUFBMnRPVyxRQUFPLGdCQUFTaFAsQ0FBVCxFQUFXO0FBQUMsZUFBSzRKLE1BQUwsSUFBYSxLQUFLbUQsS0FBTCxFQUFiLENBQTBCLElBQUk5TSxJQUFFLEtBQUsrRyxRQUFMLElBQWUsQ0FBQyxLQUFLVCxJQUFyQixHQUEwQixNQUFJLEtBQUtnQyxtQkFBTCxDQUF5QnZJLEVBQUV3RyxFQUEzQixDQUE5QixHQUE2RCxDQUFDLEtBQUtnRixVQUFMLENBQWdCeEwsQ0FBaEIsQ0FBcEUsQ0FBdUZDLElBQUUsS0FBS2dQLFdBQUwsQ0FBaUJqUCxDQUFqQixDQUFGLEdBQXNCLEtBQUtrUCxhQUFMLENBQW1CbFAsQ0FBbkIsQ0FBdEIsRUFBNEMsS0FBS3lLLG9CQUFMLEVBQTVDLEVBQXdFLEtBQUtMLHdCQUFMLEVBQXhFLEVBQXdHLEtBQUtsQixTQUFMLElBQWdCakosQ0FBaEIsS0FBb0IsS0FBSzJKLE1BQUwsSUFBYSxLQUFLOUQsYUFBdEMsTUFBdUQsS0FBS3FELFdBQUwsR0FBaUIsRUFBeEUsQ0FBeEcsRUFBb0wsS0FBS1MsTUFBTCxJQUFhLEtBQUs1RCxhQUFsQixLQUFrQyxLQUFLbUUsU0FBTCxJQUFpQixLQUFLeEMsVUFBTCxLQUFrQixLQUFLa0QsYUFBTCxHQUFtQixDQUFDLENBQXRDLENBQW5ELENBQXBMO0FBQWlSLFNBQWhuUCxFQUFpblBrQyxPQUFNLGlCQUFVO0FBQUMsZUFBS3ZELFFBQUwsS0FBZ0IsS0FBS3BCLGFBQUwsR0FBbUIsRUFBbkIsRUFBc0IsS0FBS3FDLG9CQUFMLEVBQXRCLEVBQWtELEtBQUtMLHdCQUFMLEVBQWxFO0FBQW1HLFNBQXJ1UCxFQUFzdVA2RSxhQUFZLHFCQUFTalAsQ0FBVCxFQUFXO0FBQUMsY0FBRyxLQUFLbVAsUUFBTCxDQUFjblAsQ0FBZCxHQUFpQixLQUFLZ0gsUUFBTCxJQUFlLENBQUMsS0FBS1QsSUFBckIsSUFBMkIsQ0FBQ3ZHLEVBQUV1TyxVQUFsRCxFQUE2RDtBQUFDLGdCQUFJdE8sSUFBRUQsRUFBRW9MLFVBQVI7QUFBQSxnQkFBbUI5SyxJQUFFTCxFQUFFMEwsUUFBdkIsQ0FBZ0NyTCxFQUFFOE8sS0FBRixDQUFRLEtBQUs1RCxVQUFiLE1BQTJCbEwsRUFBRXNMLE9BQUYsQ0FBVSxLQUFLeUQsV0FBZixHQUE0QixLQUFLSixXQUFMLENBQWlCaFAsQ0FBakIsQ0FBdkQ7QUFBNEU7QUFBQyxTQUF6NlAsRUFBMDZQaVAsZUFBYyx1QkFBU2xQLENBQVQsRUFBVztBQUFDLGNBQUlDLElBQUUsSUFBTixDQUFXLElBQUcsS0FBS29QLFdBQUwsQ0FBaUJyUCxDQUFqQixHQUFvQixLQUFLZ0gsUUFBTCxJQUFlLENBQUMsS0FBS1QsSUFBckIsS0FBNEIsS0FBS2tELGFBQUwsQ0FBbUJtQyxPQUFuQixDQUE0QixVQUFTdEwsQ0FBVCxFQUFXO0FBQUMsYUFBQyxDQUFELEtBQUtBLEVBQUU2SyxTQUFGLENBQVl4SCxPQUFaLENBQW9CM0QsQ0FBcEIsQ0FBTCxJQUE2QkMsRUFBRW9QLFdBQUYsQ0FBYy9PLENBQWQsQ0FBN0I7QUFBOEMsV0FBdEYsR0FBeUYsQ0FBQ04sRUFBRXVPLFVBQXhILENBQXZCLEVBQTJKO0FBQUMsZ0JBQUlqTyxJQUFFTSxFQUFFWixFQUFFbUwsU0FBSixFQUFjLEtBQUtLLFVBQW5CLENBQU4sQ0FBcUMsSUFBRyxDQUFDLENBQUQsS0FBS2xMLENBQVIsRUFBVTtBQUFDLGtCQUFJRCxJQUFFTCxFQUFFbUwsU0FBRixDQUFZN0ssQ0FBWixDQUFOO0FBQUEsa0JBQXFCQyxJQUFFUCxFQUFFbUwsU0FBRixDQUFZeEksTUFBWixDQUFtQjNDLENBQW5CLENBQXZCLENBQTZDLEtBQUtxUCxXQUFMLENBQWlCaFAsQ0FBakIsR0FBb0IsS0FBS3FMLG1CQUFMLENBQXlCckwsQ0FBekIsRUFBMkJMLEVBQUVpRSxLQUE3QixFQUFvQyxVQUFTakUsQ0FBVCxFQUFXO0FBQUMsaUJBQUMsQ0FBRCxLQUFLTyxFQUFFb0QsT0FBRixDQUFVM0QsQ0FBVixDQUFMLElBQW1CQyxFQUFFa1AsUUFBRixDQUFXblAsQ0FBWCxDQUFuQjtBQUFpQyxlQUFqRixDQUFwQjtBQUF3RztBQUFDO0FBQUMsU0FBbHpRLEVBQW16UW1QLFVBQVMsa0JBQVNuUCxDQUFULEVBQVc7QUFBQyxlQUFLb0ksYUFBTCxDQUFtQmtILElBQW5CLENBQXdCdFAsRUFBRXdHLEVBQTFCLEdBQThCLEtBQUs0QyxlQUFMLENBQXFCcEosRUFBRXdHLEVBQXZCLElBQTJCLENBQUMsQ0FBMUQsRUFBNEQsS0FBSytELFNBQUwsRUFBNUQ7QUFBNkUsU0FBcjVRLEVBQXM1UThFLGFBQVkscUJBQVNyUCxDQUFULEVBQVc7QUFBQ3dDLFlBQUUsS0FBSzRGLGFBQVAsRUFBcUJwSSxFQUFFd0csRUFBdkIsR0FBMkIsT0FBTyxLQUFLNEMsZUFBTCxDQUFxQnBKLEVBQUV3RyxFQUF2QixDQUFsQztBQUE2RCxTQUEzK1EsRUFBNCtRK0ksc0JBQXFCLGdDQUFVO0FBQUMsY0FBRyxLQUFLL0YsUUFBUixFQUFpQjtBQUFDLGdCQUFJeEosSUFBRVcsRUFBRSxLQUFLeUgsYUFBUCxDQUFOO0FBQUEsZ0JBQTRCbkksSUFBRSxLQUFLMEosT0FBTCxDQUFhM0osQ0FBYixDQUE5QixDQUE4QyxLQUFLcVAsV0FBTCxDQUFpQnBQLENBQWpCLEdBQW9CLEtBQUt3SyxvQkFBTCxFQUFwQixFQUFnRCxLQUFLTCx3QkFBTCxFQUFoRDtBQUFnRjtBQUFDLFNBQTdwUixFQUE4cFJHLFdBQVUscUJBQVU7QUFBQyxjQUFJdkssSUFBRSxJQUFOLENBQVcsWUFBVSxLQUFLZ0ksV0FBZixHQUEyQixLQUFLSSxhQUFMLENBQW1Cb0gsSUFBbkIsQ0FBeUIsVUFBU3ZQLENBQVQsRUFBV0ssQ0FBWCxFQUFhO0FBQUMsbUJBQU82RCxFQUFFbkUsRUFBRXlJLE9BQUYsQ0FBVXhJLENBQVYsQ0FBRixFQUFlRCxFQUFFeUksT0FBRixDQUFVbkksQ0FBVixDQUFmLENBQVA7QUFBb0MsV0FBM0UsQ0FBM0IsR0FBeUcsWUFBVSxLQUFLMEgsV0FBZixJQUE0QixLQUFLSSxhQUFMLENBQW1Cb0gsSUFBbkIsQ0FBeUIsVUFBU3ZQLENBQVQsRUFBV0ssQ0FBWCxFQUFhO0FBQUMsbUJBQU8wRCxFQUFFaEUsRUFBRXlJLE9BQUYsQ0FBVXhJLENBQVYsQ0FBRixFQUFlRCxFQUFFeUksT0FBRixDQUFVbkksQ0FBVixDQUFmLENBQVA7QUFBb0MsV0FBM0UsQ0FBckk7QUFBbU4sU0FBajVSLEVBQWs1UnlOLHVCQUFzQixpQ0FBVTtBQUFDLGVBQUsxQixLQUFMLENBQVdzQixJQUFYLEtBQWtCLEtBQUt0QixLQUFMLENBQVdzQixJQUFYLENBQWdCQyxTQUFoQixHQUEwQixLQUFLdkUsa0JBQWpEO0FBQXFFLFNBQXgvUixFQUF5L1J5RSxnQkFBZSwwQkFBVTtBQUFDLGNBQUcsZUFBYSxPQUFPMkIsTUFBdkIsRUFBOEI7QUFBQyxnQkFBSXpQLElBQUUsS0FBSzBNLEdBQUwsQ0FBU2dELHFCQUFULEVBQU47QUFBQSxnQkFBdUN6UCxJQUFFRCxFQUFFMlAsR0FBM0M7QUFBQSxnQkFBK0NyUCxJQUFFbVAsT0FBT0csV0FBUCxHQUFtQjVQLEVBQUU2UCxNQUF0RSxDQUE2RXZQLElBQUUsS0FBS3lHLFNBQVAsSUFBa0J6RyxJQUFFTCxDQUFwQixJQUF1QixZQUFVLEtBQUttSCxhQUF0QyxJQUFxRCxhQUFXLEtBQUtBLGFBQXJFLElBQW9GLEtBQUt5QixzQkFBTCxHQUE0QixPQUE1QixFQUFvQyxLQUFLRCxlQUFMLEdBQXFCa0gsS0FBS0MsR0FBTCxDQUFTelAsSUFBRSxFQUFYLEVBQWMsS0FBS3lHLFNBQW5CLENBQTdJLEtBQTZLLEtBQUs4QixzQkFBTCxHQUE0QixPQUE1QixFQUFvQyxLQUFLRCxlQUFMLEdBQXFCa0gsS0FBS0MsR0FBTCxDQUFTOVAsSUFBRSxFQUFYLEVBQWMsS0FBSzhHLFNBQW5CLENBQXRPO0FBQXFRO0FBQUMsU0FBcjRTLEVBQTUzRyxFQUFtd1ppSixTQUFRLG1CQUFVO0FBQUMsYUFBS3JGLFdBQUwsSUFBbUIsS0FBS0MsVUFBTCxFQUFuQixFQUFxQyxLQUFLRyxVQUFMLENBQWdCLEtBQUtySixPQUFyQixDQUFyQztBQUFtRSxPQUF6MVosRUFBMDFadU8sU0FBUSxtQkFBVTtBQUFDLGFBQUt6SyxTQUFMLElBQWdCLEtBQUs2RyxLQUFMLENBQVd2SSxLQUFYLENBQWlCc0ksVUFBakIsRUFBaEI7QUFBOEMsT0FBMzVaLEVBQTQ1WjhELFdBQVUscUJBQVU7QUFBQyxhQUFLbkUsdUJBQUwsQ0FBNkIsQ0FBQyxDQUE5QjtBQUFpQyxPQUFsOVosRUFBMVA7QUFBQSxRQUE4c2FvRSxJQUFFLEVBQUM3RyxVQUFTLEVBQUM1QyxXQUFVLHFCQUFVO0FBQUMsY0FBSTFHLElBQUUsS0FBS2dGLFFBQUwsQ0FBY3VFLG1CQUFkLEdBQWtDLEtBQUt2RSxRQUFMLENBQWN5QixLQUF0RCxDQUE0RCxPQUFPLEtBQUt6QixRQUFMLENBQWMwQixTQUFkLENBQXdCMUcsQ0FBeEIsQ0FBUDtBQUFrQyxTQUFwSCxFQUFWLEVBQWdJMEssU0FBUSxFQUFDMEIsWUFBVyxzQkFBVTtBQUFDLGVBQUtDLEtBQUwsQ0FBVytELEtBQVgsQ0FBaUJDLEtBQWpCO0FBQXlCLFNBQWhELEVBQWlEL0QsV0FBVSxxQkFBVTtBQUFDLGVBQUtELEtBQUwsQ0FBVytELEtBQVgsQ0FBaUJFLElBQWpCO0FBQXdCLFNBQTlGLEVBQStGQyx3QkFBdUJsUSxFQUFHLFlBQVU7QUFBQyxlQUFLMkUsUUFBTCxDQUFjOEYsc0JBQWQsR0FBcUMsQ0FBQyxDQUF0QztBQUF3QyxTQUF0RCxDQUF0SCxFQUF4SSxFQUFodGE7QUFBQSxRQUF5Z2IwRixJQUFFLEVBQUNDLE1BQUssNkJBQU4sRUFBb0NDLFFBQU8sQ0FBQyxVQUFELENBQTNDLEVBQTNnYjtBQUFBLFFBQW9rYkMsSUFBRSxTQUFGQSxDQUFFLEdBQVU7QUFBQyxVQUFJM1EsSUFBRSxJQUFOO0FBQUEsVUFBV0MsSUFBRUQsRUFBRTRRLGNBQWYsQ0FBOEIsT0FBTSxDQUFDNVEsRUFBRTZRLEtBQUYsQ0FBUUMsRUFBUixJQUFZN1EsQ0FBYixFQUFnQixLQUFoQixFQUFzQixFQUFDOFEsYUFBWSxtRUFBYixFQUF0QixFQUF3RyxDQUFDL1EsRUFBRWdSLEVBQUYsQ0FBSyxhQUFMLEVBQW1CLENBQUNoUixFQUFFaVIsRUFBRixDQUFLalIsRUFBRWtSLEVBQUYsQ0FBS2xSLEVBQUVnRixRQUFGLENBQVd1QyxXQUFoQixDQUFMLENBQUQsQ0FBbkIsQ0FBRCxDQUF4RyxFQUFtSyxDQUFuSyxDQUFOO0FBQTRLLEtBQTN4YjtBQUFBLFFBQTR4YjRKLElBQUUsRUFBOXhiO0FBQUEsUUFBaXliQyxJQUFFLEVBQUN6UCxRQUFPZ1AsQ0FBUixFQUFVL08saUJBQWdCdVAsQ0FBMUIsRUFBbnliO0FBQUEsUUFBZzBiRSxJQUFFRCxDQUFsMGI7QUFBQSxRQUFvMGJFLElBQUVoUixFQUFFLENBQUYsQ0FBdDBiO0FBQUEsUUFBMjBiaVIsSUFBRUQsRUFBRWQsQ0FBRixFQUFJYSxDQUFKLEVBQU0sQ0FBQyxDQUFQLEVBQVMsSUFBVCxFQUFjLElBQWQsRUFBbUIsSUFBbkIsQ0FBNzBiO0FBQUEsUUFBczJiRyxJQUFFRCxFQUFFclIsT0FBMTJiO0FBQUEsUUFBazNidVIsSUFBRSxFQUFDQyxXQUFVLENBQVgsRUFBYUMsUUFBTyxFQUFwQixFQUF1QkMsUUFBTyxFQUE5QixFQUFwM2I7QUFBQSxRQUFzNWJDLElBQUUsRUFBQ3BCLE1BQUssdUJBQU4sRUFBOEJDLFFBQU8sQ0FBQyxVQUFELENBQXJDLEVBQWtEdkksTUFBSyxnQkFBVTtBQUFDLGVBQU0sRUFBQzJKLFlBQVcsQ0FBWixFQUFOO0FBQXFCLE9BQXZGLEVBQXdGeEksVUFBUyxFQUFDeUksZUFBYyx5QkFBVTtBQUFDLGlCQUFPLEtBQUsvTSxRQUFMLENBQWNnQyxRQUFyQjtBQUE4QixTQUF4RCxFQUFqRyxFQUEySmdMLFNBQVEsbUJBQVU7QUFBQyxhQUFLRCxhQUFMLElBQW9CLEtBQUtFLGdCQUFMLEVBQXBCO0FBQTRDLE9BQTFOLEVBQTJOdkgsU0FBUSxFQUFDMkYsT0FBTSxpQkFBVTtBQUFDLGVBQUtyTCxRQUFMLENBQWNtQixRQUFkLElBQXdCLEtBQUtrRyxLQUFMLENBQVcrRCxLQUFYLElBQWtCLEtBQUsvRCxLQUFMLENBQVcrRCxLQUFYLENBQWlCQyxLQUFqQixFQUExQztBQUFtRSxTQUFyRixFQUFzRkMsTUFBSyxnQkFBVTtBQUFDLGVBQUtqRSxLQUFMLENBQVcrRCxLQUFYLElBQWtCLEtBQUsvRCxLQUFMLENBQVcrRCxLQUFYLENBQWlCRSxJQUFqQixFQUFsQjtBQUEwQyxTQUFoSixFQUFpSjRCLFNBQVEsbUJBQVU7QUFBQyxlQUFLbE4sUUFBTCxDQUFjcUQsU0FBZCxHQUF3QixDQUFDLENBQXpCLEVBQTJCLENBQUMsS0FBS3JELFFBQUwsQ0FBY3NELE1BQWYsSUFBdUIsS0FBS3RELFFBQUwsQ0FBY3NDLFdBQXJDLElBQWtELEtBQUt0QyxRQUFMLENBQWM2SCxRQUFkLEVBQTdFO0FBQXNHLFNBQTFRLEVBQTJRc0YsUUFBTyxrQkFBVTtBQUFDLGVBQUtuTixRQUFMLENBQWNxRCxTQUFkLEdBQXdCLENBQUMsQ0FBekIsRUFBMkIsS0FBS3JELFFBQUwsQ0FBY21GLFNBQWQsRUFBM0I7QUFBcUQsU0FBbFYsRUFBbVZpSSxTQUFRLGlCQUFTcFMsQ0FBVCxFQUFXO0FBQUMsZUFBS2dGLFFBQUwsQ0FBY21FLFdBQWQsR0FBMEJuSixFQUFFNE0sTUFBRixDQUFTOUksS0FBbkM7QUFBeUMsU0FBaFosRUFBaVp1TyxXQUFVLG1CQUFTclMsQ0FBVCxFQUFXO0FBQUMsY0FBRyxFQUFFQSxFQUFFc1MsT0FBRixJQUFXdFMsRUFBRXVTLFFBQWIsSUFBdUJ2UyxFQUFFd1MsTUFBekIsSUFBaUN4UyxFQUFFeVMsT0FBckMsQ0FBSCxFQUFpRCxRQUFPLFdBQVV6UyxDQUFWLEdBQVlBLEVBQUUwUyxLQUFkLEdBQW9CMVMsRUFBRTJTLE9BQTdCLEdBQXNDLEtBQUtsQixFQUFFQyxTQUFQO0FBQWlCLG1CQUFLMU0sUUFBTCxDQUFjVSxnQkFBZCxJQUFnQyxDQUFDLEtBQUtWLFFBQUwsQ0FBY21FLFdBQWQsQ0FBMEI5RixNQUEzRCxJQUFtRSxLQUFLMkIsUUFBTCxDQUFjdUssb0JBQWQsRUFBbkUsQ0FBd0csTUFBTSxLQUFLa0MsRUFBRUcsTUFBUDtBQUFjLG1CQUFLNU0sUUFBTCxDQUFjaUIsYUFBZCxJQUE2QixDQUFDLEtBQUtqQixRQUFMLENBQWNtRSxXQUFkLENBQTBCOUYsTUFBeEQsSUFBZ0UsS0FBSzJCLFFBQUwsQ0FBY3VLLG9CQUFkLEVBQWhFLENBQXFHLE1BQU0sS0FBS2tDLEVBQUVFLE1BQVA7QUFBYyxtQkFBSzNNLFFBQUwsQ0FBY21FLFdBQWQsQ0FBMEI5RixNQUExQixHQUFpQyxLQUFLMkIsUUFBTCxDQUFjbUUsV0FBZCxHQUEwQixFQUEzRCxHQUE4RCxLQUFLbkUsUUFBTCxDQUFjc0QsTUFBZCxHQUFxQixLQUFLdEQsUUFBTCxDQUFjbUYsU0FBZCxFQUFyQixHQUErQyxLQUFLbkYsUUFBTCxDQUFjc0IsaUJBQWQsSUFBaUMsS0FBS3RCLFFBQUwsQ0FBYytILEtBQWQsRUFBOUksQ0FBb0ssTUFBTTtBQUFRLG1CQUFLL0gsUUFBTCxDQUFjc0QsTUFBZCxJQUFzQixLQUFLdEQsUUFBTCxDQUFjNkgsUUFBZCxFQUF0QixDQUE5ZDtBQUE4Z0IsU0FBdCtCLEVBQXUrQitGLGFBQVkscUJBQVM1UyxDQUFULEVBQVc7QUFBQyxlQUFLZ0YsUUFBTCxDQUFjbUUsV0FBZCxDQUEwQjlGLE1BQTFCLElBQWtDckQsRUFBRXlNLGVBQUYsRUFBbEM7QUFBc0QsU0FBcmpDLEVBQXNqQ29HLG9CQUFtQiw0QkFBUzdTLENBQVQsRUFBVztBQUFDLGNBQUlDLElBQUUsRUFBQzZTLE9BQU0sK0JBQVAsRUFBTjtBQUFBLGNBQThDeFMsSUFBRSxFQUFoRCxDQUFtRCxPQUFPLEtBQUswRSxRQUFMLENBQWMyQyxVQUFkLElBQTBCLENBQUMsS0FBSzNDLFFBQUwsQ0FBY21CLFFBQXpDLEtBQW9EN0YsRUFBRWdQLElBQUYsQ0FBTyxLQUFLeUQsV0FBTCxDQUFpQi9TLENBQWpCLENBQVAsR0FBNEIsS0FBSytSLGFBQUwsSUFBb0J6UixFQUFFZ1AsSUFBRixDQUFPLEtBQUswRCxXQUFMLENBQWlCaFQsQ0FBakIsQ0FBUCxDQUFwRyxHQUFpSSxLQUFLZ0YsUUFBTCxDQUFjMkMsVUFBZCxJQUEwQm5ILEVBQUVQLENBQUYsRUFBSSxFQUFDZ1QsSUFBRyxFQUFDNUMsT0FBTSxLQUFLNkIsT0FBWixFQUFvQjVCLE1BQUssS0FBSzZCLE1BQTlCLEVBQXFDZSxTQUFRLEtBQUtiLFNBQWxELEVBQUosRUFBaUVjLEtBQUksT0FBckUsRUFBSixDQUEzSixFQUE4TyxLQUFLbk8sUUFBTCxDQUFjMkMsVUFBZCxJQUEwQixLQUFLM0MsUUFBTCxDQUFjbUIsUUFBeEMsSUFBa0QzRixFQUFFUCxDQUFGLEVBQUksRUFBQ21ULE9BQU0sRUFBQ2xMLFVBQVMsS0FBS2xELFFBQUwsQ0FBY2tELFFBQXhCLEVBQVAsRUFBSixDQUFoUyxFQUErVWxJLEVBQUUsS0FBRixFQUFRQyxDQUFSLEVBQVVLLENBQVYsQ0FBdFY7QUFBbVcsU0FBMytDLEVBQTQrQ3lTLGFBQVkscUJBQVMvUyxDQUFULEVBQVc7QUFBQyxpQkFBT0EsRUFBRSxPQUFGLEVBQVUsRUFBQzhTLE9BQU0sdUJBQVAsRUFBK0JNLE9BQU0sRUFBQ3BRLE1BQUssTUFBTixFQUFhcVEsY0FBYSxLQUExQixFQUFnQ25MLFVBQVMsS0FBS2xELFFBQUwsQ0FBY2tELFFBQXZELEVBQXJDLEVBQXNHb0wsVUFBUyxFQUFDeFAsT0FBTSxLQUFLa0IsUUFBTCxDQUFjbUUsV0FBckIsRUFBL0csRUFBaUpvSyxPQUFNLEVBQUNDLE9BQU0sS0FBS3pCLGFBQUwsR0FBbUIsS0FBS0QsVUFBTCxHQUFnQixJQUFuQyxHQUF3QyxJQUEvQyxFQUF2SixFQUE0TW1CLElBQUcsRUFBQzVDLE9BQU0sS0FBSzZCLE9BQVosRUFBb0I5QixPQUFNLEtBQUtnQyxPQUEvQixFQUF1QzlCLE1BQUssS0FBSzZCLE1BQWpELEVBQXdEZSxTQUFRLEtBQUtiLFNBQXJFLEVBQStFb0IsV0FBVSxLQUFLYixXQUE5RixFQUEvTSxFQUEwVE8sS0FBSSxPQUE5VCxFQUFWLENBQVA7QUFBeVYsU0FBNzFELEVBQTgxREgsYUFBWSxxQkFBU2hULENBQVQsRUFBVztBQUFDLGlCQUFPQSxFQUFFLEtBQUYsRUFBUSxFQUFDOFMsT0FBTSx1QkFBUCxFQUErQlEsVUFBUyxFQUFDSSxhQUFZLEtBQUsxTyxRQUFMLENBQWNtRSxXQUEzQixFQUF4QyxFQUFnRmdLLEtBQUksT0FBcEYsRUFBUixDQUFQO0FBQTZHLFNBQW4rRCxFQUFvK0RsQixrQkFBaUIsNEJBQVU7QUFBQyxlQUFLSCxVQUFMLEdBQWdCaEMsS0FBSzZELEdBQUwsQ0FBUyxDQUFULEVBQVcsS0FBS3RILEtBQUwsQ0FBV3VILEtBQVgsR0FBaUIsS0FBS3ZILEtBQUwsQ0FBV3VILEtBQVgsQ0FBaUJDLFdBQWpCLEdBQTZCLENBQTlDLEdBQWdELENBQTNELENBQWhCO0FBQThFLFNBQTlrRSxFQUFuTyxFQUFtekVsUyxRQUFPLGdCQUFTM0IsQ0FBVCxFQUFXO0FBQUMsZUFBTyxLQUFLNlMsa0JBQUwsQ0FBd0I3UyxDQUF4QixDQUFQO0FBQWtDLE9BQXgyRSxFQUF4NWI7QUFBQSxRQUFrd2dCOFQsSUFBRXhULEVBQUUsQ0FBRixDQUFwd2dCO0FBQUEsUUFBeXdnQnlULElBQUVELEVBQUVqQyxDQUFGLEVBQUksSUFBSixFQUFTLENBQUMsQ0FBVixFQUFZLElBQVosRUFBaUIsSUFBakIsRUFBc0IsSUFBdEIsQ0FBM3dnQjtBQUFBLFFBQXV5Z0JtQyxJQUFFRCxFQUFFN1QsT0FBM3lnQjtBQUFBLFFBQW16Z0IrVCxJQUFFLEVBQUN4RCxNQUFLLDZCQUFOLEVBQW9DeUQsWUFBVyxFQUFDQyxhQUFZM0MsQ0FBYixFQUFlNEMsYUFBWUosQ0FBM0IsRUFBL0MsRUFBNkVLLFFBQU8sQ0FBQ2xFLENBQUQsQ0FBcEYsRUFBd0ZPLFFBQU8sQ0FBQyxVQUFELENBQS9GLEVBQXJ6Z0I7QUFBQSxRQUFrNmdCNEQsSUFBRSxTQUFGQSxDQUFFLEdBQVU7QUFBQyxVQUFJdFUsSUFBRSxJQUFOO0FBQUEsVUFBV0MsSUFBRUQsRUFBRTRRLGNBQWY7QUFBQSxVQUE4QnRRLElBQUVOLEVBQUU2USxLQUFGLENBQVFDLEVBQVIsSUFBWTdRLENBQTVDLENBQThDLE9BQU9LLEVBQUUsS0FBRixFQUFRLEVBQUN5USxhQUFZLCtCQUFiLEVBQVIsRUFBc0QsQ0FBQ3pRLEVBQUUsa0JBQUYsRUFBcUIsRUFBQ3lRLGFBQVksNkJBQWIsRUFBMkNxQyxPQUFNLEVBQUNtQixLQUFJLEtBQUwsRUFBVzlELE1BQUssd0NBQWhCLEVBQXlEK0QsUUFBTyxFQUFoRSxFQUFqRCxFQUFyQixFQUEySSxDQUFDeFUsRUFBRXlVLEVBQUYsQ0FBS3pVLEVBQUVnRixRQUFGLENBQVc2RSxZQUFoQixFQUE4QixVQUFTNUosQ0FBVCxFQUFXO0FBQUMsZUFBTSxDQUFDSyxFQUFFLEtBQUYsRUFBUSxFQUFDb1UsS0FBSSxXQUFTelUsRUFBRXVHLEVBQWhCLEVBQW1CdUssYUFBWSwwQ0FBL0IsRUFBMEVrQyxJQUFHLEVBQUNRLFdBQVV6VCxFQUFFdVEsc0JBQWIsRUFBN0UsRUFBUixFQUEySCxDQUFDalEsRUFBRSxLQUFGLEVBQVEsRUFBQ3lRLGFBQVksa0NBQWIsRUFBUixFQUF5RCxDQUFDelEsRUFBRSxNQUFGLEVBQVMsRUFBQ3lRLGFBQVksbUNBQWIsRUFBVCxFQUEyRCxDQUFDL1EsRUFBRWlSLEVBQUYsQ0FBS2pSLEVBQUVrUixFQUFGLENBQUtqUixFQUFFaUwsS0FBUCxDQUFMLENBQUQsQ0FBM0QsQ0FBRCxFQUFtRjVLLEVBQUUsTUFBRixFQUFTLEVBQUN5USxhQUFZLG1EQUFiLEVBQWlFa0MsSUFBRyxFQUFDUSxXQUFVLG1CQUFTblQsQ0FBVCxFQUFXO0FBQUNOLGdCQUFFZ0YsUUFBRixDQUFXZ0ssTUFBWCxDQUFrQi9PLENBQWxCO0FBQXFCLGFBQTVDLEVBQXBFLEVBQVQsRUFBNEgsQ0FBQ0QsRUFBRWlSLEVBQUYsQ0FBSyxHQUFMLENBQUQsQ0FBNUgsQ0FBbkYsQ0FBekQsQ0FBRCxDQUEzSCxDQUFELENBQU47QUFBNlosT0FBdmMsQ0FBRCxFQUEyY2pSLEVBQUVpUixFQUFGLENBQUssR0FBTCxDQUEzYyxFQUFxZGpSLEVBQUVnRixRQUFGLENBQVcrRSxnQkFBWCxHQUE0QnpKLEVBQUUsS0FBRixFQUFRLEVBQUNvVSxLQUFJLFdBQUwsRUFBaUIzRCxhQUFZLGlFQUE3QixFQUFSLEVBQXdHLENBQUN6USxFQUFFLE1BQUYsRUFBUyxFQUFDeVEsYUFBWSxnQ0FBYixFQUFULEVBQXdELENBQUMvUSxFQUFFaVIsRUFBRixDQUFLalIsRUFBRWtSLEVBQUYsQ0FBS2xSLEVBQUUwRyxTQUFQLENBQUwsQ0FBRCxDQUF4RCxDQUFELENBQXhHLENBQTVCLEdBQTBOMUcsRUFBRTJVLEVBQUYsRUFBL3FCLEVBQXNyQjNVLEVBQUVpUixFQUFGLENBQUssR0FBTCxDQUF0ckIsRUFBZ3NCalIsRUFBRWdGLFFBQUYsQ0FBV3dFLFFBQVgsSUFBcUJ4SixFQUFFZ0YsUUFBRixDQUFXbUUsV0FBaEMsR0FBNENuSixFQUFFMlUsRUFBRixFQUE1QyxHQUFtRHJVLEVBQUUsYUFBRixFQUFnQixFQUFDb1UsS0FBSSxZQUFMLEVBQWhCLENBQW52QixFQUF1eEIxVSxFQUFFaVIsRUFBRixDQUFLLEdBQUwsQ0FBdnhCLEVBQWl5QjNRLEVBQUUsY0FBRixFQUFpQixFQUFDb1UsS0FBSSxPQUFMLEVBQWF2QixLQUFJLE9BQWpCLEVBQWpCLENBQWp5QixDQUEzSSxFQUF5OUIsQ0FBejlCLENBQUQsQ0FBdEQsRUFBb2hDLENBQXBoQyxDQUFQO0FBQThoQyxLQUEzL2lCO0FBQUEsUUFBNC9pQnlCLElBQUUsRUFBOS9pQjtBQUFBLFFBQWlnakJDLElBQUUsRUFBQ2xULFFBQU8yUyxDQUFSLEVBQVUxUyxpQkFBZ0JnVCxDQUExQixFQUFuZ2pCO0FBQUEsUUFBZ2lqQkUsSUFBRUQsQ0FBbGlqQjtBQUFBLFFBQW9pakJFLElBQUV6VSxFQUFFLENBQUYsQ0FBdGlqQjtBQUFBLFFBQTJpakIwVSxJQUFFRCxFQUFFZCxDQUFGLEVBQUlhLENBQUosRUFBTSxDQUFDLENBQVAsRUFBUyxJQUFULEVBQWMsSUFBZCxFQUFtQixJQUFuQixDQUE3aWpCO0FBQUEsUUFBc2tqQkcsSUFBRUQsRUFBRTlVLE9BQTFrakI7QUFBQSxRQUFrbGpCZ1YsSUFBRSxFQUFDekUsTUFBSyw4QkFBTixFQUFxQ3lELFlBQVcsRUFBQ0MsYUFBWTNDLENBQWIsRUFBZTRDLGFBQVlKLENBQTNCLEVBQWhELEVBQThFSyxRQUFPLENBQUNsRSxDQUFELENBQXJGLEVBQXlGTyxRQUFPLENBQUMsVUFBRCxDQUFoRyxFQUFwbGpCO0FBQUEsUUFBa3NqQnlFLElBQUUsU0FBRkEsQ0FBRSxHQUFVO0FBQUMsVUFBSW5WLElBQUUsSUFBTjtBQUFBLFVBQVdDLElBQUVELEVBQUU0USxjQUFmO0FBQUEsVUFBOEJ0USxJQUFFTixFQUFFNlEsS0FBRixDQUFRQyxFQUFSLElBQVk3USxDQUE1QyxDQUE4QyxPQUFPSyxFQUFFLEtBQUYsRUFBUSxFQUFDeVEsYUFBWSwrQkFBYixFQUFSLEVBQXNELENBQUMvUSxFQUFFZ0YsUUFBRixDQUFXd0UsUUFBWCxJQUFxQixDQUFDeEosRUFBRWdGLFFBQUYsQ0FBV21FLFdBQWpDLEdBQTZDN0ksRUFBRSxLQUFGLEVBQVEsRUFBQ3lRLGFBQVksOEJBQWIsRUFBUixFQUFxRCxDQUFDL1EsRUFBRWlSLEVBQUYsQ0FBSyxXQUFTalIsRUFBRWtSLEVBQUYsQ0FBS2xSLEVBQUVnRixRQUFGLENBQVd5RSxhQUFYLENBQXlCLENBQXpCLEVBQTRCeUIsS0FBakMsQ0FBVCxHQUFpRCxNQUF0RCxDQUFELENBQXJELENBQTdDLEdBQW1LbEwsRUFBRWdGLFFBQUYsQ0FBV21FLFdBQVgsR0FBdUJuSixFQUFFMlUsRUFBRixFQUF2QixHQUE4QnJVLEVBQUUsYUFBRixDQUFsTSxFQUFtTk4sRUFBRWlSLEVBQUYsQ0FBSyxHQUFMLENBQW5OLEVBQTZOM1EsRUFBRSxjQUFGLEVBQWlCLEVBQUNvVSxLQUFJLE9BQUwsRUFBYXZCLEtBQUksT0FBakIsRUFBakIsQ0FBN04sQ0FBdEQsRUFBZ1UsQ0FBaFUsQ0FBUDtBQUEwVSxLQUF2a2tCO0FBQUEsUUFBd2trQmlDLElBQUUsRUFBMWtrQjtBQUFBLFFBQTZra0JDLElBQUUsRUFBQzFULFFBQU93VCxDQUFSLEVBQVV2VCxpQkFBZ0J3VCxDQUExQixFQUEva2tCO0FBQUEsUUFBNG1rQkUsS0FBR0QsQ0FBL21rQjtBQUFBLFFBQWlua0JFLEtBQUdqVixFQUFFLENBQUYsQ0FBcG5rQjtBQUFBLFFBQXlua0JrVixLQUFHRCxHQUFHTCxDQUFILEVBQUtJLEVBQUwsRUFBUSxDQUFDLENBQVQsRUFBVyxJQUFYLEVBQWdCLElBQWhCLEVBQXFCLElBQXJCLENBQTVua0I7QUFBQSxRQUF1cGtCRyxLQUFHRCxHQUFHdFYsT0FBN3BrQjtBQUFBLFFBQXFxa0J3VixLQUFHLEVBQUNuUSxPQUFNLEVBQUNvUSxNQUFLLEVBQUMzUyxNQUFLbEMsTUFBTixFQUFhOFUsVUFBUyxDQUFDLENBQXZCLEVBQU4sRUFBUCxFQUF3Q3RNLFVBQVMsRUFBQ3VNLGNBQWEsd0JBQVU7QUFBQyxpQkFBTyxLQUFLN1EsUUFBTCxDQUFjdUQsbUJBQWQsQ0FBa0MsS0FBS29OLElBQUwsQ0FBVW5QLEVBQTVDLENBQVA7QUFBdUQsU0FBaEYsRUFBaUZzUCxjQUFhLHdCQUFVO0FBQUMsaUJBQU0sQ0FBQyxDQUFDLEtBQUtILElBQUwsQ0FBVXBLLFFBQVosS0FBdUIsS0FBS3ZHLFFBQUwsQ0FBY2tFLFNBQWQsR0FBd0IsS0FBS3lNLElBQUwsQ0FBVXhJLGVBQWxDLEdBQWtELEtBQUt3SSxJQUFMLENBQVV6SCxVQUFuRixDQUFOO0FBQXFHLFNBQTlNLEVBQWpELEVBQWlRaEUsT0FBTSxFQUFDLG1CQUFrQix3QkFBU2xLLENBQVQsRUFBVztBQUFDLFdBQUMsQ0FBRCxLQUFLQSxDQUFMLElBQVEsS0FBSzJWLElBQUwsQ0FBVWxILFFBQWxCLElBQTRCLEtBQUt6SixRQUFMLENBQWNnSixXQUFkLENBQTBCLENBQUMsQ0FBM0IsRUFBNkIsS0FBSzJILElBQWxDLENBQTVCO0FBQW9FLFNBQW5HLEVBQXZRLEVBQTRXakwsU0FBUSxFQUFDcUwseUJBQXdCMVYsRUFBRyxZQUFVO0FBQUMsZUFBS3NWLElBQUwsQ0FBVXBLLFFBQVYsSUFBb0IsS0FBS3ZHLFFBQUwsQ0FBY2tCLGtCQUFsQyxHQUFxRCxLQUFLbEIsUUFBTCxDQUFjaUosY0FBZCxDQUE2QixLQUFLMEgsSUFBbEMsQ0FBckQsR0FBNkYsS0FBSzNRLFFBQUwsQ0FBY2dLLE1BQWQsQ0FBcUIsS0FBSzJHLElBQTFCLENBQTdGO0FBQTZILFNBQTNJLENBQXpCLEVBQXVLSyw4QkFBNkIzVixFQUFHLFlBQVU7QUFBQyxlQUFLMkUsUUFBTCxDQUFjaUosY0FBZCxDQUE2QixLQUFLMEgsSUFBbEM7QUFBd0MsU0FBdEQsQ0FBcE0sRUFBcFgsRUFBeHFrQjtBQUFBLFFBQTJ4bEJNLEtBQUcsRUFBQ3hGLE1BQUssd0JBQU4sRUFBK0JDLFFBQU8sQ0FBQyxVQUFELEVBQVksV0FBWixFQUF3QixlQUF4QixFQUF3QyxTQUF4QyxDQUF0QyxFQUF5RjJELFFBQU8sQ0FBQ3FCLEVBQUQsQ0FBaEcsRUFBOXhsQjtBQUFBLFFBQW80bEJRLEtBQUcsU0FBSEEsRUFBRyxHQUFVO0FBQUMsVUFBSWxXLElBQUUsSUFBTjtBQUFBLFVBQVdDLElBQUVELEVBQUU0USxjQUFmO0FBQUEsVUFBOEJ0USxJQUFFTixFQUFFNlEsS0FBRixDQUFRQyxFQUFSLElBQVk3USxDQUE1QyxDQUE4QyxPQUFPSyxFQUFFLEtBQUYsRUFBUSxFQUFDeVEsYUFBWSwyQkFBYixFQUFSLEVBQWtELENBQUN6USxFQUFFLEtBQUYsRUFBUSxFQUFDd1MsT0FBTSxDQUFDLHdCQUFELEVBQTBCLEVBQUMsb0NBQW1DOVMsRUFBRTJWLElBQUYsQ0FBT3hQLFFBQTNDLEVBQW9ELGdDQUErQm5HLEVBQUUyVixJQUFGLENBQU9wSCxVQUExRixFQUFxRyxpQ0FBZ0MsQ0FBQ3ZPLEVBQUUyVixJQUFGLENBQU9wSCxVQUE3SSxFQUF3SixvQ0FBbUN2TyxFQUFFZ0YsUUFBRixDQUFXd0csVUFBWCxDQUFzQnhMLEVBQUUyVixJQUF4QixDQUEzTCxFQUF5TixtQ0FBa0MzVixFQUFFZ0YsUUFBRixDQUFXa0UsU0FBWCxJQUFzQmxKLEVBQUUyVixJQUFGLENBQU90SSxTQUF4UixFQUFrUyxnQ0FBK0JyTixFQUFFZ0YsUUFBRixDQUFXa0UsU0FBWCxJQUFzQixFQUFFbEosRUFBRTJWLElBQUYsQ0FBT3RJLFNBQVAsSUFBa0JyTixFQUFFMlYsSUFBRixDQUFPdkksZUFBM0IsQ0FBdlYsRUFBMUIsQ0FBUCxFQUFSLEVBQSthLENBQUNwTixFQUFFMlYsSUFBRixDQUFPckssTUFBUCxHQUFjaEwsRUFBRSxLQUFGLEVBQVEsRUFBQ3lRLGFBQVksMENBQWIsRUFBUixFQUFpRSxDQUFDL1EsRUFBRWlSLEVBQUYsQ0FBSyxHQUFMLENBQUQsQ0FBakUsQ0FBZCxHQUE0RjNRLEVBQUUsS0FBRixFQUFRLEVBQUN5USxhQUFZLHNDQUFiLEVBQW9Ea0MsSUFBRyxFQUFDUSxXQUFVelQsRUFBRWdXLDRCQUFiLEVBQXZELEVBQVIsRUFBMkcsQ0FBQzFWLEVBQUUsWUFBRixFQUFlLEVBQUM4UyxPQUFNLEVBQUMzQyxNQUFLLHVDQUFOLEVBQThDK0QsUUFBTyxFQUFyRCxFQUFQLEVBQWYsRUFBZ0YsQ0FBQ2xVLEVBQUUsTUFBRixFQUFTLEVBQUN3UyxPQUFNLENBQUMsOEJBQUQsRUFBZ0MsRUFBQyx5Q0FBd0M5UyxFQUFFOFYsWUFBM0MsRUFBaEMsQ0FBUCxFQUFULENBQUQsQ0FBaEYsQ0FBRCxDQUEzRyxFQUE0UyxDQUE1UyxDQUE3RixFQUE0WTlWLEVBQUVpUixFQUFGLENBQUssR0FBTCxDQUE1WSxFQUFzWjNRLEVBQUUsS0FBRixFQUFRLEVBQUN5USxhQUFZLCtCQUFiLEVBQTZDa0MsSUFBRyxFQUFDUSxXQUFVelQsRUFBRStWLHVCQUFiLEVBQWhELEVBQVIsRUFBK0YsQ0FBQy9WLEVBQUVnRixRQUFGLENBQVdnQyxRQUFYLElBQXFCLENBQUNoSCxFQUFFZ0YsUUFBRixDQUFXa0Isa0JBQWpDLEdBQW9ENUYsRUFBRSxLQUFGLEVBQVEsRUFBQ3lRLGFBQVksa0NBQWIsRUFBUixFQUF5RCxDQUFDelEsRUFBRSxNQUFGLEVBQVMsRUFBQ3dTLE9BQU0sQ0FBQywwQkFBRCxFQUE0QixFQUFDLHFDQUFvQzlTLEVBQUU2VixZQUFGLEtBQWlCN1YsRUFBRW1GLE9BQXhELEVBQWdFLDJDQUEwQ25GLEVBQUU2VixZQUFGLEtBQWlCN1YsRUFBRWtGLGFBQTdILEVBQTJJLHVDQUFzQ2xGLEVBQUU2VixZQUFGLEtBQWlCN1YsRUFBRWlGLFNBQXBNLEVBQTVCLENBQVAsRUFBVCxFQUE2UCxDQUFDM0UsRUFBRSxNQUFGLEVBQVMsRUFBQ3lRLGFBQVksK0JBQWIsRUFBVCxDQUFELENBQTdQLENBQUQsQ0FBekQsQ0FBcEQsR0FBd2EvUSxFQUFFMlUsRUFBRixFQUF6YSxFQUFnYjNVLEVBQUVpUixFQUFGLENBQUssR0FBTCxDQUFoYixFQUEwYjNRLEVBQUUsT0FBRixFQUFVLEVBQUN5USxhQUFZLHVCQUFiLEVBQVYsRUFBZ0QsQ0FBQy9RLEVBQUVpUixFQUFGLENBQUssZUFBYWpSLEVBQUVrUixFQUFGLENBQUtsUixFQUFFMlYsSUFBRixDQUFPekssS0FBWixDQUFiLEdBQWdDLFlBQXJDLENBQUQsRUFBb0RsTCxFQUFFMlYsSUFBRixDQUFPcEssUUFBUCxHQUFnQmpMLEVBQUUsTUFBRixFQUFTLEVBQUN5USxhQUFZLHVCQUFiLEVBQVQsRUFBK0MsQ0FBQyxDQUFDL1EsRUFBRWdGLFFBQUYsQ0FBV2tFLFNBQVosSUFBdUJsSixFQUFFZ0YsUUFBRixDQUFXNEMsU0FBbEMsR0FBNEMsQ0FBQzVILEVBQUVpUixFQUFGLENBQUssTUFBSWpSLEVBQUVrUixFQUFGLENBQUtsUixFQUFFMlYsSUFBRixDQUFPL0csS0FBUCxDQUFhNU8sRUFBRWdGLFFBQUYsQ0FBVzZDLFdBQXhCLENBQUwsQ0FBSixHQUErQyxHQUFwRCxDQUFELENBQTVDLEdBQXVHN0gsRUFBRWdGLFFBQUYsQ0FBV2tFLFNBQVgsSUFBc0JsSixFQUFFZ0YsUUFBRixDQUFXaUYseUJBQWpDLEdBQTJELENBQUNqSyxFQUFFaVIsRUFBRixDQUFLLE1BQUlqUixFQUFFa1IsRUFBRixDQUFLbFIsRUFBRWdGLFFBQUYsQ0FBV2lFLGNBQVgsQ0FBMEJqSixFQUFFMlYsSUFBRixDQUFPblAsRUFBakMsRUFBcUN4RyxFQUFFZ0YsUUFBRixDQUFXNkMsV0FBaEQsQ0FBTCxDQUFKLEdBQXVFLEdBQTVFLENBQUQsQ0FBM0QsR0FBOEk3SCxFQUFFMlUsRUFBRixFQUF0UCxDQUEvQyxFQUE2UyxDQUE3UyxDQUFoQixHQUFnVTNVLEVBQUUyVSxFQUFGLEVBQXBYLENBQWhELENBQTFiLENBQS9GLENBQXRaLENBQS9hLENBQUQsRUFBZ3hEM1UsRUFBRWlSLEVBQUYsQ0FBSyxHQUFMLENBQWh4RCxFQUEweERqUixFQUFFOFYsWUFBRixHQUFleFYsRUFBRSxLQUFGLEVBQVEsRUFBQ3lRLGFBQVksc0JBQWIsRUFBUixFQUE2QyxDQUFDL1EsRUFBRTJWLElBQUYsQ0FBT2xILFFBQVAsR0FBZ0IsQ0FBQ3pPLEVBQUUyVixJQUFGLENBQU9oSyxRQUFQLENBQWdCdEksTUFBaEIsR0FBdUJyRCxFQUFFeVUsRUFBRixDQUFLelUsRUFBRTJWLElBQUYsQ0FBT2hLLFFBQVosRUFBc0IsVUFBUzNMLENBQVQsRUFBVztBQUFDLGVBQU9NLEVBQUUsd0JBQUYsRUFBMkIsRUFBQ29VLEtBQUkxVSxFQUFFd0csRUFBUCxFQUFVNE0sT0FBTSxFQUFDdUMsTUFBSzNWLENBQU4sRUFBaEIsRUFBM0IsQ0FBUDtBQUE2RCxPQUEvRixDQUF2QixHQUF5SE0sRUFBRSxLQUFGLEVBQVEsRUFBQ3lRLGFBQVksaUNBQWIsRUFBUixFQUF3RCxDQUFDL1EsRUFBRW1XLEVBQUYsQ0FBSyxDQUFMLENBQUQsRUFBU25XLEVBQUVpUixFQUFGLENBQUssR0FBTCxDQUFULEVBQW1CM1EsRUFBRSxNQUFGLEVBQVMsRUFBQ3lRLGFBQVksc0NBQWIsRUFBVCxFQUE4RCxDQUFDL1EsRUFBRWlSLEVBQUYsQ0FBS2pSLEVBQUVrUixFQUFGLENBQUtsUixFQUFFZ0YsUUFBRixDQUFXaUMsY0FBaEIsQ0FBTCxDQUFELENBQTlELENBQW5CLENBQXhELENBQTFILENBQWhCLEdBQStUakgsRUFBRTJWLElBQUYsQ0FBT2pILFNBQVAsR0FBaUJwTyxFQUFFLEtBQUYsRUFBUSxFQUFDeVEsYUFBWSw2QkFBYixFQUFSLEVBQW9ELENBQUMvUSxFQUFFbVcsRUFBRixDQUFLLENBQUwsQ0FBRCxFQUFTblcsRUFBRWlSLEVBQUYsQ0FBSyxHQUFMLENBQVQsRUFBbUIzUSxFQUFFLE1BQUYsRUFBUyxFQUFDeVEsYUFBWSxrQ0FBYixFQUFULEVBQTBELENBQUMvUSxFQUFFaVIsRUFBRixDQUFLalIsRUFBRWtSLEVBQUYsQ0FBS2xSLEVBQUVnRixRQUFGLENBQVc2QixXQUFoQixDQUFMLENBQUQsQ0FBMUQsQ0FBbkIsQ0FBcEQsQ0FBakIsR0FBMEw3RyxFQUFFMlYsSUFBRixDQUFPaEgsb0JBQVAsR0FBNEJyTyxFQUFFLEtBQUYsRUFBUSxFQUFDeVEsYUFBWSwyQkFBYixFQUFSLEVBQWtELENBQUMvUSxFQUFFbVcsRUFBRixDQUFLLENBQUwsQ0FBRCxFQUFTblcsRUFBRWlSLEVBQUYsQ0FBSyxHQUFMLENBQVQsRUFBbUIzUSxFQUFFLE1BQUYsRUFBUyxFQUFDeVEsYUFBWSxnQ0FBYixFQUFULEVBQXdELENBQUMvUSxFQUFFaVIsRUFBRixDQUFLLGVBQWFqUixFQUFFa1IsRUFBRixDQUFLbFIsRUFBRTJWLElBQUYsQ0FBT2hILG9CQUFaLENBQWIsR0FBK0MsWUFBcEQsQ0FBRCxFQUFtRXJPLEVBQUUsR0FBRixFQUFNLEVBQUN5USxhQUFZLHVCQUFiLEVBQXFDcUMsT0FBTSxFQUFDZ0QsT0FBTXBXLEVBQUVnRixRQUFGLENBQVcwQyxVQUFsQixFQUEzQyxFQUF5RXVMLElBQUcsRUFBQ29ELE9BQU0sZUFBU3BXLENBQVQsRUFBVztBQUFDRCxjQUFFZ0YsUUFBRixDQUFXZ0osV0FBWCxDQUF1QixDQUFDLENBQXhCLEVBQTBCaE8sRUFBRTJWLElBQTVCO0FBQWtDLFdBQXJELEVBQTVFLEVBQU4sRUFBMEksQ0FBQzNWLEVBQUVpUixFQUFGLENBQUssaUJBQWVqUixFQUFFa1IsRUFBRixDQUFLbFIsRUFBRWdGLFFBQUYsQ0FBV3lDLFNBQWhCLENBQWYsR0FBMEMsWUFBL0MsQ0FBRCxDQUExSSxDQUFuRSxDQUF4RCxDQUFuQixDQUFsRCxDQUE1QixHQUEwYXpILEVBQUUyVSxFQUFGLEVBQXA2QixDQUE3QyxFQUF5OUIsQ0FBejlCLENBQWYsR0FBMitCM1UsRUFBRTJVLEVBQUYsRUFBcndGLENBQWxELENBQVA7QUFBdTBGLEtBQXZ3ckI7QUFBQSxRQUF3d3JCMkIsS0FBRyxDQUFDLFlBQVU7QUFBQyxVQUFJdFcsSUFBRSxJQUFOO0FBQUEsVUFBV0MsSUFBRUQsRUFBRTRRLGNBQWY7QUFBQSxVQUE4QnRRLElBQUVOLEVBQUU2USxLQUFGLENBQVFDLEVBQVIsSUFBWTdRLENBQTVDLENBQThDLE9BQU9LLEVBQUUsS0FBRixFQUFRLEVBQUN5USxhQUFZLDhCQUFiLEVBQVIsRUFBcUQsQ0FBQ3pRLEVBQUUsTUFBRixFQUFTLEVBQUN5USxhQUFZLDhCQUFiLEVBQVQsQ0FBRCxDQUFyRCxDQUFQO0FBQXNILEtBQWhMLEVBQWlMLFlBQVU7QUFBQyxVQUFJL1EsSUFBRSxJQUFOO0FBQUEsVUFBV0MsSUFBRUQsRUFBRTRRLGNBQWY7QUFBQSxVQUE4QnRRLElBQUVOLEVBQUU2USxLQUFGLENBQVFDLEVBQVIsSUFBWTdRLENBQTVDLENBQThDLE9BQU9LLEVBQUUsS0FBRixFQUFRLEVBQUN5USxhQUFZLDhCQUFiLEVBQVIsRUFBcUQsQ0FBQ3pRLEVBQUUsTUFBRixFQUFTLEVBQUN5USxhQUFZLDZCQUFiLEVBQVQsQ0FBRCxDQUFyRCxDQUFQO0FBQXFILEtBQS9WLEVBQWdXLFlBQVU7QUFBQyxVQUFJL1EsSUFBRSxJQUFOO0FBQUEsVUFBV0MsSUFBRUQsRUFBRTRRLGNBQWY7QUFBQSxVQUE4QnRRLElBQUVOLEVBQUU2USxLQUFGLENBQVFDLEVBQVIsSUFBWTdRLENBQTVDLENBQThDLE9BQU9LLEVBQUUsS0FBRixFQUFRLEVBQUN5USxhQUFZLDhCQUFiLEVBQVIsRUFBcUQsQ0FBQ3pRLEVBQUUsTUFBRixFQUFTLEVBQUN5USxhQUFZLDRCQUFiLEVBQVQsQ0FBRCxDQUFyRCxDQUFQO0FBQW9ILEtBQTdnQixDQUEzd3JCO0FBQUEsUUFBMHhzQndGLEtBQUcsRUFBQzVVLFFBQU91VSxFQUFSLEVBQVd0VSxpQkFBZ0IwVSxFQUEzQixFQUE3eHNCO0FBQUEsUUFBNHpzQkUsS0FBR0QsRUFBL3pzQjtBQUFBLFFBQWswc0JFLEtBQUduVyxFQUFFLENBQUYsQ0FBcjBzQjtBQUFBLFFBQTAwc0JvVyxLQUFHRCxHQUFHUixFQUFILEVBQU1PLEVBQU4sRUFBUyxDQUFDLENBQVYsRUFBWSxJQUFaLEVBQWlCLElBQWpCLEVBQXNCLElBQXRCLENBQTcwc0I7QUFBQSxRQUF5MnNCRyxLQUFHRCxHQUFHeFcsT0FBLzJzQjtBQUFBLFFBQXUzc0IwVyxLQUFHLEVBQUNuRyxNQUFLLGdCQUFOLEVBQXVCeUQsWUFBVyxFQUFDMkMsa0JBQWlCRixFQUFsQixFQUFsQyxFQUF3RHRDLFFBQU8sQ0FBQ3ZQLENBQUQsQ0FBL0QsRUFBbUV3RSxVQUFTLEVBQUN3TixnQkFBZSwwQkFBVTtBQUFDLGlCQUFPLEtBQUs5UCxRQUFMLEdBQWNpTyxDQUFkLEdBQWdCUSxFQUF2QjtBQUEwQixTQUFyRCxFQUE1RSxFQUExM3NCO0FBQUEsUUFBOC9zQnNCLEtBQUcsU0FBSEEsRUFBRyxHQUFVO0FBQUMsVUFBSS9XLElBQUUsSUFBTjtBQUFBLFVBQVdDLElBQUVELEVBQUU0USxjQUFmO0FBQUEsVUFBOEJ0USxJQUFFTixFQUFFNlEsS0FBRixDQUFRQyxFQUFSLElBQVk3USxDQUE1QyxDQUE4QyxPQUFPSyxFQUFFLEtBQUYsRUFBUSxFQUFDNlMsS0FBSSxTQUFMLEVBQWVMLE9BQU0sQ0FBQyxnQkFBRCxFQUFrQixFQUFDLDBCQUF5QixDQUFDOVMsRUFBRWdILFFBQTdCLEVBQXNDLHlCQUF3QmhILEVBQUVnSCxRQUFoRSxFQUF5RSw4QkFBNkJoSCxFQUFFMkgsVUFBeEcsRUFBbUgsNEJBQTJCM0gsRUFBRW1HLFFBQWhKLEVBQXlKLDJCQUEwQm5HLEVBQUVxSSxTQUFyTCxFQUErTCw2QkFBNEJySSxFQUFFd0osUUFBN04sRUFBc08sd0JBQXVCeEosRUFBRXNJLE1BQS9QLEVBQXNRLDhCQUE2QixZQUFVdEksRUFBRTZJLHNCQUEvUyxFQUFzVSw4QkFBNkIsWUFBVTdJLEVBQUU2SSxzQkFBL1csRUFBc1kseUNBQXdDN0ksRUFBRWtHLGtCQUFoYixFQUFsQixDQUFyQixFQUE0ZStNLElBQUcsRUFBQ1EsV0FBVXpULEVBQUV1TSxlQUFiLEVBQS9lLEVBQVIsRUFBc2hCLENBQUNqTSxFQUFFLEtBQUYsRUFBUSxFQUFDeVEsYUFBWSx5QkFBYixFQUFSLEVBQWdELENBQUN6USxFQUFFTixFQUFFOFcsY0FBSixFQUFtQixFQUFDM0QsS0FBSSxPQUFMLEVBQWFvQixLQUFJLFdBQWpCLEVBQW5CLENBQUQsRUFBbUR2VSxFQUFFaVIsRUFBRixDQUFLLEdBQUwsQ0FBbkQsRUFBNkRqUixFQUFFZ0ssbUJBQUYsR0FBc0IxSixFQUFFLEtBQUYsRUFBUSxFQUFDeVEsYUFBWSx1QkFBYixFQUFxQ3FDLE9BQU0sRUFBQ2dELE9BQU1wVyxFQUFFZ0gsUUFBRixHQUFXaEgsRUFBRTZGLFlBQWIsR0FBMEI3RixFQUFFK0YsY0FBbkMsRUFBM0MsRUFBOEZrTixJQUFHLEVBQUNRLFdBQVV6VCxFQUFFOE0sc0JBQWIsRUFBakcsRUFBUixFQUErSSxDQUFDOU0sRUFBRWlSLEVBQUYsQ0FBSyxHQUFMLENBQUQsQ0FBL0ksQ0FBdEIsR0FBa0xqUixFQUFFMlUsRUFBRixFQUEvTyxFQUFzUDNVLEVBQUVpUixFQUFGLENBQUssR0FBTCxDQUF0UCxFQUFnUTNRLEVBQUUsS0FBRixFQUFRLEVBQUN5USxhQUFZLCtCQUFiLEVBQTZDa0MsSUFBRyxFQUFDUSxXQUFVelQsRUFBRWdOLHNCQUFiLEVBQWhELEVBQVIsRUFBOEYsQ0FBQzFNLEVBQUUsTUFBRixFQUFTLEVBQUN3UyxPQUFNLENBQUMsdUJBQUQsRUFBeUIsRUFBQyxrQ0FBaUM5UyxFQUFFc0ksTUFBcEMsRUFBekIsQ0FBUCxFQUFULENBQUQsQ0FBOUYsQ0FBaFEsQ0FBaEQsRUFBMGUsQ0FBMWUsQ0FBRCxFQUE4ZXRJLEVBQUVpUixFQUFGLENBQUssR0FBTCxDQUE5ZSxFQUF3ZmpSLEVBQUVzSSxNQUFGLEdBQVNoSSxFQUFFLEtBQUYsRUFBUSxFQUFDNlMsS0FBSSxNQUFMLEVBQVlwQyxhQUFZLHNCQUF4QixFQUErQ3dDLE9BQU0sRUFBQ3hNLFdBQVUvRyxFQUFFNEksZUFBRixHQUFrQixJQUE3QixFQUFyRCxFQUFSLEVBQWlHLENBQUM1SSxFQUFFOEksaUJBQUYsR0FBb0IsQ0FBQzlJLEVBQUVrSixTQUFGLElBQWFsSixFQUFFMkksZUFBZixHQUErQnJJLEVBQUUsS0FBRixFQUFRLEVBQUN5USxhQUFZLGdDQUFiLEVBQVIsRUFBdUQsQ0FBQy9RLEVBQUVtVyxFQUFGLENBQUssQ0FBTCxDQUFELEVBQVNuVyxFQUFFaVIsRUFBRixDQUFLLEdBQUwsQ0FBVCxFQUFtQjNRLEVBQUUsTUFBRixFQUFTLEVBQUN5USxhQUFZLHFDQUFiLEVBQVQsRUFBNkQsQ0FBQy9RLEVBQUVpUixFQUFGLENBQUtqUixFQUFFa1IsRUFBRixDQUFLbFIsRUFBRWtILGFBQVAsQ0FBTCxDQUFELENBQTdELENBQW5CLENBQXZELENBQS9CLEdBQXVNLE1BQUlsSCxFQUFFMEksaUJBQUYsQ0FBb0JyRixNQUF4QixHQUErQi9DLEVBQUUsS0FBRixFQUFRLEVBQUN5USxhQUFZLGdDQUFiLEVBQVIsRUFBdUQsQ0FBQy9RLEVBQUVtVyxFQUFGLENBQUssQ0FBTCxDQUFELEVBQVNuVyxFQUFFaVIsRUFBRixDQUFLLEdBQUwsQ0FBVCxFQUFtQjNRLEVBQUUsTUFBRixFQUFTLEVBQUN5USxhQUFZLHFDQUFiLEVBQVQsRUFBNkQsQ0FBQy9RLEVBQUVpUixFQUFGLENBQUtqUixFQUFFa1IsRUFBRixDQUFLbFIsRUFBRW1ILGFBQVAsQ0FBTCxDQUFELENBQTdELENBQW5CLENBQXZELENBQS9CLEdBQXVNN0csRUFBRSxLQUFGLEVBQVEsRUFBQ3lRLGFBQVksc0JBQWIsRUFBUixFQUE2Qy9RLEVBQUV5VSxFQUFGLENBQUt6VSxFQUFFMEksaUJBQVAsRUFBMEIsVUFBUzFJLENBQVQsRUFBVztBQUFDLGVBQU9NLEVBQUUsbUJBQUYsRUFBc0IsRUFBQ29VLEtBQUkxVSxFQUFFd0csRUFBUCxFQUFVNE0sT0FBTSxFQUFDdUMsTUFBSzNWLENBQU4sRUFBaEIsRUFBdEIsQ0FBUDtBQUF3RCxPQUE5RixDQUE3QyxDQUEvWSxDQUFwQixHQUFtakIsQ0FBQ0EsRUFBRStJLGtCQUFGLEdBQXFCekksRUFBRSxLQUFGLEVBQVEsRUFBQ3lRLGFBQVksNkJBQWIsRUFBUixFQUFvRCxDQUFDL1EsRUFBRW1XLEVBQUYsQ0FBSyxDQUFMLENBQUQsRUFBU25XLEVBQUVpUixFQUFGLENBQUssR0FBTCxDQUFULEVBQW1CM1EsRUFBRSxNQUFGLEVBQVMsRUFBQ3lRLGFBQVksa0NBQWIsRUFBVCxFQUEwRCxDQUFDL1EsRUFBRWlSLEVBQUYsQ0FBS2pSLEVBQUVrUixFQUFGLENBQUtsUixFQUFFNkcsV0FBUCxDQUFMLENBQUQsQ0FBMUQsQ0FBbkIsQ0FBcEQsQ0FBckIsR0FBcUw3RyxFQUFFZ0osdUJBQUYsR0FBMEIxSSxFQUFFLEtBQUYsRUFBUSxFQUFDeVEsYUFBWSwyQkFBYixFQUFSLEVBQWtELENBQUMvUSxFQUFFbVcsRUFBRixDQUFLLENBQUwsQ0FBRCxFQUFTblcsRUFBRWlSLEVBQUYsQ0FBSyxHQUFMLENBQVQsRUFBbUIzUSxFQUFFLE1BQUYsRUFBUyxFQUFDeVEsYUFBWSxnQ0FBYixFQUFULEVBQXdELENBQUMvUSxFQUFFaVIsRUFBRixDQUFLLHlDQUF1Q2pSLEVBQUVrUixFQUFGLENBQUtsUixFQUFFZ0osdUJBQVAsQ0FBdkMsR0FBdUUsZUFBNUUsQ0FBRCxFQUE4RjFJLEVBQUUsR0FBRixFQUFNLEVBQUN5USxhQUFZLHVCQUFiLEVBQXFDcUMsT0FBTSxFQUFDZ0QsT0FBTXBXLEVBQUUwSCxVQUFULEVBQTNDLEVBQWdFdUwsSUFBRyxFQUFDb0QsT0FBTSxlQUFTcFcsQ0FBVCxFQUFXO0FBQUNELGNBQUVnTyxXQUFGLENBQWMsQ0FBQyxDQUFmO0FBQWtCLFdBQXJDLEVBQW5FLEVBQU4sRUFBaUgsQ0FBQ2hPLEVBQUVpUixFQUFGLENBQUssbUJBQWlCalIsRUFBRWtSLEVBQUYsQ0FBS2xSLEVBQUV5SCxTQUFQLENBQWpCLEdBQW1DLGNBQXhDLENBQUQsQ0FBakgsQ0FBOUYsQ0FBeEQsQ0FBbkIsQ0FBbEQsQ0FBMUIsR0FBcWF6SCxFQUFFMlUsRUFBRixFQUEzbEIsQ0FBcGpCLENBQWpHLEVBQXl2QyxDQUF6dkMsQ0FBVCxHQUFxd0MzVSxFQUFFMlUsRUFBRixFQUE3dkQsQ0FBdGhCLENBQVA7QUFBbXlFLEtBQTcxeEI7QUFBQSxRQUE4MXhCcUMsS0FBRyxDQUFDLFlBQVU7QUFBQyxVQUFJaFgsSUFBRSxJQUFOO0FBQUEsVUFBV0MsSUFBRUQsRUFBRTRRLGNBQWY7QUFBQSxVQUE4QnRRLElBQUVOLEVBQUU2USxLQUFGLENBQVFDLEVBQVIsSUFBWTdRLENBQTVDLENBQThDLE9BQU9LLEVBQUUsS0FBRixFQUFRLEVBQUN5USxhQUFZLDhCQUFiLEVBQVIsRUFBcUQsQ0FBQ3pRLEVBQUUsTUFBRixFQUFTLEVBQUN5USxhQUFZLDhCQUFiLEVBQVQsQ0FBRCxDQUFyRCxDQUFQO0FBQXNILEtBQWhMLEVBQWlMLFlBQVU7QUFBQyxVQUFJL1EsSUFBRSxJQUFOO0FBQUEsVUFBV0MsSUFBRUQsRUFBRTRRLGNBQWY7QUFBQSxVQUE4QnRRLElBQUVOLEVBQUU2USxLQUFGLENBQVFDLEVBQVIsSUFBWTdRLENBQTVDLENBQThDLE9BQU9LLEVBQUUsS0FBRixFQUFRLEVBQUN5USxhQUFZLDhCQUFiLEVBQVIsRUFBcUQsQ0FBQ3pRLEVBQUUsTUFBRixFQUFTLEVBQUN5USxhQUFZLDhCQUFiLEVBQVQsQ0FBRCxDQUFyRCxDQUFQO0FBQXNILEtBQWhXLEVBQWlXLFlBQVU7QUFBQyxVQUFJL1EsSUFBRSxJQUFOO0FBQUEsVUFBV0MsSUFBRUQsRUFBRTRRLGNBQWY7QUFBQSxVQUE4QnRRLElBQUVOLEVBQUU2USxLQUFGLENBQVFDLEVBQVIsSUFBWTdRLENBQTVDLENBQThDLE9BQU9LLEVBQUUsS0FBRixFQUFRLEVBQUN5USxhQUFZLDhCQUFiLEVBQVIsRUFBcUQsQ0FBQ3pRLEVBQUUsTUFBRixFQUFTLEVBQUN5USxhQUFZLDZCQUFiLEVBQVQsQ0FBRCxDQUFyRCxDQUFQO0FBQXFILEtBQS9nQixFQUFnaEIsWUFBVTtBQUFDLFVBQUkvUSxJQUFFLElBQU47QUFBQSxVQUFXQyxJQUFFRCxFQUFFNFEsY0FBZjtBQUFBLFVBQThCdFEsSUFBRU4sRUFBRTZRLEtBQUYsQ0FBUUMsRUFBUixJQUFZN1EsQ0FBNUMsQ0FBOEMsT0FBT0ssRUFBRSxLQUFGLEVBQVEsRUFBQ3lRLGFBQVksOEJBQWIsRUFBUixFQUFxRCxDQUFDelEsRUFBRSxNQUFGLEVBQVMsRUFBQ3lRLGFBQVksNEJBQWIsRUFBVCxDQUFELENBQXJELENBQVA7QUFBb0gsS0FBN3JCLENBQWoyeEI7QUFBQSxRQUFnaXpCNEQsS0FBRyxFQUFDaFQsUUFBT29WLEVBQVIsRUFBV25WLGlCQUFnQm9WLEVBQTNCLEVBQW5pekI7QUFBQSxRQUFra3pCQyxLQUFHdEMsRUFBcmt6QjtBQUFBLFFBQXdrekJ1QyxLQUFHNVcsRUFBRSxDQUFGLENBQTNrekI7QUFBQSxRQUFnbHpCNlcsS0FBRzVTLENBQW5sekI7QUFBQSxRQUFxbHpCNlMsS0FBR0YsR0FBR04sRUFBSCxFQUFNSyxFQUFOLEVBQVMsQ0FBQyxDQUFWLEVBQVlFLEVBQVosRUFBZSxJQUFmLEVBQW9CLElBQXBCLENBQXhsekI7QUFBQSxRQUFrbnpCRSxLQUFHRCxHQUFHbFgsT0FBeG56QixDQUFnb3pCSSxFQUFFTSxDQUFGLENBQUlYLENBQUosRUFBTSxZQUFOLEVBQW9CLFlBQVU7QUFBQyxhQUFPb1gsRUFBUDtBQUFVLEtBQXpDLEdBQTRDL1csRUFBRU0sQ0FBRixDQUFJWCxDQUFKLEVBQU0saUJBQU4sRUFBeUIsWUFBVTtBQUFDLGFBQU82RSxDQUFQO0FBQVMsS0FBN0MsQ0FBNUMsRUFBNEZ4RSxFQUFFTSxDQUFGLENBQUlYLENBQUosRUFBTSxhQUFOLEVBQXFCLFlBQVU7QUFBQyxhQUFPeVYsRUFBUDtBQUFVLEtBQTFDLENBQTVGLEVBQXlJcFYsRUFBRU0sQ0FBRixDQUFJWCxDQUFKLEVBQU0sWUFBTixFQUFvQixZQUFVO0FBQUMsYUFBT2tRLENBQVA7QUFBUyxLQUF4QyxDQUF6SSxDQUFvTGxRLEVBQUVtQixPQUFGLEdBQVVpVyxFQUFWO0FBQWEsR0FBNXk0QixFQUEreTRCLFVBQVNyWCxDQUFULEVBQVdDLENBQVgsRUFBYSxDQUFFLENBQTl6NEIsRUFBaTA0QixVQUFTRCxDQUFULEVBQVdDLENBQVgsRUFBYUssQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdMLENBQVgsRUFBYUMsQ0FBYixFQUFlO0FBQUMsVUFBSUssSUFBRUwsRUFBRW9ELE1BQVI7QUFBQSxVQUFlaEQsSUFBRUwsRUFBRXFELE1BQW5CLENBQTBCLElBQUdoRCxJQUFFQyxDQUFMLEVBQU8sT0FBTSxDQUFDLENBQVAsQ0FBUyxJQUFHRCxNQUFJQyxDQUFQLEVBQVMsT0FBT04sTUFBSUMsQ0FBWCxDQUFhRCxHQUFFLEtBQUksSUFBSU8sSUFBRSxDQUFOLEVBQVFNLElBQUUsQ0FBZCxFQUFnQk4sSUFBRUYsQ0FBbEIsRUFBb0JFLEdBQXBCLEVBQXdCO0FBQUMsYUFBSSxJQUFJaUIsSUFBRXhCLEVBQUVzWCxVQUFGLENBQWEvVyxDQUFiLENBQVYsRUFBMEJNLElBQUVQLENBQTVCO0FBQStCLGNBQUdMLEVBQUVxWCxVQUFGLENBQWF6VyxHQUFiLE1BQW9CVyxDQUF2QixFQUF5QixTQUFTeEIsQ0FBVDtBQUF4RCxTQUFtRSxPQUFNLENBQUMsQ0FBUDtBQUFTLGNBQU0sQ0FBQyxDQUFQO0FBQVMsT0FBRUUsT0FBRixHQUFVRyxDQUFWO0FBQVksR0FBMWk1QixFQUE2aTVCLFVBQVNMLENBQVQsRUFBV0MsQ0FBWCxFQUFhSyxDQUFiLEVBQWU7QUFBQyxhQUFTRCxDQUFULENBQVdMLENBQVgsRUFBYUMsQ0FBYixFQUFlSyxDQUFmLEVBQWlCO0FBQUMsZUFBU0QsQ0FBVCxDQUFXSixDQUFYLEVBQWE7QUFBQyxZQUFJSyxJQUFFOEQsQ0FBTjtBQUFBLFlBQVEvRCxJQUFFa0UsQ0FBVixDQUFZLE9BQU9ILElBQUVHLElBQUUsS0FBSyxDQUFULEVBQVdyQixJQUFFakQsQ0FBYixFQUFld0UsSUFBRXpFLEVBQUV1WCxLQUFGLENBQVFsWCxDQUFSLEVBQVVDLENBQVYsQ0FBeEI7QUFBcUMsZ0JBQVMwQixDQUFULENBQVdoQyxDQUFYLEVBQWE7QUFBQyxlQUFPa0QsSUFBRWxELENBQUYsRUFBSTBFLElBQUU4UyxXQUFXalcsQ0FBWCxFQUFhdEIsQ0FBYixDQUFOLEVBQXNCc0QsSUFBRWxELEVBQUVMLENBQUYsQ0FBRixHQUFPeUUsQ0FBcEM7QUFBc0MsZ0JBQVM3RCxDQUFULENBQVdaLENBQVgsRUFBYTtBQUFDLFlBQUlNLElBQUVOLElBQUUyRSxDQUFSO0FBQUEsWUFBVXRFLElBQUVMLElBQUVrRCxDQUFkO0FBQUEsWUFBZ0IzQyxJQUFFTixJQUFFSyxDQUFwQixDQUFzQixPQUFPZ0QsSUFBRTNDLEVBQUVKLENBQUYsRUFBSWlFLElBQUVuRSxDQUFOLENBQUYsR0FBV0UsQ0FBbEI7QUFBb0IsZ0JBQVNpQyxDQUFULENBQVd4QyxDQUFYLEVBQWE7QUFBQyxZQUFJTSxJQUFFTixJQUFFMkUsQ0FBUjtBQUFBLFlBQVV0RSxJQUFFTCxJQUFFa0QsQ0FBZCxDQUFnQixPQUFPLEtBQUssQ0FBTCxLQUFTeUIsQ0FBVCxJQUFZckUsS0FBR0wsQ0FBZixJQUFrQkssSUFBRSxDQUFwQixJQUF1QmdELEtBQUdqRCxLQUFHbUUsQ0FBcEM7QUFBc0MsZ0JBQVNqRCxDQUFULEdBQVk7QUFBQyxZQUFJdkIsSUFBRWEsR0FBTixDQUFVLElBQUcyQixFQUFFeEMsQ0FBRixDQUFILEVBQVEsT0FBTzZELEVBQUU3RCxDQUFGLENBQVAsQ0FBWTBFLElBQUU4UyxXQUFXalcsQ0FBWCxFQUFhWCxFQUFFWixDQUFGLENBQWIsQ0FBRjtBQUFxQixnQkFBUzZELENBQVQsQ0FBVzdELENBQVgsRUFBYTtBQUFDLGVBQU8wRSxJQUFFLEtBQUssQ0FBUCxFQUFTSSxLQUFHVixDQUFILEdBQUsvRCxFQUFFTCxDQUFGLENBQUwsSUFBV29FLElBQUVHLElBQUUsS0FBSyxDQUFULEVBQVdFLENBQXRCLENBQWhCO0FBQXlDLGdCQUFTVCxDQUFULEdBQVk7QUFBQyxhQUFLLENBQUwsS0FBU1UsQ0FBVCxJQUFZK1MsYUFBYS9TLENBQWIsQ0FBWixFQUE0QnhCLElBQUUsQ0FBOUIsRUFBZ0NrQixJQUFFTyxJQUFFSixJQUFFRyxJQUFFLEtBQUssQ0FBN0M7QUFBK0MsZ0JBQVNQLENBQVQsR0FBWTtBQUFDLGVBQU8sS0FBSyxDQUFMLEtBQVNPLENBQVQsR0FBV0QsQ0FBWCxHQUFhWixFQUFFaEQsR0FBRixDQUFwQjtBQUEyQixnQkFBU0gsQ0FBVCxHQUFZO0FBQUMsWUFBSVYsSUFBRWEsR0FBTjtBQUFBLFlBQVVQLElBQUVrQyxFQUFFeEMsQ0FBRixDQUFaLENBQWlCLElBQUdvRSxJQUFFc1QsU0FBRixFQUFZblQsSUFBRSxJQUFkLEVBQW1CSSxJQUFFM0UsQ0FBckIsRUFBdUJNLENBQTFCLEVBQTRCO0FBQUMsY0FBRyxLQUFLLENBQUwsS0FBU29FLENBQVosRUFBYyxPQUFPMUMsRUFBRTJDLENBQUYsQ0FBUCxDQUFZLElBQUdyQixDQUFILEVBQUssT0FBT29CLElBQUU4UyxXQUFXalcsQ0FBWCxFQUFhdEIsQ0FBYixDQUFGLEVBQWtCSSxFQUFFc0UsQ0FBRixDQUF6QjtBQUE4QixnQkFBTyxLQUFLLENBQUwsS0FBU0QsQ0FBVCxLQUFhQSxJQUFFOFMsV0FBV2pXLENBQVgsRUFBYXRCLENBQWIsQ0FBZixHQUFnQ3dFLENBQXZDO0FBQXlDLFdBQUlMLENBQUo7QUFBQSxVQUFNRyxDQUFOO0FBQUEsVUFBUUMsQ0FBUjtBQUFBLFVBQVVDLENBQVY7QUFBQSxVQUFZQyxDQUFaO0FBQUEsVUFBY0MsQ0FBZDtBQUFBLFVBQWdCekIsSUFBRSxDQUFsQjtBQUFBLFVBQW9CSyxJQUFFLENBQUMsQ0FBdkI7QUFBQSxVQUF5QkQsSUFBRSxDQUFDLENBQTVCO0FBQUEsVUFBOEJ3QixJQUFFLENBQUMsQ0FBakMsQ0FBbUMsSUFBRyxjQUFZLE9BQU85RSxDQUF0QixFQUF3QixNQUFNLElBQUkyWCxTQUFKLENBQWNsVyxDQUFkLENBQU4sQ0FBdUIsT0FBT3hCLElBQUV1QixFQUFFdkIsQ0FBRixLQUFNLENBQVIsRUFBVU0sRUFBRUQsQ0FBRixNQUFPaUQsSUFBRSxDQUFDLENBQUNqRCxFQUFFc1gsT0FBTixFQUFjdFUsSUFBRSxhQUFZaEQsQ0FBNUIsRUFBOEJrRSxJQUFFbEIsSUFBRTlDLEVBQUVnQixFQUFFbEIsRUFBRXVYLE9BQUosS0FBYyxDQUFoQixFQUFrQjVYLENBQWxCLENBQUYsR0FBdUJ1RSxDQUF2RCxFQUF5RE0sSUFBRSxjQUFheEUsQ0FBYixHQUFlLENBQUMsQ0FBQ0EsRUFBRXdYLFFBQW5CLEdBQTRCaFQsQ0FBOUYsQ0FBVixFQUEyR3BFLEVBQUVxWCxNQUFGLEdBQVMvVCxDQUFwSCxFQUFzSHRELEVBQUVzWCxLQUFGLEdBQVE3VCxDQUE5SCxFQUFnSXpELENBQXZJO0FBQXlJLFNBQUlILElBQUVELEVBQUUsQ0FBRixDQUFOO0FBQUEsUUFBV08sSUFBRVAsRUFBRSxDQUFGLENBQWI7QUFBQSxRQUFrQmtCLElBQUVsQixFQUFFLEVBQUYsQ0FBcEI7QUFBQSxRQUEwQm1CLElBQUUscUJBQTVCO0FBQUEsUUFBa0RqQixJQUFFc1AsS0FBSzZELEdBQXpEO0FBQUEsUUFBNkRoVCxJQUFFbVAsS0FBS0MsR0FBcEUsQ0FBd0UvUCxFQUFFRSxPQUFGLEdBQVVHLENBQVY7QUFBWSxHQUF6KzZCLEVBQTQrNkIsVUFBU0wsQ0FBVCxFQUFXQyxDQUFYLEVBQWFLLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixDQUFOO0FBQUEsUUFBV0MsSUFBRSxTQUFGQSxDQUFFLEdBQVU7QUFBQyxhQUFPRixFQUFFNFgsSUFBRixDQUFPQyxHQUFQLEVBQVA7QUFBb0IsS0FBNUMsQ0FBNkNsWSxFQUFFRSxPQUFGLEdBQVVLLENBQVY7QUFBWSxHQUFyajdCLEVBQXdqN0IsVUFBU1AsQ0FBVCxFQUFXQyxDQUFYLEVBQWFLLENBQWIsRUFBZTtBQUFDLEtBQUMsVUFBU0wsQ0FBVCxFQUFXO0FBQUMsVUFBSUssSUFBRSxvQkFBaUJMLENBQWpCLHlDQUFpQkEsQ0FBakIsTUFBb0JBLENBQXBCLElBQXVCQSxFQUFFYSxNQUFGLEtBQVdBLE1BQWxDLElBQTBDYixDQUFoRCxDQUFrREQsRUFBRUUsT0FBRixHQUFVSSxDQUFWO0FBQVksS0FBM0UsRUFBNkVHLElBQTdFLENBQWtGUixDQUFsRixFQUFvRkssRUFBRSxFQUFGLENBQXBGO0FBQTJGLEdBQW5xN0IsRUFBc3E3QixVQUFTTixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLFFBQUlLLENBQUosQ0FBTUEsSUFBRyxZQUFVO0FBQUMsYUFBTyxJQUFQO0FBQVksS0FBeEIsRUFBRixDQUE4QixJQUFHO0FBQUNBLFVBQUVBLEtBQUd3QyxTQUFTLGFBQVQsR0FBSCxJQUE4QixDQUFDLEdBQUVxVixJQUFILEVBQVMsTUFBVCxDQUFoQztBQUFpRCxLQUFyRCxDQUFxRCxPQUFNblksQ0FBTixFQUFRO0FBQUMsMEJBQWlCeVAsTUFBakIseUNBQWlCQSxNQUFqQixPQUEwQm5QLElBQUVtUCxNQUE1QjtBQUFvQyxPQUFFdlAsT0FBRixHQUFVSSxDQUFWO0FBQVksR0FBdDA3QixFQUF5MDdCLFVBQVNOLENBQVQsRUFBV0MsQ0FBWCxFQUFhSyxDQUFiLEVBQWU7QUFBQyxhQUFTRCxDQUFULENBQVdMLENBQVgsRUFBYTtBQUFDLFVBQUcsWUFBVSxPQUFPQSxDQUFwQixFQUFzQixPQUFPQSxDQUFQLENBQVMsSUFBR2EsRUFBRWIsQ0FBRixDQUFILEVBQVEsT0FBT3dCLENBQVAsQ0FBUyxJQUFHakIsRUFBRVAsQ0FBRixDQUFILEVBQVE7QUFBQyxZQUFJQyxJQUFFLGNBQVksT0FBT0QsRUFBRW9ZLE9BQXJCLEdBQTZCcFksRUFBRW9ZLE9BQUYsRUFBN0IsR0FBeUNwWSxDQUEvQyxDQUFpREEsSUFBRU8sRUFBRU4sQ0FBRixJQUFLQSxJQUFFLEVBQVAsR0FBVUEsQ0FBWjtBQUFjLFdBQUcsWUFBVSxPQUFPRCxDQUFwQixFQUFzQixPQUFPLE1BQUlBLENBQUosR0FBTUEsQ0FBTixHQUFRLENBQUNBLENBQWhCLENBQWtCQSxJQUFFQSxFQUFFcVksT0FBRixDQUFVNVcsQ0FBVixFQUFZLEVBQVosQ0FBRixDQUFrQixJQUFJbkIsSUFBRUssRUFBRTJYLElBQUYsQ0FBT3RZLENBQVAsQ0FBTixDQUFnQixPQUFPTSxLQUFHMEIsRUFBRXNXLElBQUYsQ0FBT3RZLENBQVAsQ0FBSCxHQUFhWSxFQUFFWixFQUFFOEosS0FBRixDQUFRLENBQVIsQ0FBRixFQUFheEosSUFBRSxDQUFGLEdBQUksQ0FBakIsQ0FBYixHQUFpQ0UsRUFBRThYLElBQUYsQ0FBT3RZLENBQVAsSUFBVXdCLENBQVYsR0FBWSxDQUFDeEIsQ0FBckQ7QUFBdUQsU0FBSU8sSUFBRUQsRUFBRSxDQUFGLENBQU47QUFBQSxRQUFXTyxJQUFFUCxFQUFFLEVBQUYsQ0FBYjtBQUFBLFFBQW1Ca0IsSUFBRStXLEdBQXJCO0FBQUEsUUFBeUI5VyxJQUFFLFlBQTNCO0FBQUEsUUFBd0NqQixJQUFFLG9CQUExQztBQUFBLFFBQStERyxJQUFFLFlBQWpFO0FBQUEsUUFBOEVxQixJQUFFLGFBQWhGO0FBQUEsUUFBOEZwQixJQUFFNFgsUUFBaEcsQ0FBeUd4WSxFQUFFRSxPQUFGLEdBQVVHLENBQVY7QUFBWSxHQUFydDhCLEVBQXd0OEIsVUFBU0wsQ0FBVCxFQUFXQyxDQUFYLEVBQWFLLENBQWIsRUFBZTtBQUFDLGFBQVNELENBQVQsQ0FBV0wsQ0FBWCxFQUFhO0FBQUMsYUFBTSxvQkFBaUJBLENBQWpCLHlDQUFpQkEsQ0FBakIsTUFBb0JhLEVBQUViLENBQUYsS0FBTU8sRUFBRVAsQ0FBRixLQUFNd0IsQ0FBdEM7QUFBd0MsU0FBSWpCLElBQUVELEVBQUUsRUFBRixDQUFOO0FBQUEsUUFBWU8sSUFBRVAsRUFBRSxFQUFGLENBQWQ7QUFBQSxRQUFvQmtCLElBQUUsaUJBQXRCLENBQXdDeEIsRUFBRUUsT0FBRixHQUFVRyxDQUFWO0FBQVksR0FBbDE4QixFQUFxMThCLFVBQVNMLENBQVQsRUFBV0MsQ0FBWCxFQUFhSyxDQUFiLEVBQWU7QUFBQyxhQUFTRCxDQUFULENBQVdMLENBQVgsRUFBYTtBQUFDLGFBQU8sUUFBTUEsQ0FBTixHQUFRLEtBQUssQ0FBTCxLQUFTQSxDQUFULEdBQVdRLENBQVgsR0FBYWlCLENBQXJCLEdBQXVCZCxLQUFHQSxLQUFLRyxPQUFPZCxDQUFQLENBQVIsR0FBa0JhLEVBQUViLENBQUYsQ0FBbEIsR0FBdUJ3QixFQUFFeEIsQ0FBRixDQUFyRDtBQUEwRCxTQUFJTyxJQUFFRCxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdPLElBQUVQLEVBQUUsRUFBRixDQUFiO0FBQUEsUUFBbUJrQixJQUFFbEIsRUFBRSxFQUFGLENBQXJCO0FBQUEsUUFBMkJtQixJQUFFLGVBQTdCO0FBQUEsUUFBNkNqQixJQUFFLG9CQUEvQztBQUFBLFFBQW9FRyxJQUFFSixJQUFFQSxFQUFFa1ksV0FBSixHQUFnQixLQUFLLENBQTNGLENBQTZGelksRUFBRUUsT0FBRixHQUFVRyxDQUFWO0FBQVksR0FBdGg5QixFQUF5aDlCLFVBQVNMLENBQVQsRUFBV0MsQ0FBWCxFQUFhSyxDQUFiLEVBQWU7QUFBQyxhQUFTRCxDQUFULENBQVdMLENBQVgsRUFBYTtBQUFDLFVBQUlDLElBQUV1QixFQUFFZixJQUFGLENBQU9ULENBQVAsRUFBU1EsQ0FBVCxDQUFOO0FBQUEsVUFBa0JGLElBQUVOLEVBQUVRLENBQUYsQ0FBcEIsQ0FBeUIsSUFBRztBQUFDUixVQUFFUSxDQUFGLElBQUssS0FBSyxDQUFWLENBQVksSUFBSUgsSUFBRSxDQUFDLENBQVA7QUFBUyxPQUF6QixDQUF5QixPQUFNTCxDQUFOLEVBQVEsQ0FBRSxLQUFJTyxJQUFFa0IsRUFBRWhCLElBQUYsQ0FBT1QsQ0FBUCxDQUFOLENBQWdCLE9BQU9LLE1BQUlKLElBQUVELEVBQUVRLENBQUYsSUFBS0YsQ0FBUCxHQUFTLE9BQU9OLEVBQUVRLENBQUYsQ0FBcEIsR0FBMEJELENBQWpDO0FBQW1DLFNBQUlBLElBQUVELEVBQUUsQ0FBRixDQUFOO0FBQUEsUUFBV08sSUFBRUMsT0FBT08sU0FBcEI7QUFBQSxRQUE4QkcsSUFBRVgsRUFBRVMsY0FBbEM7QUFBQSxRQUFpREcsSUFBRVosRUFBRTZYLFFBQXJEO0FBQUEsUUFBOERsWSxJQUFFRCxJQUFFQSxFQUFFa1ksV0FBSixHQUFnQixLQUFLLENBQXJGLENBQXVGelksRUFBRUUsT0FBRixHQUFVRyxDQUFWO0FBQVksR0FBenc5QixFQUE0dzlCLFVBQVNMLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsYUFBU0ssQ0FBVCxDQUFXTixDQUFYLEVBQWE7QUFBQyxhQUFPTyxFQUFFRSxJQUFGLENBQU9ULENBQVAsQ0FBUDtBQUFpQixTQUFJSyxJQUFFUyxPQUFPTyxTQUFiO0FBQUEsUUFBdUJkLElBQUVGLEVBQUVxWSxRQUEzQixDQUFvQzFZLEVBQUVFLE9BQUYsR0FBVUksQ0FBVjtBQUFZLEdBQXoyOUIsRUFBNDI5QixVQUFTTixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLGFBQVNLLENBQVQsQ0FBV04sQ0FBWCxFQUFhO0FBQUMsYUFBTyxRQUFNQSxDQUFOLElBQVMsb0JBQWlCQSxDQUFqQix5Q0FBaUJBLENBQWpCLEVBQWhCO0FBQW1DLE9BQUVFLE9BQUYsR0FBVUksQ0FBVjtBQUFZLEdBQXY3OUIsQ0FBcmQsQ0FBUDtBQUF1NStCLENBQXhuL0IsQ0FBRCxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2dCQTtBQUNBOztBQUVBOzBCQUVBOztrQkFHQTtBQUZBO0FBR0E7O2FBR0E7Y0FHQTs7QUFDQTs7K0ZBQ0E7c0VBQ0E7a0NBQ0E7d0JBQ0E7QUFDQTtvRkFDQTt1Q0FDQTtrQ0FDQTt3QkFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBRkE7QUF4QkEsRzs7Ozs7OztBQ3pCQTtBQUNBOzs7QUFHQTtBQUNBLGlKQUFrSix5RkFBeUY7O0FBRTNPOzs7Ozs7OztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUsseURBQXlEO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLHFCQUFxQixXQUFXLEVBQUU7QUFDckUsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnQ0FBZ0M7QUFDeEQsbUJBQW1CLDZCQUE2QjtBQUNoRDtBQUNBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQSxvQkFBb0Isc0JBQXNCO0FBQzFDO0FBQ0Esb0JBQW9CLHNCQUFzQjtBQUMxQztBQUNBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQSxvQkFBb0Isc0JBQXNCO0FBQzFDO0FBQ0Esb0JBQW9CLHNCQUFzQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEM7Ozs7Ozs7QUNoREE7O0FBRUE7QUFDQSxpVkFBbU87QUFDbk87QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdKQUFnSixrRkFBa0Y7QUFDbE8seUpBQXlKLGtGQUFrRjtBQUMzTztBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDLEM7Ozs7Ozs7QUNwQkE7QUFDQTtBQUNBO0FBQ0EsOFdBQW1NO0FBQ25NO0FBQ0E7QUFDQTtBQUNBLHlrQkFBMmE7QUFDM2E7QUFDQSw2U0FBZ0w7QUFDaEw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtFQUErRSx3REFBd0QsSUFBSTs7QUFFM0k7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiB2dWUtdHJlZXNlbGVjdCB2MC4wLjYgfCAoYykgMjAxNyBSaW9waGFlIExlZVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICogaHR0cHM6Ly9naXRodWIuY29tL3Jpb3BoYWUvdnVlLXRyZWVzZWxlY3RcbiAqL1xuIShmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuVnVlVHJlZXNlbGVjdD10KCk6ZS5WdWVUcmVlc2VsZWN0PXQoKX0pKHRoaXMsKGZ1bmN0aW9uKCl7cmV0dXJuIChmdW5jdGlvbihlKXtmdW5jdGlvbiB0KGkpe2lmKG5baV0pcmV0dXJuIG5baV0uZXhwb3J0czt2YXIgcz1uW2ldPXtpOmksbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtpXS5jYWxsKHMuZXhwb3J0cyxzLHMuZXhwb3J0cyx0KSxzLmw9ITAscy5leHBvcnRzfXZhciBuPXt9O3JldHVybiB0Lm09ZSx0LmM9bix0LmQ9ZnVuY3Rpb24oZSxuLGkpe3QubyhlLG4pfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6aX0pfSx0Lm49ZnVuY3Rpb24oZSl7dmFyIG49ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIHQuZChuLFwiYVwiLG4pLG59LHQubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sdC5wPVwiL1wiLHQodC5zPTQpfSkoWyhmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbixpLHMsbyl7dmFyIHIsYT1lPWV8fHt9LGw9dHlwZW9mIGUuZGVmYXVsdDtcIm9iamVjdFwiIT09bCYmXCJmdW5jdGlvblwiIT09bHx8KHI9ZSxhPWUuZGVmYXVsdCk7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgYT9hLm9wdGlvbnM6YTt0JiYoYy5yZW5kZXI9dC5yZW5kZXIsYy5zdGF0aWNSZW5kZXJGbnM9dC5zdGF0aWNSZW5kZXJGbnMsYy5fY29tcGlsZWQ9ITApLG4mJihjLmZ1bmN0aW9uYWw9ITApLHMmJihjLl9zY29wZUlkPXMpO3ZhciB1O2lmKG8/KHU9ZnVuY3Rpb24oZSl7ZT1lfHx0aGlzLiR2bm9kZSYmdGhpcy4kdm5vZGUuc3NyQ29udGV4dHx8dGhpcy5wYXJlbnQmJnRoaXMucGFyZW50LiR2bm9kZSYmdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQsZXx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX198fChlPV9fVlVFX1NTUl9DT05URVhUX18pLGkmJmkuY2FsbCh0aGlzLGUpLGUmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzJiZlLl9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobyl9LGMuX3NzclJlZ2lzdGVyPXUpOmkmJih1PWkpLHUpe3ZhciBkPWMuZnVuY3Rpb25hbCxoPWQ/Yy5yZW5kZXI6Yy5iZWZvcmVDcmVhdGU7ZD8oYy5faW5qZWN0U3R5bGVzPXUsYy5yZW5kZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdS5jYWxsKHQpLGgoZSx0KX0pOmMuYmVmb3JlQ3JlYXRlPWg/W10uY29uY2F0KGgsdSk6W3VdfXJldHVybntlc01vZHVsZTpyLGV4cG9ydHM6YSxvcHRpb25zOmN9fX0pLChmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG4oZSl7dmFyIHQ9dHlwZW9mIGU7cmV0dXJuIG51bGwhPWUmJihcIm9iamVjdFwiPT10fHxcImZ1bmN0aW9uXCI9PXQpfWUuZXhwb3J0cz1ufSksKGZ1bmN0aW9uKGUsdCxuKXt2YXIgaT1uKDkpLHM9XCJvYmplY3RcIj09dHlwZW9mIHNlbGYmJnNlbGYmJnNlbGYuT2JqZWN0PT09T2JqZWN0JiZzZWxmLG89aXx8c3x8RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO2UuZXhwb3J0cz1vfSksKGZ1bmN0aW9uKGUsdCxuKXt2YXIgaT1uKDIpLHM9aS5TeW1ib2w7ZS5leHBvcnRzPXN9KSwoZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkoZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe1wibW91c2Vkb3duXCI9PT10LnR5cGUmJjA9PT10LmJ1dHRvbiYmZS5jYWxsKHRoaXMsdCl9fWZ1bmN0aW9uIHMoKXt9ZnVuY3Rpb24gbyhlKXtyZXR1cm4gbnVsbCE9ZSYmXCJvYmplY3RcIj09PSh2b2lkIDA9PT1lP1widW5kZWZpbmVkXCI6eChlKSkmJk9iamVjdC5nZXRQcm90b3R5cGVPZihlKT09PU9iamVjdC5wcm90b3R5cGV9ZnVuY3Rpb24gcihlLHQsbil7byhuKT8oZVt0XXx8KGVbdF09e30pLGwoZVt0XSxuKSk6ZVt0XT1ufWZ1bmN0aW9uIGEoZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9ZnVuY3Rpb24gbChlLHQpe2lmKG51bGw9PXQpO2Vsc2UgaWYobyh0KSlmb3IodmFyIG49T2JqZWN0LmtleXModCksaT0wLHM9bi5sZW5ndGg7aTxzO2krKylyKGUsbltpXSx0W25baV1dKTtlbHNlIE4oKTtyZXR1cm4gZX1mdW5jdGlvbiBjKGUpe3JldHVybiBTKChmdW5jdGlvbigpe3JldHVybiBBcnJheS5pc0FycmF5KGUpfSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmV4cGVjdGVkIHR5cGVcIn0pKSxlW2UubGVuZ3RoLTFdfWZ1bmN0aW9uIHUoZSx0LG4pe2Zvcih2YXIgaT0wLHM9ZS5sZW5ndGg7aTxzO2krKylpZih0LmNhbGwobixlW2ldLGksZSkpcmV0dXJuIGk7cmV0dXJuLTF9ZnVuY3Rpb24gZChlLHQsbil7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleD9lLmZpbmRJbmRleCh0LG4pOnUoZSx0LG4pfWZ1bmN0aW9uIGgoZSx0KXt2YXIgbj1lLmluZGV4T2YodCk7LTEhPT1uJiZlLnNwbGljZShuLDEpfWZ1bmN0aW9uIHAoZSx0KXtpZihlLmxlbmd0aCE9PXQubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKWlmKGVbbl0hPT10W25dKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGYoZSx0LG4pe3JldHVybiB0IGluIGU/T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7dmFsdWU6bixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOmVbdF09bixlfWZ1bmN0aW9uIHYoZSx0KXtmb3IodmFyIG49MDs7KXtpZihlLmxldmVsPG4pcmV0dXJuLTE7aWYodC5sZXZlbDxuKXJldHVybiAxO2lmKGUuaW5kZXhbbl0hPT10LmluZGV4W25dKXJldHVybiBlLmluZGV4W25dLXQuaW5kZXhbbl07bisrfX1mdW5jdGlvbiBfKGUsdCl7cmV0dXJuIGUubGV2ZWwhPT10LmxldmVsP2UubGV2ZWwtdC5sZXZlbDp2KGUsdCl9ZnVuY3Rpb24gbShlKXtyZXR1cm5cImFuZCBcIitlK1wiIG1vcmVcIn1mdW5jdGlvbiBDKGUpe3JldHVyblwiRmFpbGVkIHRvIGxvYWQgY2hpbGRyZW4gb3B0aW9uczogXCIrKGUubWVzc2FnZXx8U3RyaW5nKGUpKStcIi5cIn1mdW5jdGlvbiB5KGUpe24oNSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGI9big2KSxnPW4ubihiKSxFPW4oNyksTz1uLm4oRSkseD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxTPXMsTj1zLHc9e3Byb3ZpZGU6ZnVuY3Rpb24oKXtyZXR1cm57aW5zdGFuY2U6dGhpcyxVTkNIRUNLRUQ6MCxJTkRFVEVSTUlOQVRFOjEsQ0hFQ0tFRDoyLFVOTUFUQ0hFRDowLERFU0NFTkRBTlRfTUFUQ0hFRDoxLE1BVENIRUQ6Mn19LHByb3BzOnthdXRvZm9jdXM6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxiYWNrc3BhY2VSZW1vdmVzOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sYnJhbmNoTm9kZXNGaXJzdDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGNsZWFyYWJsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGNsZWFyQWxsVGV4dDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIkNsZWFyIGFsbFwifSxjbGVhck9uU2VsZWN0Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sY2xlYXJWYWx1ZVRleHQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJDbGVhciB2YWx1ZVwifSxjbG9zZU9uU2VsZWN0Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sZGVsZXRlUmVtb3Zlczp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGRpc2FibGVCcmFuY2hOb2Rlczp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGRpc2FibGVkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sZGVmYXVsdEV4cGFuZExldmVsOnt0eXBlOk51bWJlcixkZWZhdWx0OjB9LGVzY2FwZUNsZWFyc1ZhbHVlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sZmxhdDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGlkOntkZWZhdWx0Om51bGx9LGxpbWl0Ont0eXBlOk51bWJlcixkZWZhdWx0OjEvMH0sbGltaXRUZXh0Ont0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6bX0sbG9hZENoaWxkcmVuRXJyb3JUZXh0Ont0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6Q30sbG9hZENoaWxkcmVuT3B0aW9uczp7dHlwZTpGdW5jdGlvbn0sbG9hZGluZ1RleHQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJMb2FkaW5nLi4uXCJ9LGxvYWRSb290T3B0aW9uczp7dHlwZTpGdW5jdGlvbn0sbWF4SGVpZ2h0Ont0eXBlOk51bWJlcixkZWZhdWx0OjMwMH0sbXVsdGlwbGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxub0NoaWxkcmVuVGV4dDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIk5vIGNoaWxkcmVuIG9wdGlvbnMuLi5cIn0sbm9SZXN1bHRzVGV4dDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIk5vIHJlc3VsdHMgZm91bmQuLi5cIn0sbm9PcHRpb25zVGV4dDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIk5vIG9wdGlvbnMgYXZhaWxhYmxlLlwifSxvcGVuRGlyZWN0aW9uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiYXV0b1wifSxvcGVuT25DbGljazp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LG9wZW5PbkZvY3VzOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sb3B0aW9uczp7dHlwZTpBcnJheX0scGxhY2Vob2xkZXI6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJTZWxlY3QuLi5cIn0scmV0YWluU2Nyb2xsUG9zaXRpb246e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxyZXRyeVRleHQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJSZXRyeT9cIn0scmV0cnlUaXRsZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIkNsaWNrIHRvIHJldHJ5XCJ9LHNlYXJjaGFibGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxzaG93Q291bnQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxzaG93Q291bnRPZjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIkFMTF9DSElMRFJFTlwiLHZhbGlkYXRvcjpmdW5jdGlvbihlKXtyZXR1cm4tMSE9PVtcIkFMTF9DSElMRFJFTlwiLFwiQUxMX0RFU0NFTkRBTlRTXCIsXCJMRUFGX0NISUxEUkVOXCIsXCJMRUFGX0RFU0NFTkRBTlRTXCJdLmluZGV4T2YoZSl9fSxzaG93Q291bnRPblNlYXJjaDpudWxsLHNvcnRWYWx1ZUJ5Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiT1JERVJfU0VMRUNURURcIn0sc3ViSXRlbXNMaW1pdDp7dHlwZTpOdW1iZXIsZGVmYXVsdDoxLzB9LHRhYkluZGV4Ont0eXBlOk51bWJlcixkZWZhdWx0OjB9LHZhbHVlOm51bGx9LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57aW50ZXJuYWxWYWx1ZTpbXSxpc0ZvY3VzZWQ6ITEsaXNPcGVuOiExLG5vZGVDaGVja2VkU3RhdGVNYXA6T2JqZWN0LmNyZWF0ZShudWxsKSxub2RlTWFwOk9iamVjdC5jcmVhdGUobnVsbCksbm9ybWFsaXplZE9wdGlvbnM6bnVsbCxub1NlYXJjaFJlc3VsdHM6ITAsb3B0aW1pemVkSGVpZ2h0OjAscHJlZmZlcmVkT3BlbkRpcmVjdGlvbjpcImJlbG93XCIscm9vdE9wdGlvbnNMb2FkZWQ6ITEsbG9hZGluZ1Jvb3RPcHRpb25zOiExLGxvYWRpbmdSb290T3B0aW9uc0Vycm9yOlwiXCIsc2VhcmNoaW5nQ291bnQ6T2JqZWN0LmNyZWF0ZShudWxsKSxzZWFyY2hpbmc6ITEsc2VhcmNoUXVlcnk6XCJcIixzZWxlY3RlZE5vZGVNYXA6T2JqZWN0LmNyZWF0ZShudWxsKSxsYXN0U2Nyb2xsUG9zaXRpb246MH19LGNvbXB1dGVkOntzZWxlY3RlZE5vZGVzTnVtYmVyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW50ZXJuYWxWYWx1ZS5sZW5ndGh9LGhhc1ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VsZWN0ZWROb2Rlc051bWJlcj4wfSxzZWxlY3RlZE5vZGVzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW50ZXJuYWxWYWx1ZS5tYXAodGhpcy5nZXROb2RlKX0sc2luZ2xlOmZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMubXVsdGlwbGV9LHZpc2libGVWYWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNlbGVjdGVkTm9kZXMuc2xpY2UoMCx0aGlzLmxpbWl0KX0saGFzRXhjZWVkZWRMaW1pdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNlbGVjdGVkTm9kZXNOdW1iZXI+dGhpcy5saW1pdH0sc2hvdWxkU2hvd0NsZWFySWNvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNsZWFyYWJsZSYmIXRoaXMuZGlzYWJsZWQmJnRoaXMuaGFzVmFsdWV9LHNob3dDb3VudE9uU2VhcmNoQ29tcHV0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIHRoaXMuc2hvd0NvdW50T25TZWFyY2g/dGhpcy5zaG93Q291bnRPblNlYXJjaDp0aGlzLnNob3dDb3VudH19LHdhdGNoOntkaXNhYmxlZDpmdW5jdGlvbihlKXtlJiZ0aGlzLmlzT3BlbiYmdGhpcy5jbG9zZU1lbnUoKX0sbXVsdGlwbGU6ZnVuY3Rpb24oZSl7ZSYmdGhpcy5idWlsZE5vZGVDaGVja2VkU3RhdGVNYXAoKX0sc2VhcmNoUXVlcnk6TygpKChmdW5jdGlvbigpe3RoaXMuaGFuZGxlU2VhcmNoKCksdGhpcy4kZW1pdChcInNlYXJjaC1jaGFuZ2VcIix0aGlzLnNlYXJjaFF1ZXJ5LHRoaXMuaWQpfSksMjAwKSxzb3J0VmFsdWVCeTpmdW5jdGlvbigpe3RoaXMuc29ydFZhbHVlKCl9LGludGVybmFsVmFsdWU6ZnVuY3Rpb24oKXt0aGlzLiRlbWl0KFwiaW5wdXRcIix0aGlzLmdldFZhbHVlKCksdGhpcy5pZCl9LHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWV8fDA9PT1lP3RoaXMubXVsdGlwbGU/ZS5zbGljZSgpOltlXTpbXTshcCh0LHRoaXMuaW50ZXJuYWxWYWx1ZSkmJih0aGlzLmludGVybmFsVmFsdWU9dCx0aGlzLmJ1aWxkU2VsZWN0ZWROb2RlTWFwKCksdGhpcy5idWlsZE5vZGVDaGVja2VkU3RhdGVNYXAoKSl9fSxtZXRob2RzOnt2ZXJpZnlQcm9wczpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5sb2FkUm9vdE9wdGlvbnN8fCh0aGlzLm9wdGlvbnM/QXJyYXkuaXNBcnJheSh0aGlzLm9wdGlvbnMpfHxTKChmdW5jdGlvbigpe3JldHVybiExfSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFeHBlY3RlZCBwcm9wIGBvcHRpb25zYCB0byBiZSBhbiBhcnJheSwgaW5zdGVhZCBnb3Q6IFwiK2Uub3B0aW9ucytcIi5cIn0pKTpTKChmdW5jdGlvbigpe3JldHVybiExfSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJSZXF1aXJlZCBwcm9wIGBvcHRpb25zYCBpcyBub3QgcHJvdmlkZWQuXCJ9KSkpfSxyZXNldEZsYWdzOmZ1bmN0aW9uKCl7dGhpcy5fYmx1ck9uU2VsZWN0PSExLHRoaXMuX3dhc0NsaWNrZWRPblZhbHVlSXRlbT0hMX0saW5pdGlhbGl6ZTpmdW5jdGlvbihlKXtBcnJheS5pc0FycmF5KGUpJiYodGhpcy5yb290T3B0aW9uc0xvYWRlZD0hMCksdGhpcy5pbml0aWFsaXplUm9vdE9wdGlvbnMoZXx8W10pLHRoaXMuaW5pdGlhbGl6ZVZhbHVlKCksdGhpcy5idWlsZFNlbGVjdGVkTm9kZU1hcCgpLHRoaXMuYnVpbGROb2RlQ2hlY2tlZFN0YXRlTWFwKCl9LGdldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubXVsdGlwbGU/dGhpcy5pbnRlcm5hbFZhbHVlLnNsaWNlKCk6dGhpcy5pbnRlcm5hbFZhbHVlWzBdfSxnZXROb2RlOmZ1bmN0aW9uKGUpe3JldHVybiBTKChmdW5jdGlvbigpe3JldHVybiBudWxsIT1lfSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJJbnZhbGlkIG5vZGUgaWQ6IFwiK2V9KSksdGhpcy5ub2RlTWFwW2VdfHx7aWQ6ZSxsYWJlbDplK1wiICh1bmtub3duKVwiLGFuY2VzdG9yczpbXSxwYXJlbnROb2RlOm51bGwsaXNVbmtub3duTm9kZTohMCxpc0xlYWY6ITAsaXNCcmFuY2g6ITF9fSxpc1NlbGVjdGVkOmZ1bmN0aW9uKGUpe3JldHVybiBlLmlkIGluIHRoaXMuc2VsZWN0ZWROb2RlTWFwfSxjaGVja0lmQnJhbmNoTm9kZTpmdW5jdGlvbihlKXtTKChmdW5jdGlvbigpe3JldHVybiBlJiZlLmlzQnJhbmNofSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFeHBlY3RlZCBhIGJyYW5jaCBub2RlLCBpbnN0ZWFkIGdvdDogXCIrZX0pKX0sdHJhdmVyc2VEZXNjZW5kYW50czpmdW5jdGlvbihlLHQsbil7dmFyIGk9dGhpcztcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYobj10LHQ9MS8wKSxlLmlzQnJhbmNoJiZlLmxldmVsPHQmJmUuY2hpbGRyZW4uZm9yRWFjaCgoZnVuY3Rpb24oZSl7aS50cmF2ZXJzZURlc2NlbmRhbnRzKGUsdCxuKSxuKGUpfSkpfSx0cmF2ZXJzZUFuY2VzdG9yczpmdW5jdGlvbihlLHQpe3ZhciBuPWUucGFyZW50Tm9kZTtudWxsIT09biYmKHQobiksdGhpcy50cmF2ZXJzZUFuY2VzdG9ycyhuLHQpKX0sdHJhdmVyc2VBbGxOb2RlczpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMubm9ybWFsaXplZE9wdGlvbnMuZm9yRWFjaCgoZnVuY3Rpb24obil7dC50cmF2ZXJzZURlc2NlbmRhbnRzKG4sZSksZShuKX0pKX0sdG9nZ2xlQ2xpY2tPdXRzaWRlRXZlbnQ6ZnVuY3Rpb24oZSl7ZT9kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsdGhpcy5oYW5kbGVDbGlja091dHNpZGUsITEpOmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIix0aGlzLmhhbmRsZUNsaWNrT3V0c2lkZSwhMSl9LGZvY3VzSW5wdXQ6ZnVuY3Rpb24oKXt0aGlzLiRyZWZzLnZhbHVlLmZvY3VzSW5wdXQoKX0sYmx1cklucHV0OmZ1bmN0aW9uKCl7dGhpcy4kcmVmcy52YWx1ZS5ibHVySW5wdXQoKX0saGFuZGxlTW91c2VEb3duOmkoKGZ1bmN0aW9uKGUpe2lmKGUucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpLCF0aGlzLmRpc2FibGVkKXt0aGlzLiRyZWZzLnZhbHVlLiRlbC5jb250YWlucyhlLnRhcmdldCkmJighdGhpcy5pc09wZW58fHRoaXMuc2VhcmNoYWJsZXx8dGhpcy5fd2FzQ2xpY2tlZE9uVmFsdWVJdGVtP3RoaXMuaXNPcGVufHwhdGhpcy5vcGVuT25DbGljayYmIXRoaXMuaXNGb2N1c2VkfHx0aGlzLm9wZW5NZW51KCk6dGhpcy5jbG9zZU1lbnUoKSksdGhpcy5fYmx1ck9uU2VsZWN0P3RoaXMuYmx1cklucHV0KCk6dGhpcy5mb2N1c0lucHV0KCksdGhpcy5yZXNldEZsYWdzKCl9fSkpLGhhbmRsZU1vdXNlRG93bk9uQ2xlYXI6aSgoZnVuY3Rpb24oZSl7ZS5zdG9wUHJvcGFnYXRpb24oKSxlLnByZXZlbnREZWZhdWx0KCksdGhpcy5jbGVhcigpLHRoaXMuZm9jdXNJbnB1dCgpfSkpLGhhbmRsZU1vdXNlRG93bk9uQXJyb3c6aSgoZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpLGUuc3RvcFByb3BhZ2F0aW9uKCksdGhpcy5mb2N1c0lucHV0KCksdGhpcy50b2dnbGVNZW51KCl9KSksaGFuZGxlQ2xpY2tPdXRzaWRlOmZ1bmN0aW9uKGUpe3RoaXMuJHJlZnMud3JhcHBlciYmIXRoaXMuJHJlZnMud3JhcHBlci5jb250YWlucyhlLnRhcmdldCkmJih0aGlzLmJsdXJJbnB1dCgpLHRoaXMuY2xvc2VNZW51KCkpfSxoYW5kbGVTZWFyY2g6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuc2VhcmNoUXVlcnk/KHRoaXMuc2VhcmNoaW5nPSEwLHRoaXMubm9TZWFyY2hSZXN1bHRzPSEwLHRoaXMudHJhdmVyc2VBbGxOb2RlcygoZnVuY3Rpb24odCl7aWYodC5pc0JyYW5jaCl7dmFyIG47dC5leHBhbmRzT25TZWFyY2g9ITEsdC5oYXNNYXRjaGVkQ2hpbGQ9ITEsZS5zZWFyY2hpbmdDb3VudFt0LmlkXT0obj17fSxmKG4sXCJBTExfQ0hJTERSRU5cIiwwKSxmKG4sXCJBTExfREVTQ0VOREFOVFNcIiwwKSxmKG4sXCJMRUFGX0NISUxEUkVOXCIsMCksZihuLFwiTEVBRl9ERVNDRU5EQU5UU1wiLDApLG4pfX0pKSx0aGlzLnRyYXZlcnNlQWxsTm9kZXMoKGZ1bmN0aW9uKHQpe3ZhciBuPXQuaXNNYXRjaGVkPWcoKShlLnNlYXJjaFF1ZXJ5LnRvTG93ZXJDYXNlKCksdC5sYWJlbC50b0xvd2VyQ2FzZSgpKTtuJiYoZS5ub1NlYXJjaFJlc3VsdHM9ITEsdC5hbmNlc3RvcnMuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIGUuc2VhcmNoaW5nQ291bnRbdC5pZF0uQUxMX0RFU0NFTkRBTlRTKyt9KSksdC5pc0xlYWYmJnQuYW5jZXN0b3JzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBlLnNlYXJjaGluZ0NvdW50W3QuaWRdLkxFQUZfREVTQ0VOREFOVFMrK30pKSxudWxsIT09dC5wYXJlbnROb2RlJiYoZS5zZWFyY2hpbmdDb3VudFt0LnBhcmVudE5vZGUuaWRdLkFMTF9DSElMRFJFTis9MSx0LmlzTGVhZiYmKGUuc2VhcmNoaW5nQ291bnRbdC5wYXJlbnROb2RlLmlkXS5MRUFGX0NISUxEUkVOKz0xKSkpLChufHx0LmlzQnJhbmNoJiZ0LmV4cGFuZHNPblNlYXJjaCkmJm51bGwhPT10LnBhcmVudE5vZGUmJih0LnBhcmVudE5vZGUuZXhwYW5kc09uU2VhcmNoPSEwLHQucGFyZW50Tm9kZS5oYXNNYXRjaGVkQ2hpbGQ9ITApfSkpKTp0aGlzLnNlYXJjaGluZz0hMX0sY2xvc2VNZW51OmZ1bmN0aW9uKCl7dGhpcy5pc09wZW4mJih0aGlzLmlzT3Blbj0hMSx0aGlzLnJldGFpblNjcm9sbFBvc2l0aW9uJiZ0aGlzLiRyZWZzLm1lbnUmJih0aGlzLmxhc3RTY3JvbGxQb3NpdGlvbj10aGlzLiRyZWZzLm1lbnUuc2Nyb2xsVG9wKSx0aGlzLnRvZ2dsZUNsaWNrT3V0c2lkZUV2ZW50KCExKSx0aGlzLnNlYXJjaFF1ZXJ5PVwiXCIsdGhpcy4kZW1pdChcImNsb3NlXCIsdGhpcy5nZXRWYWx1ZSgpLHRoaXMuaWQpKX0sb3Blbk1lbnU6ZnVuY3Rpb24oKXt0aGlzLmRpc2FibGVkfHx0aGlzLmlzT3Blbnx8KHRoaXMuaXNPcGVuPSEwLHRoaXMuJG5leHRUaWNrKHRoaXMuYWRqdXN0UG9zaXRpb24pLHRoaXMucmV0YWluU2Nyb2xsUG9zaXRpb24mJnRoaXMuJG5leHRUaWNrKHRoaXMucmVzdG9yZVNjcm9sbFBvc2l0aW9uKSx0aGlzLnJvb3RPcHRpb25zTG9hZGVkfHx0aGlzLmxvYWRPcHRpb25zKCEwKSx0aGlzLnRvZ2dsZUNsaWNrT3V0c2lkZUV2ZW50KCEwKSx0aGlzLiRlbWl0KFwib3BlblwiLHRoaXMuaWQpKX0sdG9nZ2xlTWVudTpmdW5jdGlvbigpe3RoaXMuaXNPcGVuP3RoaXMuY2xvc2VNZW51KCk6dGhpcy5vcGVuTWVudSgpfSx0b2dnbGVFeHBhbmRlZDpmdW5jdGlvbihlKXt0aGlzLmNoZWNrSWZCcmFuY2hOb2RlKGUpLHRoaXMuc2VhcmNoaW5nP2UuZXhwYW5kc09uU2VhcmNoPSFlLmV4cGFuZHNPblNlYXJjaDplLmlzRXhwYW5kZWQ9IWUuaXNFeHBhbmRlZH0saW5pdGlhbGl6ZVZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5tdWx0aXBsZT8odGhpcy5pbnRlcm5hbFZhbHVlPUFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSk/dGhpcy52YWx1ZS5zbGljZSgpOltdLHRoaXMuc29ydFZhbHVlKCkpOnRoaXMuaW50ZXJuYWxWYWx1ZT1udWxsIT10aGlzLnZhbHVlP1t0aGlzLnZhbHVlXTpbXX0saW5pdGlhbGl6ZVJvb3RPcHRpb25zOmZ1bmN0aW9uKGUpe3RoaXMubm9ybWFsaXplZE9wdGlvbnM9dGhpcy5ub3JtYWxpemUobnVsbCxlKX0sYnVpbGRTZWxlY3RlZE5vZGVNYXA6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnNlbGVjdGVkTm9kZU1hcD1PYmplY3QuY3JlYXRlKG51bGwpO3RoaXMuaW50ZXJuYWxWYWx1ZS5mb3JFYWNoKChmdW5jdGlvbih0KXtlW3RdPSEwfSkpfSxidWlsZE5vZGVDaGVja2VkU3RhdGVNYXA6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcy5ub2RlQ2hlY2tlZFN0YXRlTWFwPU9iamVjdC5jcmVhdGUobnVsbCk7dGhpcy5tdWx0aXBsZSYmKHRoaXMuc2VsZWN0ZWROb2Rlcy5mb3JFYWNoKChmdW5jdGlvbihuKXt0W24uaWRdPTIsZS5mbGF0fHwoZS50cmF2ZXJzZURlc2NlbmRhbnRzKG4sKGZ1bmN0aW9uKGUpe3RbZS5pZF09Mn0pKSxlLnRyYXZlcnNlQW5jZXN0b3JzKG4sKGZ1bmN0aW9uKGUpe3RbZS5pZF09MX0pKSl9KSksdGhpcy5ub3JtYWxpemVkT3B0aW9ucy5mb3JFYWNoKChmdW5jdGlvbihuKXtuLmlkIGluIHR8fCh0W24uaWRdPTApLGUudHJhdmVyc2VEZXNjZW5kYW50cyhuLChmdW5jdGlvbihlKXtlLmlkIGluIHR8fCh0W2UuaWRdPTApfSkpfSkpKX0sbm9ybWFsaXplOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcyxpPXQubWFwKChmdW5jdGlvbih0LGkpe24uY2hlY2tEdXBsaWNhdGlvbih0KSxuLnZlcmlmeU5vZGVTaGFwZSh0KTt2YXIgcz1udWxsPT09ZSxvPXQuaWQscj10LmxhYmVsLGE9dC5jaGlsZHJlbixsPXQuaXNEaXNhYmxlZCxjPXZvaWQgMCE9PWwmJmwsdT1BcnJheS5pc0FycmF5KGEpfHxudWxsPT09YXx8dm9pZCAwPT09YSYmISF0LmlzQnJhbmNoLGQ9IXUsaD1zPzA6ZS5sZXZlbCsxLHA9cz9bXTplLmFuY2VzdG9ycy5jb25jYXQoZSksdj0ocz9bXTplLmluZGV4KS5jb25jYXQoaSksXz1uLm5vZGVNYXBbb109e2lkOm8sbGFiZWw6cixsZXZlbDpoLGFuY2VzdG9yczpwLGluZGV4OnYscGFyZW50Tm9kZTplLGlzRGlzYWJsZWQ6Yyxpc01hdGNoZWQ6ITEsaXNMZWFmOmQsaXNCcmFuY2g6dSxpc1Jvb3ROb2RlOnMscmF3OnR9O2lmKHUpe3ZhciBtLEM9QXJyYXkuaXNBcnJheShhKTtDfHxTKChmdW5jdGlvbigpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4ubG9hZENoaWxkcmVuT3B0aW9uc30pLChmdW5jdGlvbigpe3JldHVyblwiVW5sb2FkZWQgYnJhbmNoIG5vZGUgZGV0ZWN0ZWQuIGBsb2FkQ2hpbGRyZW5PcHRpb25zYCBwcm9wIGlzIHJlcXVpcmVkIHRvIGxvYWQgaXRzIGNoaWxkcmVuLlwifSkpLF8uaXNMb2FkZWQ9QyxfLmlzUGVuZGluZz0hMSxfLmlzRXhwYW5kZWQ9aDxuLmRlZmF1bHRFeHBhbmRMZXZlbCxfLmhhc01hdGNoZWRDaGlsZD0hMSxfLmV4cGFuZHNPblNlYXJjaD0hMSxfLmxvYWRpbmdDaGlsZHJlbkVycm9yPVwiXCIsXy5jb3VudD0obT17fSxmKG0sXCJBTExfQ0hJTERSRU5cIiwwKSxmKG0sXCJBTExfREVTQ0VOREFOVFNcIiwwKSxmKG0sXCJMRUFGX0NISUxEUkVOXCIsMCksZihtLFwiTEVBRl9ERVNDRU5EQU5UU1wiLDApLG0pLF8uY2hpbGRyZW49Qz9uLm5vcm1hbGl6ZShfLGEpOltdLF8uaXNFeHBhbmRlZCYmIV8uaXNMb2FkZWQmJm4ubG9hZE9wdGlvbnMoITEsXyl9cmV0dXJuIF8uYW5jZXN0b3JzLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiBlLmNvdW50LkFMTF9ERVNDRU5EQU5UUysrfSkpLGQmJl8uYW5jZXN0b3JzLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiBlLmNvdW50LkxFQUZfREVTQ0VOREFOVFMrK30pKSxudWxsIT09ZSYmKGUuY291bnQuQUxMX0NISUxEUkVOKz0xLGQmJihlLmNvdW50LkxFQUZfQ0hJTERSRU4rPTEpKSxffSkpO2lmKHRoaXMuYnJhbmNoTm9kZXNGaXJzdCl7dmFyIHM9aS5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlzQnJhbmNofSkpLG89aS5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlzTGVhZn0pKTtpPXMuY29uY2F0KG8pfXJldHVybiBpfSxsb2FkT3B0aW9uczpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7aWYoZSl7aWYodGhpcy5sb2FkaW5nUm9vdE9wdGlvbnMpcmV0dXJuO3ZhciBpPWZ1bmN0aW9uKGUsdCl7bi5sb2FkaW5nUm9vdE9wdGlvbnM9ITEsZT9uLmxvYWRpbmdSb290T3B0aW9uc0Vycm9yPWUubWVzc2FnZXx8U3RyaW5nKGUpOnQ/QXJyYXkuaXNBcnJheSh0KT8obi5pbml0aWFsaXplKHQpLG4ucm9vdE9wdGlvbnNMb2FkZWQ9ITApOm4ubG9hZGluZ1Jvb3RPcHRpb25zRXJyb3I9XCJyZWNlaXZlZCB1bnJlY29nbml6YWJsZSBkYXRhXCI6bi5sb2FkaW5nUm9vdE9wdGlvbnNFcnJvcj1cIm5vIGRhdGEgcmVjZWl2ZWRcIn07dGhpcy5sb2FkaW5nUm9vdE9wdGlvbnM9ITAsdGhpcy5sb2FkaW5nUm9vdE9wdGlvbnNFcnJvcj1cIlwiLHRoaXMubG9hZFJvb3RPcHRpb25zKGkpfWVsc2V7aWYodC5pc1BlbmRpbmcpcmV0dXJuO3ZhciBzPXQucmF3LG89ZnVuY3Rpb24oZSxpKXt0LmlzUGVuZGluZz0hMSxlP3QubG9hZGluZ0NoaWxkcmVuRXJyb3I9bi5sb2FkQ2hpbGRyZW5FcnJvclRleHQoZSk6QXJyYXkuaXNBcnJheShpKT8odC5jaGlsZHJlbj1uLm5vcm1hbGl6ZSh0LGkpLHQuaXNMb2FkZWQ9ITAsbi5idWlsZE5vZGVDaGVja2VkU3RhdGVNYXAoKSk6KHQubG9hZGluZ0NoaWxkcmVuRXJyb3I9XCJSZWNlaXZlZCB1bnJlY29nbml6YWJsZSBkYXRhXCIsUygoZnVuY3Rpb24oKXtyZXR1cm4hMX0pLChmdW5jdGlvbigpe3JldHVyblwiUmVjZWl2ZWQgdW5yZWNvZ25pemFibGUgZGF0YSBcIitpK1wiIHdoaWxlIGxvYWRpbmcgY2hpbGRyZW4gb3B0aW9ucyBvZiBub2RlIFwiK3QuaWR9KSkpfTt0LmlzUGVuZGluZz0hMCx0LmxvYWRpbmdDaGlsZHJlbkVycm9yPVwiXCIsdGhpcy5sb2FkQ2hpbGRyZW5PcHRpb25zKHMsbyl9fSxjaGVja0R1cGxpY2F0aW9uOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7UygoZnVuY3Rpb24oKXtyZXR1cm4hYSh0Lm5vZGVNYXAsZS5pZCl9KSwoZnVuY3Rpb24oKXtyZXR1cm5cIkRldGVjdGVkIGR1cGxpY2F0ZSBwcmVzZW5jZSBvZiBub2RlIGlkIFwiK0pTT04uc3RyaW5naWZ5KGUuaWQpKycuIFRoZWlyIGxhYmVscyBhcmUgXCInK3Qubm9kZU1hcFtlLmlkXS5sYWJlbCsnXCIgYW5kIFwiJytlLmxhYmVsKydcIiByZXNwZWN0aXZlbHkuJ30pKX0sdmVyaWZ5Tm9kZVNoYXBlOmZ1bmN0aW9uKCl7fSxzZWxlY3Q6ZnVuY3Rpb24oZSl7dGhpcy5zaW5nbGUmJnRoaXMuY2xlYXIoKTt2YXIgdD10aGlzLm11bHRpcGxlJiYhdGhpcy5mbGF0PzA9PT10aGlzLm5vZGVDaGVja2VkU3RhdGVNYXBbZS5pZF06IXRoaXMuaXNTZWxlY3RlZChlKTt0P3RoaXMuX3NlbGVjdE5vZGUoZSk6dGhpcy5fZGVzZWxlY3ROb2RlKGUpLHRoaXMuYnVpbGRTZWxlY3RlZE5vZGVNYXAoKSx0aGlzLmJ1aWxkTm9kZUNoZWNrZWRTdGF0ZU1hcCgpLHRoaXMuc2VhcmNoaW5nJiZ0JiYodGhpcy5zaW5nbGV8fHRoaXMuY2xlYXJPblNlbGVjdCkmJih0aGlzLnNlYXJjaFF1ZXJ5PVwiXCIpLHRoaXMuc2luZ2xlJiZ0aGlzLmNsb3NlT25TZWxlY3QmJih0aGlzLmNsb3NlTWVudSgpLHRoaXMuc2VhcmNoYWJsZSYmKHRoaXMuX2JsdXJPblNlbGVjdD0hMCkpfSxjbGVhcjpmdW5jdGlvbigpe3RoaXMuaGFzVmFsdWUmJih0aGlzLmludGVybmFsVmFsdWU9W10sdGhpcy5idWlsZFNlbGVjdGVkTm9kZU1hcCgpLHRoaXMuYnVpbGROb2RlQ2hlY2tlZFN0YXRlTWFwKCkpfSxfc2VsZWN0Tm9kZTpmdW5jdGlvbihlKXtpZih0aGlzLmFkZFZhbHVlKGUpLHRoaXMubXVsdGlwbGUmJiF0aGlzLmZsYXQmJiFlLmlzUm9vdE5vZGUpe3ZhciB0PWUucGFyZW50Tm9kZSxuPXQuY2hpbGRyZW47bi5ldmVyeSh0aGlzLmlzU2VsZWN0ZWQpJiYobi5mb3JFYWNoKHRoaXMucmVtb3ZlVmFsdWUpLHRoaXMuX3NlbGVjdE5vZGUodCkpfX0sX2Rlc2VsZWN0Tm9kZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKHRoaXMucmVtb3ZlVmFsdWUoZSksdGhpcy5tdWx0aXBsZSYmIXRoaXMuZmxhdCYmKHRoaXMuc2VsZWN0ZWROb2Rlcy5mb3JFYWNoKChmdW5jdGlvbihuKXstMSE9PW4uYW5jZXN0b3JzLmluZGV4T2YoZSkmJnQucmVtb3ZlVmFsdWUobil9KSksIWUuaXNSb290Tm9kZSkpe3ZhciBuPWQoZS5hbmNlc3RvcnMsdGhpcy5pc1NlbGVjdGVkKTtpZigtMSE9PW4pe3ZhciBpPWUuYW5jZXN0b3JzW25dLHM9ZS5hbmNlc3RvcnMuY29uY2F0KGUpO3RoaXMucmVtb3ZlVmFsdWUoaSksdGhpcy50cmF2ZXJzZURlc2NlbmRhbnRzKGksZS5sZXZlbCwoZnVuY3Rpb24oZSl7LTE9PT1zLmluZGV4T2YoZSkmJnQuYWRkVmFsdWUoZSl9KSl9fX0sYWRkVmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5pbnRlcm5hbFZhbHVlLnB1c2goZS5pZCksdGhpcy5zZWxlY3RlZE5vZGVNYXBbZS5pZF09ITAsdGhpcy5zb3J0VmFsdWUoKX0scmVtb3ZlVmFsdWU6ZnVuY3Rpb24oZSl7aCh0aGlzLmludGVybmFsVmFsdWUsZS5pZCksZGVsZXRlIHRoaXMuc2VsZWN0ZWROb2RlTWFwW2UuaWRdfSxtYXliZVJlbW92ZUxhc3RWYWx1ZTpmdW5jdGlvbigpe2lmKHRoaXMuaGFzVmFsdWUpe3ZhciBlPWModGhpcy5pbnRlcm5hbFZhbHVlKSx0PXRoaXMuZ2V0Tm9kZShlKTt0aGlzLnJlbW92ZVZhbHVlKHQpLHRoaXMuYnVpbGRTZWxlY3RlZE5vZGVNYXAoKSx0aGlzLmJ1aWxkTm9kZUNoZWNrZWRTdGF0ZU1hcCgpfX0sc29ydFZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztcIkxFVkVMXCI9PT10aGlzLnNvcnRWYWx1ZUJ5P3RoaXMuaW50ZXJuYWxWYWx1ZS5zb3J0KChmdW5jdGlvbih0LG4pe3JldHVybiBfKGUubm9kZU1hcFt0XSxlLm5vZGVNYXBbbl0pfSkpOlwiSU5ERVhcIj09PXRoaXMuc29ydFZhbHVlQnkmJnRoaXMuaW50ZXJuYWxWYWx1ZS5zb3J0KChmdW5jdGlvbih0LG4pe3JldHVybiB2KGUubm9kZU1hcFt0XSxlLm5vZGVNYXBbbl0pfSkpfSxyZXN0b3JlU2Nyb2xsUG9zaXRpb246ZnVuY3Rpb24oKXt0aGlzLiRyZWZzLm1lbnUmJih0aGlzLiRyZWZzLm1lbnUuc2Nyb2xsVG9wPXRoaXMubGFzdFNjcm9sbFBvc2l0aW9uKX0sYWRqdXN0UG9zaXRpb246ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93KXt2YXIgZT10aGlzLiRlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSx0PWUudG9wLG49d2luZG93LmlubmVySGVpZ2h0LWUuYm90dG9tO24+dGhpcy5tYXhIZWlnaHR8fG4+dHx8XCJiZWxvd1wiPT09dGhpcy5vcGVuRGlyZWN0aW9ufHxcImJvdHRvbVwiPT09dGhpcy5vcGVuRGlyZWN0aW9uPyh0aGlzLnByZWZmZXJlZE9wZW5EaXJlY3Rpb249XCJiZWxvd1wiLHRoaXMub3B0aW1pemVkSGVpZ2h0PU1hdGgubWluKG4tNDAsdGhpcy5tYXhIZWlnaHQpKToodGhpcy5wcmVmZmVyZWRPcGVuRGlyZWN0aW9uPVwiYWJvdmVcIix0aGlzLm9wdGltaXplZEhlaWdodD1NYXRoLm1pbih0LTQwLHRoaXMubWF4SGVpZ2h0KSl9fX0sY3JlYXRlZDpmdW5jdGlvbigpe3RoaXMudmVyaWZ5UHJvcHMoKSx0aGlzLnJlc2V0RmxhZ3MoKSx0aGlzLmluaXRpYWxpemUodGhpcy5vcHRpb25zKX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuYXV0b2ZvY3VzJiZ0aGlzLiRyZWZzLnZhbHVlLmZvY3VzSW5wdXQoKX0sZGVzdHJveWVkOmZ1bmN0aW9uKCl7dGhpcy50b2dnbGVDbGlja091dHNpZGVFdmVudCghMSl9fSxEPXtjb21wdXRlZDp7bGltaXRUZXh0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5pbnN0YW5jZS5zZWxlY3RlZE5vZGVzTnVtYmVyLXRoaXMuaW5zdGFuY2UubGltaXQ7cmV0dXJuIHRoaXMuaW5zdGFuY2UubGltaXRUZXh0KGUpfX0sbWV0aG9kczp7Zm9jdXNJbnB1dDpmdW5jdGlvbigpe3RoaXMuJHJlZnMuaW5wdXQuZm9jdXMoKX0sYmx1cklucHV0OmZ1bmN0aW9uKCl7dGhpcy4kcmVmcy5pbnB1dC5ibHVyKCl9LGhhbmRsZU1vdXNlRG93bk9uVmFsdWU6aSgoZnVuY3Rpb24oKXt0aGlzLmluc3RhbmNlLl93YXNDbGlja2VkT25WYWx1ZUl0ZW09ITB9KSl9fSxNPXtuYW1lOlwidnVlLXRyZWVzZWxlY3QtLXBsYWNlaG9sZGVyXCIsaW5qZWN0OltcImluc3RhbmNlXCJdfSxBPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQ7cmV0dXJuKGUuX3NlbGYuX2N8fHQpKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX3BsYWNlaG9sZGVyIHZ1ZS10cmVlc2VsZWN0LWhlbHBlci16b29tLWVmZmVjdC1vZmZcIn0sW2UuX3QoXCJwbGFjZWhvbGRlclwiLFtlLl92KGUuX3MoZS5pbnN0YW5jZS5wbGFjZWhvbGRlcikpXSldLDIpfSxMPVtdLFQ9e3JlbmRlcjpBLHN0YXRpY1JlbmRlckZuczpMfSxWPVQsUj1uKDApLGs9UihNLFYsITEsbnVsbCxudWxsLG51bGwpLEk9ay5leHBvcnRzLCQ9e0JBQ0tTUEFDRTo4LEVTQ0FQRToyNyxERUxFVEU6NDZ9LEI9e25hbWU6XCJ2dWUtdHJlZXNlbGVjdC0taW5wdXRcIixpbmplY3Q6W1wiaW5zdGFuY2VcIl0sZGF0YTpmdW5jdGlvbigpe3JldHVybntpbnB1dFdpZHRoOjV9fSxjb21wdXRlZDp7bmVlZHNBdXRvU2l6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluc3RhbmNlLm11bHRpcGxlfX0sdXBkYXRlZDpmdW5jdGlvbigpe3RoaXMubmVlZHNBdXRvU2l6ZSYmdGhpcy51cGRhdGVJbnB1dFdpZHRoKCl9LG1ldGhvZHM6e2ZvY3VzOmZ1bmN0aW9uKCl7dGhpcy5pbnN0YW5jZS5kaXNhYmxlZHx8dGhpcy4kcmVmcy5pbnB1dCYmdGhpcy4kcmVmcy5pbnB1dC5mb2N1cygpfSxibHVyOmZ1bmN0aW9uKCl7dGhpcy4kcmVmcy5pbnB1dCYmdGhpcy4kcmVmcy5pbnB1dC5ibHVyKCl9LG9uRm9jdXM6ZnVuY3Rpb24oKXt0aGlzLmluc3RhbmNlLmlzRm9jdXNlZD0hMCwhdGhpcy5pbnN0YW5jZS5pc09wZW4mJnRoaXMuaW5zdGFuY2Uub3Blbk9uRm9jdXMmJnRoaXMuaW5zdGFuY2Uub3Blbk1lbnUoKX0sb25CbHVyOmZ1bmN0aW9uKCl7dGhpcy5pbnN0YW5jZS5pc0ZvY3VzZWQ9ITEsdGhpcy5pbnN0YW5jZS5jbG9zZU1lbnUoKX0sb25JbnB1dDpmdW5jdGlvbihlKXt0aGlzLmluc3RhbmNlLnNlYXJjaFF1ZXJ5PWUudGFyZ2V0LnZhbHVlfSxvbktleURvd246ZnVuY3Rpb24oZSl7aWYoIShlLmN0cmxLZXl8fGUuc2hpZnRLZXl8fGUuYWx0S2V5fHxlLm1ldGFLZXkpKXN3aXRjaChcIndoaWNoXCJpbiBlP2Uud2hpY2g6ZS5rZXlDb2RlKXtjYXNlICQuQkFDS1NQQUNFOnRoaXMuaW5zdGFuY2UuYmFja3NwYWNlUmVtb3ZlcyYmIXRoaXMuaW5zdGFuY2Uuc2VhcmNoUXVlcnkubGVuZ3RoJiZ0aGlzLmluc3RhbmNlLm1heWJlUmVtb3ZlTGFzdFZhbHVlKCk7YnJlYWs7Y2FzZSAkLkRFTEVURTp0aGlzLmluc3RhbmNlLmRlbGV0ZVJlbW92ZXMmJiF0aGlzLmluc3RhbmNlLnNlYXJjaFF1ZXJ5Lmxlbmd0aCYmdGhpcy5pbnN0YW5jZS5tYXliZVJlbW92ZUxhc3RWYWx1ZSgpO2JyZWFrO2Nhc2UgJC5FU0NBUEU6dGhpcy5pbnN0YW5jZS5zZWFyY2hRdWVyeS5sZW5ndGg/dGhpcy5pbnN0YW5jZS5zZWFyY2hRdWVyeT1cIlwiOnRoaXMuaW5zdGFuY2UuaXNPcGVuP3RoaXMuaW5zdGFuY2UuY2xvc2VNZW51KCk6dGhpcy5pbnN0YW5jZS5lc2NhcGVDbGVhcnNWYWx1ZSYmdGhpcy5pbnN0YW5jZS5jbGVhcigpO2JyZWFrO2RlZmF1bHQ6dGhpcy5pbnN0YW5jZS5pc09wZW58fHRoaXMuaW5zdGFuY2Uub3Blbk1lbnUoKX19LG9uTW91c2VEb3duOmZ1bmN0aW9uKGUpe3RoaXMuaW5zdGFuY2Uuc2VhcmNoUXVlcnkubGVuZ3RoJiZlLnN0b3BQcm9wYWdhdGlvbigpfSxyZW5kZXJJbnB1dFdyYXBwZXI6ZnVuY3Rpb24oZSl7dmFyIHQ9e2NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX2lucHV0LXdyYXBwZXJcIn0sbj1bXTtyZXR1cm4gdGhpcy5pbnN0YW5jZS5zZWFyY2hhYmxlJiYhdGhpcy5pbnN0YW5jZS5kaXNhYmxlZCYmKG4ucHVzaCh0aGlzLnJlbmRlcklucHV0KGUpKSx0aGlzLm5lZWRzQXV0b1NpemUmJm4ucHVzaCh0aGlzLnJlbmRlclNpemVyKGUpKSksdGhpcy5pbnN0YW5jZS5zZWFyY2hhYmxlfHxsKHQse29uOntmb2N1czp0aGlzLm9uRm9jdXMsYmx1cjp0aGlzLm9uQmx1cixrZXlkb3duOnRoaXMub25LZXlEb3dufSxyZWY6XCJpbnB1dFwifSksdGhpcy5pbnN0YW5jZS5zZWFyY2hhYmxlfHx0aGlzLmluc3RhbmNlLmRpc2FibGVkfHxsKHQse2F0dHJzOnt0YWJJbmRleDp0aGlzLmluc3RhbmNlLnRhYkluZGV4fX0pLGUoXCJkaXZcIix0LG4pfSxyZW5kZXJJbnB1dDpmdW5jdGlvbihlKXtyZXR1cm4gZShcImlucHV0XCIse2NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX2lucHV0XCIsYXR0cnM6e3R5cGU6XCJ0ZXh0XCIsYXV0b2NvbXBsZXRlOlwib2ZmXCIsdGFiSW5kZXg6dGhpcy5pbnN0YW5jZS50YWJJbmRleH0sZG9tUHJvcHM6e3ZhbHVlOnRoaXMuaW5zdGFuY2Uuc2VhcmNoUXVlcnl9LHN0eWxlOnt3aWR0aDp0aGlzLm5lZWRzQXV0b1NpemU/dGhpcy5pbnB1dFdpZHRoK1wicHhcIjpudWxsfSxvbjp7Zm9jdXM6dGhpcy5vbkZvY3VzLGlucHV0OnRoaXMub25JbnB1dCxibHVyOnRoaXMub25CbHVyLGtleWRvd246dGhpcy5vbktleURvd24sbW91c2Vkb3duOnRoaXMub25Nb3VzZURvd259LHJlZjpcImlucHV0XCJ9KX0scmVuZGVyU2l6ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGUoXCJkaXZcIix7Y2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9fc2l6ZXJcIixkb21Qcm9wczp7dGV4dENvbnRlbnQ6dGhpcy5pbnN0YW5jZS5zZWFyY2hRdWVyeX0scmVmOlwic2l6ZXJcIn0pfSx1cGRhdGVJbnB1dFdpZHRoOmZ1bmN0aW9uKCl7dGhpcy5pbnB1dFdpZHRoPU1hdGgubWF4KDUsdGhpcy4kcmVmcy5zaXplcj90aGlzLiRyZWZzLnNpemVyLnNjcm9sbFdpZHRoKzU6MCl9fSxyZW5kZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVuZGVySW5wdXRXcmFwcGVyKGUpfX0saj1uKDApLEY9aihCLG51bGwsITEsbnVsbCxudWxsLG51bGwpLHo9Ri5leHBvcnRzLFA9e25hbWU6XCJ2dWUtdHJlZXNlbGVjdC0tbXVsdGktdmFsdWVcIixjb21wb25lbnRzOntQbGFjZWhvbGRlcjpJLFNlYXJjaElucHV0Onp9LG1peGluczpbRF0saW5qZWN0OltcImluc3RhbmNlXCJdfSxIPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX3ZhbHVlLXdyYXBwZXJcIn0sW24oXCJ0cmFuc2l0aW9uLWdyb3VwXCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX211bHRpLXZhbHVlXCIsYXR0cnM6e3RhZzpcImRpdlwiLG5hbWU6XCJ2dWUtdHJlZXNlbGVjdF9fbXVsdGktdmFsdWUtaXRlbS0tem9vbVwiLGFwcGVhcjpcIlwifX0sW2UuX2woZS5pbnN0YW5jZS52aXNpYmxlVmFsdWUsKGZ1bmN0aW9uKHQpe3JldHVybltuKFwiZGl2XCIse2tleTpcInZhbHVlLVwiK3QuaWQsc3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9fbXVsdGktdmFsdWUtaXRlbS13cmFwcGVyXCIsb246e21vdXNlZG93bjplLmhhbmRsZU1vdXNlRG93bk9uVmFsdWV9fSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZ1ZS10cmVlc2VsZWN0X19tdWx0aS12YWx1ZS1pdGVtXCJ9LFtuKFwic3BhblwiLHtzdGF0aWNDbGFzczpcInZ1ZS10cmVlc2VsZWN0X19tdWx0aS12YWx1ZS1sYWJlbFwifSxbZS5fdihlLl9zKHQubGFiZWwpKV0pLG4oXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX2ljb24gdnVlLXRyZWVzZWxlY3RfX3ZhbHVlLXJlbW92ZVwiLG9uOnttb3VzZWRvd246ZnVuY3Rpb24obil7ZS5pbnN0YW5jZS5zZWxlY3QodCl9fX0sW2UuX3YoXCLDl1wiKV0pXSldKV19KSksZS5fdihcIiBcIiksZS5pbnN0YW5jZS5oYXNFeGNlZWRlZExpbWl0P24oXCJkaXZcIix7a2V5OlwibGltaXQtdGlwXCIsc3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9fbGltaXQtdGlwIHZ1ZS10cmVlc2VsZWN0LWhlbHBlci16b29tLWVmZmVjdC1vZmZcIn0sW24oXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX2xpbWl0LXRpcC10ZXh0XCJ9LFtlLl92KGUuX3MoZS5saW1pdFRleHQpKV0pXSk6ZS5fZSgpLGUuX3YoXCIgXCIpLGUuaW5zdGFuY2UuaGFzVmFsdWV8fGUuaW5zdGFuY2Uuc2VhcmNoUXVlcnk/ZS5fZSgpOm4oXCJwbGFjZWhvbGRlclwiLHtrZXk6XCJwbGFjZWhvbGVyXCJ9KSxlLl92KFwiIFwiKSxuKFwic2VhcmNoLWlucHV0XCIse2tleTpcImlucHV0XCIscmVmOlwiaW5wdXRcIn0pXSwyKV0sMSl9LFE9W10sSz17cmVuZGVyOkgsc3RhdGljUmVuZGVyRm5zOlF9LFc9SyxVPW4oMCkscT1VKFAsVywhMSxudWxsLG51bGwsbnVsbCksWD1xLmV4cG9ydHMsSj17bmFtZTpcInZ1ZS10cmVlc2VsZWN0LS1zaW5nbGUtdmFsdWVcIixjb21wb25lbnRzOntQbGFjZWhvbGRlcjpJLFNlYXJjaElucHV0Onp9LG1peGluczpbRF0saW5qZWN0OltcImluc3RhbmNlXCJdfSxHPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX3ZhbHVlLXdyYXBwZXJcIn0sW2UuaW5zdGFuY2UuaGFzVmFsdWUmJiFlLmluc3RhbmNlLnNlYXJjaFF1ZXJ5P24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9fc2luZ2xlLXZhbHVlXCJ9LFtlLl92KFwiXFxuICAgIFwiK2UuX3MoZS5pbnN0YW5jZS5zZWxlY3RlZE5vZGVzWzBdLmxhYmVsKStcIlxcbiAgXCIpXSk6ZS5pbnN0YW5jZS5zZWFyY2hRdWVyeT9lLl9lKCk6bihcInBsYWNlaG9sZGVyXCIpLGUuX3YoXCIgXCIpLG4oXCJzZWFyY2gtaW5wdXRcIix7a2V5OlwiaW5wdXRcIixyZWY6XCJpbnB1dFwifSldLDEpfSxZPVtdLFo9e3JlbmRlcjpHLHN0YXRpY1JlbmRlckZuczpZfSxlZT1aLHRlPW4oMCksbmU9dGUoSixlZSwhMSxudWxsLG51bGwsbnVsbCksaWU9bmUuZXhwb3J0cyxzZT17cHJvcHM6e25vZGU6e3R5cGU6T2JqZWN0LHJlcXVpcmVkOiEwfX0sY29tcHV0ZWQ6e2NoZWNrZWRTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluc3RhbmNlLm5vZGVDaGVja2VkU3RhdGVNYXBbdGhpcy5ub2RlLmlkXX0sc2hvdWxkRXhwYW5kOmZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLm5vZGUuaXNCcmFuY2gmJih0aGlzLmluc3RhbmNlLnNlYXJjaGluZz90aGlzLm5vZGUuZXhwYW5kc09uU2VhcmNoOnRoaXMubm9kZS5pc0V4cGFuZGVkKX19LHdhdGNoOntcIm5vZGUuaXNFeHBhbmRlZFwiOmZ1bmN0aW9uKGUpeyEwIT09ZXx8dGhpcy5ub2RlLmlzTG9hZGVkfHx0aGlzLmluc3RhbmNlLmxvYWRPcHRpb25zKCExLHRoaXMubm9kZSl9fSxtZXRob2RzOntoYW5kbGVNb3VzZURvd25Pbk9wdGlvbjppKChmdW5jdGlvbigpe3RoaXMubm9kZS5pc0JyYW5jaCYmdGhpcy5pbnN0YW5jZS5kaXNhYmxlQnJhbmNoTm9kZXM/dGhpcy5pbnN0YW5jZS50b2dnbGVFeHBhbmRlZCh0aGlzLm5vZGUpOnRoaXMuaW5zdGFuY2Uuc2VsZWN0KHRoaXMubm9kZSl9KSksaGFuZGxlTW91c2VEb3duT25PcHRpb25BcnJvdzppKChmdW5jdGlvbigpe3RoaXMuaW5zdGFuY2UudG9nZ2xlRXhwYW5kZWQodGhpcy5ub2RlKX0pKX19LG9lPXtuYW1lOlwidnVlLXRyZWVzZWxlY3QtLW9wdGlvblwiLGluamVjdDpbXCJpbnN0YW5jZVwiLFwiVU5DSEVDS0VEXCIsXCJJTkRFVEVSTUlOQVRFXCIsXCJDSEVDS0VEXCJdLG1peGluczpbc2VdfSxyZT1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZ1ZS10cmVlc2VsZWN0X19saXN0LWl0ZW1cIn0sW24oXCJkaXZcIix7Y2xhc3M6W1widnVlLXRyZWVzZWxlY3RfX29wdGlvblwiLHtcInZ1ZS10cmVlc2VsZWN0X19vcHRpb24tLWRpc2FibGVkXCI6ZS5ub2RlLmRpc2FibGVkLFwidnVlLXRyZWVzZWxlY3RfX29wdGlvbi0tcm9vdFwiOmUubm9kZS5pc1Jvb3ROb2RlLFwidnVlLXRyZWVzZWxlY3RfX29wdGlvbi0tY2hpbGRcIjohZS5ub2RlLmlzUm9vdE5vZGUsXCJ2dWUtdHJlZXNlbGVjdF9fb3B0aW9uLS1zZWxlY3RlZFwiOmUuaW5zdGFuY2UuaXNTZWxlY3RlZChlLm5vZGUpLFwidnVlLXRyZWVzZWxlY3RfX29wdGlvbi0tbWF0Y2hlZFwiOmUuaW5zdGFuY2Uuc2VhcmNoaW5nJiZlLm5vZGUuaXNNYXRjaGVkLFwidnVlLXRyZWVzZWxlY3RfX29wdGlvbi0taGlkZVwiOmUuaW5zdGFuY2Uuc2VhcmNoaW5nJiYhKGUubm9kZS5pc01hdGNoZWR8fGUubm9kZS5oYXNNYXRjaGVkQ2hpbGQpfV19LFtlLm5vZGUuaXNMZWFmP24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9fb3B0aW9uLWFycm93LXBsYWNlaG9sZGVyXCJ9LFtlLl92KFwiwqBcIildKTpuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX29wdGlvbi1hcnJvdy13cmFwcGVyXCIsb246e21vdXNlZG93bjplLmhhbmRsZU1vdXNlRG93bk9uT3B0aW9uQXJyb3d9fSxbbihcInRyYW5zaXRpb25cIix7YXR0cnM6e25hbWU6XCJ2dWUtdHJlZXNlbGVjdF9fb3B0aW9uLWFycm93LS1wcmVwYXJlXCIsYXBwZWFyOlwiXCJ9fSxbbihcInNwYW5cIix7Y2xhc3M6W1widnVlLXRyZWVzZWxlY3RfX29wdGlvbi1hcnJvd1wiLHtcInZ1ZS10cmVlc2VsZWN0X19vcHRpb24tYXJyb3ctLXJvdGF0ZWRcIjplLnNob3VsZEV4cGFuZH1dfSldKV0sMSksZS5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZ1ZS10cmVlc2VsZWN0X19sYWJlbC13cmFwcGVyXCIsb246e21vdXNlZG93bjplLmhhbmRsZU1vdXNlRG93bk9uT3B0aW9ufX0sW2UuaW5zdGFuY2UubXVsdGlwbGUmJiFlLmluc3RhbmNlLmRpc2FibGVCcmFuY2hOb2Rlcz9uKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX2NoZWNrYm94LXdyYXBwZXJcIn0sW24oXCJzcGFuXCIse2NsYXNzOltcInZ1ZS10cmVlc2VsZWN0X19jaGVja2JveFwiLHtcInZ1ZS10cmVlc2VsZWN0X19jaGVja2JveC0tY2hlY2tlZFwiOmUuY2hlY2tlZFN0YXRlPT09ZS5DSEVDS0VELFwidnVlLXRyZWVzZWxlY3RfX2NoZWNrYm94LS1pbmRldGVybWluYXRlXCI6ZS5jaGVja2VkU3RhdGU9PT1lLklOREVURVJNSU5BVEUsXCJ2dWUtdHJlZXNlbGVjdF9fY2hlY2tib3gtLXVuY2hlY2tlZFwiOmUuY2hlY2tlZFN0YXRlPT09ZS5VTkNIRUNLRUR9XX0sW24oXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX2NoZWNrYm94LW1hcmtcIn0pXSldKTplLl9lKCksZS5fdihcIiBcIiksbihcImxhYmVsXCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX2xhYmVsXCJ9LFtlLl92KFwiXFxuICAgICAgICBcIitlLl9zKGUubm9kZS5sYWJlbCkrXCJcXG4gICAgICAgIFwiKSxlLm5vZGUuaXNCcmFuY2g/bihcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9fY291bnRcIn0sWyFlLmluc3RhbmNlLnNlYXJjaGluZyYmZS5pbnN0YW5jZS5zaG93Q291bnQ/W2UuX3YoXCIoXCIrZS5fcyhlLm5vZGUuY291bnRbZS5pbnN0YW5jZS5zaG93Q291bnRPZl0pK1wiKVwiKV06ZS5pbnN0YW5jZS5zZWFyY2hpbmcmJmUuaW5zdGFuY2Uuc2hvd0NvdW50T25TZWFyY2hDb21wdXRlZD9bZS5fdihcIihcIitlLl9zKGUuaW5zdGFuY2Uuc2VhcmNoaW5nQ291bnRbZS5ub2RlLmlkXVtlLmluc3RhbmNlLnNob3dDb3VudE9mXSkrXCIpXCIpXTplLl9lKCldLDIpOmUuX2UoKV0pXSldKSxlLl92KFwiIFwiKSxlLnNob3VsZEV4cGFuZD9uKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX2xpc3RcIn0sW2Uubm9kZS5pc0xvYWRlZD9bZS5ub2RlLmNoaWxkcmVuLmxlbmd0aD9lLl9sKGUubm9kZS5jaGlsZHJlbiwoZnVuY3Rpb24oZSl7cmV0dXJuIG4oXCJ2dWUtdHJlZXNlbGVjdC0tb3B0aW9uXCIse2tleTplLmlkLGF0dHJzOntub2RlOmV9fSl9KSk6bihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZ1ZS10cmVlc2VsZWN0X19uby1jaGlsZHJlbi10aXBcIn0sW2UuX20oMCksZS5fdihcIiBcIiksbihcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9fbm8tY2hpbGRyZW4tdGlwLXRleHRcIn0sW2UuX3YoZS5fcyhlLmluc3RhbmNlLm5vQ2hpbGRyZW5UZXh0KSldKV0pXTplLm5vZGUuaXNQZW5kaW5nP24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9fbG9hZGluZy10aXBcIn0sW2UuX20oMSksZS5fdihcIiBcIiksbihcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9fbG9hZGluZy10aXAtdGV4dFwifSxbZS5fdihlLl9zKGUuaW5zdGFuY2UubG9hZGluZ1RleHQpKV0pXSk6ZS5ub2RlLmxvYWRpbmdDaGlsZHJlbkVycm9yP24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9fZXJyb3ItdGlwXCJ9LFtlLl9tKDIpLGUuX3YoXCIgXCIpLG4oXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX2Vycm9yLXRpcC10ZXh0XCJ9LFtlLl92KFwiXFxuICAgICAgICBcIitlLl9zKGUubm9kZS5sb2FkaW5nQ2hpbGRyZW5FcnJvcikrXCJcXG4gICAgICAgIFwiKSxuKFwiYVwiLHtzdGF0aWNDbGFzczpcInZ1ZS10cmVlc2VsZWN0X19yZXRyeVwiLGF0dHJzOnt0aXRsZTplLmluc3RhbmNlLnJldHJ5VGl0bGV9LG9uOntjbGljazpmdW5jdGlvbih0KXtlLmluc3RhbmNlLmxvYWRPcHRpb25zKCExLGUubm9kZSl9fX0sW2UuX3YoXCJcXG4gICAgICAgICAgXCIrZS5fcyhlLmluc3RhbmNlLnJldHJ5VGV4dCkrXCJcXG4gICAgICAgIFwiKV0pXSldKTplLl9lKCldLDIpOmUuX2UoKV0pfSxhZT1bZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9faWNvbi13cmFwcGVyXCJ9LFtuKFwic3BhblwiLHtzdGF0aWNDbGFzczpcInZ1ZS10cmVlc2VsZWN0X19pY29uLXdhcm5pbmdcIn0pXSl9LGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX2ljb24td3JhcHBlclwifSxbbihcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9faWNvbi1sb2FkZXJcIn0pXSl9LGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX2ljb24td3JhcHBlclwifSxbbihcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9faWNvbi1lcnJvclwifSldKX1dLGxlPXtyZW5kZXI6cmUsc3RhdGljUmVuZGVyRm5zOmFlfSxjZT1sZSx1ZT1uKDApLGRlPXVlKG9lLGNlLCExLG51bGwsbnVsbCxudWxsKSxoZT1kZS5leHBvcnRzLHBlPXtuYW1lOlwidnVlLXRyZWVzZWxlY3RcIixjb21wb25lbnRzOntUcmVlc2VsZWN0T3B0aW9uOmhlfSxtaXhpbnM6W3ddLGNvbXB1dGVkOntWYWx1ZUNvbXBvbmVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm11bHRpcGxlP1g6aWV9fX0sZmU9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oXCJkaXZcIix7cmVmOlwid3JhcHBlclwiLGNsYXNzOltcInZ1ZS10cmVlc2VsZWN0XCIse1widnVlLXRyZWVzZWxlY3QtLXNpbmdsZVwiOiFlLm11bHRpcGxlLFwidnVlLXRyZWVzZWxlY3QtLW11bHRpXCI6ZS5tdWx0aXBsZSxcInZ1ZS10cmVlc2VsZWN0LS1zZWFyY2hhYmxlXCI6ZS5zZWFyY2hhYmxlLFwidnVlLXRyZWVzZWxlY3QtLWRpc2FibGVkXCI6ZS5kaXNhYmxlZCxcInZ1ZS10cmVlc2VsZWN0LS1mb2N1c2VkXCI6ZS5pc0ZvY3VzZWQsXCJ2dWUtdHJlZXNlbGVjdC0taGFzLXZhbHVlXCI6ZS5oYXNWYWx1ZSxcInZ1ZS10cmVlc2VsZWN0LS1vcGVuXCI6ZS5pc09wZW4sXCJ2dWUtdHJlZXNlbGVjdC0tb3Blbi1hYm92ZVwiOlwiYWJvdmVcIj09PWUucHJlZmZlcmVkT3BlbkRpcmVjdGlvbixcInZ1ZS10cmVlc2VsZWN0LS1vcGVuLWJlbG93XCI6XCJiZWxvd1wiPT09ZS5wcmVmZmVyZWRPcGVuRGlyZWN0aW9uLFwidnVlLXRyZWVzZWxlY3QtLWJyYW5jaC1ub2Rlcy1kaXNhYmxlZFwiOmUuZGlzYWJsZUJyYW5jaE5vZGVzfV0sb246e21vdXNlZG93bjplLmhhbmRsZU1vdXNlRG93bn19LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX2NvbnRyb2xcIn0sW24oZS5WYWx1ZUNvbXBvbmVudCx7cmVmOlwidmFsdWVcIix0YWc6XCJjb21wb25lbnRcIn0pLGUuX3YoXCIgXCIpLGUuc2hvdWxkU2hvd0NsZWFySWNvbj9uKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX2NsZWFyXCIsYXR0cnM6e3RpdGxlOmUubXVsdGlwbGU/ZS5jbGVhckFsbFRleHQ6ZS5jbGVhclZhbHVlVGV4dH0sb246e21vdXNlZG93bjplLmhhbmRsZU1vdXNlRG93bk9uQ2xlYXJ9fSxbZS5fdihcIsOXXCIpXSk6ZS5fZSgpLGUuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9fYXJyb3ctd3JhcHBlclwiLG9uOnttb3VzZWRvd246ZS5oYW5kbGVNb3VzZURvd25PbkFycm93fX0sW24oXCJzcGFuXCIse2NsYXNzOltcInZ1ZS10cmVlc2VsZWN0X19hcnJvd1wiLHtcInZ1ZS10cmVlc2VsZWN0X19hcnJvdy0tcm90YXRlZFwiOmUuaXNPcGVufV19KV0pXSwxKSxlLl92KFwiIFwiKSxlLmlzT3Blbj9uKFwiZGl2XCIse3JlZjpcIm1lbnVcIixzdGF0aWNDbGFzczpcInZ1ZS10cmVlc2VsZWN0X19tZW51XCIsc3R5bGU6e21heEhlaWdodDplLm9wdGltaXplZEhlaWdodCtcInB4XCJ9fSxbZS5yb290T3B0aW9uc0xvYWRlZD9bZS5zZWFyY2hpbmcmJmUubm9TZWFyY2hSZXN1bHRzP24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9fbm8tcmVzdWx0cy10aXBcIn0sW2UuX20oMCksZS5fdihcIiBcIiksbihcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9fbm8tcmVzdWx0cy10aXAtdGV4dFwifSxbZS5fdihlLl9zKGUubm9SZXN1bHRzVGV4dCkpXSldKTowPT09ZS5ub3JtYWxpemVkT3B0aW9ucy5sZW5ndGg/bihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZ1ZS10cmVlc2VsZWN0X19uby1vcHRpb25zLXRpcFwifSxbZS5fbSgxKSxlLl92KFwiIFwiKSxuKFwic3BhblwiLHtzdGF0aWNDbGFzczpcInZ1ZS10cmVlc2VsZWN0X19uby1vcHRpb25zLXRpcC10ZXh0XCJ9LFtlLl92KGUuX3MoZS5ub09wdGlvbnNUZXh0KSldKV0pOm4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9fbGlzdFwifSxlLl9sKGUubm9ybWFsaXplZE9wdGlvbnMsKGZ1bmN0aW9uKGUpe3JldHVybiBuKFwidHJlZXNlbGVjdC1vcHRpb25cIix7a2V5OmUuaWQsYXR0cnM6e25vZGU6ZX19KX0pKSldOltlLmxvYWRpbmdSb290T3B0aW9ucz9uKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX2xvYWRpbmctdGlwXCJ9LFtlLl9tKDIpLGUuX3YoXCIgXCIpLG4oXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX2xvYWRpbmctdGlwLXRleHRcIn0sW2UuX3YoZS5fcyhlLmxvYWRpbmdUZXh0KSldKV0pOmUubG9hZGluZ1Jvb3RPcHRpb25zRXJyb3I/bihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZ1ZS10cmVlc2VsZWN0X19lcnJvci10aXBcIn0sW2UuX20oMyksZS5fdihcIiBcIiksbihcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9fZXJyb3ItdGlwLXRleHRcIn0sW2UuX3YoXCJcXG4gICAgICAgICAgRmFpbGVkIHRvIGxvYWQgb3B0aW9uczogXCIrZS5fcyhlLmxvYWRpbmdSb290T3B0aW9uc0Vycm9yKStcIi5cXG4gICAgICAgICAgXCIpLG4oXCJhXCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX3JldHJ5XCIsYXR0cnM6e3RpdGxlOmUucmV0cnlUaXRsZX0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UubG9hZE9wdGlvbnMoITApfX19LFtlLl92KFwiXFxuICAgICAgICAgICAgXCIrZS5fcyhlLnJldHJ5VGV4dCkrXCJcXG4gICAgICAgICAgXCIpXSldKV0pOmUuX2UoKV1dLDIpOmUuX2UoKV0pfSx2ZT1bZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9faWNvbi13cmFwcGVyXCJ9LFtuKFwic3BhblwiLHtzdGF0aWNDbGFzczpcInZ1ZS10cmVlc2VsZWN0X19pY29uLXdhcm5pbmdcIn0pXSl9LGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX2ljb24td3JhcHBlclwifSxbbihcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJ2dWUtdHJlZXNlbGVjdF9faWNvbi13YXJuaW5nXCJ9KV0pfSxmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZ1ZS10cmVlc2VsZWN0X19pY29uLXdyYXBwZXJcIn0sW24oXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX2ljb24tbG9hZGVyXCJ9KV0pfSxmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcInZ1ZS10cmVlc2VsZWN0X19pY29uLXdyYXBwZXJcIn0sW24oXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwidnVlLXRyZWVzZWxlY3RfX2ljb24tZXJyb3JcIn0pXSl9XSxfZT17cmVuZGVyOmZlLHN0YXRpY1JlbmRlckZuczp2ZX0sbWU9X2UsQ2U9bigwKSx5ZT15LGJlPUNlKHBlLG1lLCExLHllLG51bGwsbnVsbCksZ2U9YmUuZXhwb3J0cztuLmQodCxcIlRyZWVzZWxlY3RcIiwoZnVuY3Rpb24oKXtyZXR1cm4gZ2V9KSksbi5kKHQsXCJ0cmVlc2VsZWN0TWl4aW5cIiwoZnVuY3Rpb24oKXtyZXR1cm4gd30pKSxuLmQodCxcIm9wdGlvbk1peGluXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIHNlfSkpLG4uZCh0LFwidmFsdWVNaXhpblwiLChmdW5jdGlvbigpe3JldHVybiBEfSkpO3QuZGVmYXVsdD1nZX0pLChmdW5jdGlvbihlLHQpe30pLChmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaShlLHQpe3ZhciBuPXQubGVuZ3RoLGk9ZS5sZW5ndGg7aWYoaT5uKXJldHVybiExO2lmKGk9PT1uKXJldHVybiBlPT09dDtlOmZvcih2YXIgcz0wLG89MDtzPGk7cysrKXtmb3IodmFyIHI9ZS5jaGFyQ29kZUF0KHMpO288bjspaWYodC5jaGFyQ29kZUF0KG8rKyk9PT1yKWNvbnRpbnVlIGU7cmV0dXJuITF9cmV0dXJuITB9ZS5leHBvcnRzPWl9KSwoZnVuY3Rpb24oZSx0LG4pe2Z1bmN0aW9uIGkoZSx0LG4pe2Z1bmN0aW9uIGkodCl7dmFyIG49QyxpPXk7cmV0dXJuIEM9eT12b2lkIDAseD10LGc9ZS5hcHBseShpLG4pfWZ1bmN0aW9uIHUoZSl7cmV0dXJuIHg9ZSxFPXNldFRpbWVvdXQocCx0KSxTP2koZSk6Z31mdW5jdGlvbiBkKGUpe3ZhciBuPWUtTyxpPWUteCxzPXQtbjtyZXR1cm4gTj9jKHMsYi1pKTpzfWZ1bmN0aW9uIGgoZSl7dmFyIG49ZS1PLGk9ZS14O3JldHVybiB2b2lkIDA9PT1PfHxuPj10fHxuPDB8fE4mJmk+PWJ9ZnVuY3Rpb24gcCgpe3ZhciBlPW8oKTtpZihoKGUpKXJldHVybiBmKGUpO0U9c2V0VGltZW91dChwLGQoZSkpfWZ1bmN0aW9uIGYoZSl7cmV0dXJuIEU9dm9pZCAwLHcmJkM/aShlKTooQz15PXZvaWQgMCxnKX1mdW5jdGlvbiB2KCl7dm9pZCAwIT09RSYmY2xlYXJUaW1lb3V0KEUpLHg9MCxDPU89eT1FPXZvaWQgMH1mdW5jdGlvbiBfKCl7cmV0dXJuIHZvaWQgMD09PUU/ZzpmKG8oKSl9ZnVuY3Rpb24gbSgpe3ZhciBlPW8oKSxuPWgoZSk7aWYoQz1hcmd1bWVudHMseT10aGlzLE89ZSxuKXtpZih2b2lkIDA9PT1FKXJldHVybiB1KE8pO2lmKE4pcmV0dXJuIEU9c2V0VGltZW91dChwLHQpLGkoTyl9cmV0dXJuIHZvaWQgMD09PUUmJihFPXNldFRpbWVvdXQocCx0KSksZ312YXIgQyx5LGIsZyxFLE8seD0wLFM9ITEsTj0hMSx3PSEwO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihhKTtyZXR1cm4gdD1yKHQpfHwwLHMobikmJihTPSEhbi5sZWFkaW5nLE49XCJtYXhXYWl0XCJpbiBuLGI9Tj9sKHIobi5tYXhXYWl0KXx8MCx0KTpiLHc9XCJ0cmFpbGluZ1wiaW4gbj8hIW4udHJhaWxpbmc6dyksbS5jYW5jZWw9dixtLmZsdXNoPV8sbX12YXIgcz1uKDEpLG89big4KSxyPW4oMTEpLGE9XCJFeHBlY3RlZCBhIGZ1bmN0aW9uXCIsbD1NYXRoLm1heCxjPU1hdGgubWluO2UuZXhwb3J0cz1pfSksKGZ1bmN0aW9uKGUsdCxuKXt2YXIgaT1uKDIpLHM9ZnVuY3Rpb24oKXtyZXR1cm4gaS5EYXRlLm5vdygpfTtlLmV4cG9ydHM9c30pLChmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe3ZhciBuPVwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0JiZ0Lk9iamVjdD09PU9iamVjdCYmdDtlLmV4cG9ydHM9bn0pLmNhbGwodCxuKDEwKSl9KSwoZnVuY3Rpb24oZSx0KXt2YXIgbjtuPShmdW5jdGlvbigpe3JldHVybiB0aGlzfSkoKTt0cnl7bj1ufHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCl8fCgwLGV2YWwpKFwidGhpc1wiKX1jYXRjaChlKXtcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiYobj13aW5kb3cpfWUuZXhwb3J0cz1ufSksKGZ1bmN0aW9uKGUsdCxuKXtmdW5jdGlvbiBpKGUpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXJldHVybiBlO2lmKG8oZSkpcmV0dXJuIHI7aWYocyhlKSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgZS52YWx1ZU9mP2UudmFsdWVPZigpOmU7ZT1zKHQpP3QrXCJcIjp0fWlmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiAwPT09ZT9lOitlO2U9ZS5yZXBsYWNlKGEsXCJcIik7dmFyIG49Yy50ZXN0KGUpO3JldHVybiBufHx1LnRlc3QoZSk/ZChlLnNsaWNlKDIpLG4/Mjo4KTpsLnRlc3QoZSk/cjorZX12YXIgcz1uKDEpLG89bigxMikscj1OYU4sYT0vXlxccyt8XFxzKyQvZyxsPS9eWy0rXTB4WzAtOWEtZl0rJC9pLGM9L14wYlswMV0rJC9pLHU9L14wb1swLTddKyQvaSxkPXBhcnNlSW50O2UuZXhwb3J0cz1pfSksKGZ1bmN0aW9uKGUsdCxuKXtmdW5jdGlvbiBpKGUpe3JldHVyblwic3ltYm9sXCI9PXR5cGVvZiBlfHxvKGUpJiZzKGUpPT1yfXZhciBzPW4oMTMpLG89bigxNikscj1cIltvYmplY3QgU3ltYm9sXVwiO2UuZXhwb3J0cz1pfSksKGZ1bmN0aW9uKGUsdCxuKXtmdW5jdGlvbiBpKGUpe3JldHVybiBudWxsPT1lP3ZvaWQgMD09PWU/bDphOmMmJmMgaW4gT2JqZWN0KGUpP28oZSk6cihlKX12YXIgcz1uKDMpLG89bigxNCkscj1uKDE1KSxhPVwiW29iamVjdCBOdWxsXVwiLGw9XCJbb2JqZWN0IFVuZGVmaW5lZF1cIixjPXM/cy50b1N0cmluZ1RhZzp2b2lkIDA7ZS5leHBvcnRzPWl9KSwoZnVuY3Rpb24oZSx0LG4pe2Z1bmN0aW9uIGkoZSl7dmFyIHQ9ci5jYWxsKGUsbCksbj1lW2xdO3RyeXtlW2xdPXZvaWQgMDt2YXIgaT0hMH1jYXRjaChlKXt9dmFyIHM9YS5jYWxsKGUpO3JldHVybiBpJiYodD9lW2xdPW46ZGVsZXRlIGVbbF0pLHN9dmFyIHM9bigzKSxvPU9iamVjdC5wcm90b3R5cGUscj1vLmhhc093blByb3BlcnR5LGE9by50b1N0cmluZyxsPXM/cy50b1N0cmluZ1RhZzp2b2lkIDA7ZS5leHBvcnRzPWl9KSwoZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKGUpe3JldHVybiBzLmNhbGwoZSl9dmFyIGk9T2JqZWN0LnByb3RvdHlwZSxzPWkudG9TdHJpbmc7ZS5leHBvcnRzPW59KSwoZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKGUpe3JldHVybiBudWxsIT1lJiZcIm9iamVjdFwiPT10eXBlb2YgZX1lLmV4cG9ydHM9bn0pXSl9KSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0ByaW9waGFlL3Z1ZS10cmVlc2VsZWN0L2Rpc3QvdnVlLXRyZWVzZWxlY3QubWluLmpzIiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cIndyYXBwZXIgdHJhY2tlci10YWJsZSBtYXRlcmlhbC10cmFja2Vyc1wiPlxyXG4gICAgICAgIDx0YWJsZSBjbGFzcz1cIiBoZWFkaW5nLXRhYmxlXCI+XHJcbiAgICAgICAgICAgIDx0aGVhZCBjbGFzcz1cInRoZWFkLWxpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPVwiY29sMVwiPiM8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cImNvbDJcIj5Uw6puPC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9XCJjb2wzXCI+xJDGoW4gduG7izwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPVwiY29sNFwiPkxv4bqhaSB0aeG7gW48L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cImNvbDVcIj5HacOhIGhp4buHbiB04bqhaTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPVwiY29sNlwiPkjDo25nPC90aD5cclxuICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgIDwvdGhlYWQ+ICAgICAgICAgICAgXHJcbiAgICAgICAgPC90YWJsZT5cclxuICAgICAgICA8bWF0ZXJpYWwtcm93IHYtZm9yPVwiKHJvdywgaW5kZXgpIGluIHJvd3NcIiA6cm93PVwicm93XCIgOmtleT1cImluZGV4XCI+PC9tYXRlcmlhbC1yb3c+XHJcbiAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIFxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuaW1wb3J0IFRyZWVzZWxlY3QgZnJvbSAnQHJpb3BoYWUvdnVlLXRyZWVzZWxlY3QnO1xyXG5pbXBvcnQgTWF0ZXJpYWxSb3cgZnJvbSAnLi9Sb3dzL01hdGVyaWFsUm93JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGRhdGEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcm93czogZmFsc2UsXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG1ldGhvZHM6IHtcclxuXHJcbiAgICB9LFxyXG4gICAgY29tcHV0ZWQ6IHtcclxuXHJcbiAgICB9LFxyXG4gICAgY3JlYXRlZCgpIHtcclxuICAgICAgICBheGlvcy5nZXQoYCR7dGhpcy4kc3RvcmUuc3RhdGUuYXBpQmFzZX0vbWF0ZXJpYWwvY2F0ZWdvcmllc2ApLnRoZW4oIHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnVVBEQVRFX0NBVEVHT1JZX0xJU1QnLCByZXNwb25zZS5kYXRhLmRhdGEpO1xyXG4gICAgICAgICAgICB9KS5jYXRjaCggZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICBheGlvcy5nZXQoYCR7dGhpcy4kc3RvcmUuc3RhdGUuYXBpQmFzZX0vbWF0ZXJpYWxgKS50aGVuKCByZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvd3MgPSByZXNwb25zZS5kYXRhLmRhdGE7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKCBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIGNvbXBvbmVudHM6IHtcclxuICAgICAgICBNYXRlcmlhbFJvdyxcclxuICAgIH1cclxufVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuXHJcbjwvc3R5bGU+XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyByZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvTWF0ZXJpYWxzLnZ1ZT9iY2FmY2RkZSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikodHJ1ZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W10sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIlwiLFwiZmlsZVwiOlwiTWF0ZXJpYWxzLnZ1ZVwiLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXI/c291cmNlTWFwIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTVlZjEwNGM1XCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAmYnVzdENhY2hlIS4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL01hdGVyaWFscy52dWVcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTVlZjEwNGM1XCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAmYnVzdENhY2hlIS4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL01hdGVyaWFscy52dWVcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImRpdlwiLFxuICAgIHsgc3RhdGljQ2xhc3M6IFwid3JhcHBlciB0cmFja2VyLXRhYmxlIG1hdGVyaWFsLXRyYWNrZXJzXCIgfSxcbiAgICBbXG4gICAgICBfdm0uX20oMCwgZmFsc2UsIGZhbHNlKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfdm0uX2woX3ZtLnJvd3MsIGZ1bmN0aW9uKHJvdywgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIF9jKFwibWF0ZXJpYWwtcm93XCIsIHsga2V5OiBpbmRleCwgYXR0cnM6IHsgcm93OiByb3cgfSB9KVxuICAgICAgfSlcbiAgICBdLFxuICAgIDJcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtcbiAgZnVuY3Rpb24oKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJ0YWJsZVwiLCB7IHN0YXRpY0NsYXNzOiBcIiBoZWFkaW5nLXRhYmxlXCIgfSwgW1xuICAgICAgX2MoXCJ0aGVhZFwiLCB7IHN0YXRpY0NsYXNzOiBcInRoZWFkLWxpZ2h0XCIgfSwgW1xuICAgICAgICBfYyhcInRyXCIsIFtcbiAgICAgICAgICBfYyhcInRoXCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sMVwiIH0sIFtfdm0uX3YoXCIjXCIpXSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcInRoXCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sMlwiIH0sIFtfdm0uX3YoXCJUw6puXCIpXSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcInRoXCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sM1wiIH0sIFtfdm0uX3YoXCLEkMahbiB24buLXCIpXSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcInRoXCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sNFwiIH0sIFtfdm0uX3YoXCJMb+G6oWkgdGnhu4FuXCIpXSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcInRoXCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sNVwiIH0sIFtfdm0uX3YoXCJHacOhIGhp4buHbiB04bqhaVwiKV0pLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXCJ0aFwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbDZcIiB9LCBbX3ZtLl92KFwiSMOjbmdcIildKVxuICAgICAgICBdKVxuICAgICAgXSlcbiAgICBdKVxuICB9XG5dXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbm1vZHVsZS5leHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKSAgICAgIC5yZXJlbmRlcihcImRhdGEtdi01ZWYxMDRjNVwiLCBtb2R1bGUuZXhwb3J0cylcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtNWVmMTA0YzVcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAmYnVzdENhY2hlIS4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL01hdGVyaWFscy52dWVcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4LmpzP3tcImlkXCI6XCJkYXRhLXYtNWVmMTA0YzVcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAmYnVzdENhY2hlIS4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL01hdGVyaWFscy52dWVcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTVlZjEwNGM1XFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjp0cnVlfSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCZidXN0Q2FjaGUhLi9NYXRlcmlhbHMudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCIzMTA3MzM4ZlwiLCBjb250ZW50LCBmYWxzZSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi01ZWYxMDRjNVxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6dHJ1ZX0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAmYnVzdENhY2hlIS4vTWF0ZXJpYWxzLnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi01ZWYxMDRjNVxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6dHJ1ZX0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAmYnVzdENhY2hlIS4vTWF0ZXJpYWxzLnZ1ZVwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlciEuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyP3NvdXJjZU1hcCEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi01ZWYxMDRjNVwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjp0cnVlfSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wJmJ1c3RDYWNoZSEuL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9NYXRlcmlhbHMudnVlXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzIS4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTVlZjEwNGM1XCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAmYnVzdENhY2hlIS4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL01hdGVyaWFscy52dWVcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwidmFyIGRpc3Bvc2VkID0gZmFsc2VcbmZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIGlmIChkaXNwb3NlZCkgcmV0dXJuXG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi01ZWYxMDRjNVxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6dHJ1ZX0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAmYnVzdENhY2hlIS4vTWF0ZXJpYWxzLnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbnZhciBfX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV0sW1xcXCJlbnZcXFwiLHtcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCJsYXN0IDIgdmVyc2lvbnNcXFwiLFxcXCI+IDUlIGluIEJFXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX0sXFxcIm1vZHVsZXNcXFwiOmZhbHNlfV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFxcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixcXFwic3ludGF4LWR5bmFtaWMtaW1wb3J0XFxcIixcXFwidHJhbnNmb3JtLWlubGluZS1lbnZpcm9ubWVudC12YXJpYWJsZXNcXFwiXX0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAmYnVzdENhY2hlIS4vTWF0ZXJpYWxzLnZ1ZVwiKVxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNWVmMTA0YzVcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAmYnVzdENhY2hlIS4vTWF0ZXJpYWxzLnZ1ZVwiKVxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicmVzb3VyY2VzXFxcXGFzc2V0c1xcXFxqc1xcXFxjb21wb25lbnRzXFxcXE1hdGVyaWFscy52dWVcIlxuaWYgKENvbXBvbmVudC5lc01vZHVsZSAmJiBPYmplY3Qua2V5cyhDb21wb25lbnQuZXNNb2R1bGUpLnNvbWUoZnVuY3Rpb24gKGtleSkgeyAgcmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5LnN1YnN0cigwLCAyKSAhPT0gXCJfX1wifSkpIHsgIGNvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTVlZjEwNGM1XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtNWVmMTA0YzVcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4nICsgJyAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL01hdGVyaWFscy52dWVcbi8vIG1vZHVsZSBpZCA9IC4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL01hdGVyaWFscy52dWVcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==